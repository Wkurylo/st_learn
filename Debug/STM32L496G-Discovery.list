
STM32L496G-Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048f8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08004aa8  08004aa8  00014aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d48  08004d48  00020358  2**0
                  CONTENTS
  4 .ARM          00000008  08004d48  08004d48  00014d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d50  08004d50  00020358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004d50  08004d50  00014d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08004d58  08004d58  00014d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  08004d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  20000358  080050b8  00020358  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d8  080050b8  000205d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020358  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c60  00000000  00000000  00020388  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023f1  00000000  00000000  00033fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000a524  00000000  00000000  000363d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000d28  00000000  00000000  00040900  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001078  00000000  00000000  00041628  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0003234d  00000000  00000000  000426a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000d45a  00000000  00000000  000749ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    001477e4  00000000  00000000  00081e47  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007c  00000000  00000000  001c962b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f78  00000000  00000000  001c96a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000000df  00000000  00000000  001cc620  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000358 	.word	0x20000358
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004a90 	.word	0x08004a90

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000035c 	.word	0x2000035c
 80001ec:	08004a90 	.word	0x08004a90

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b97a 	b.w	80005ac <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	468c      	mov	ip, r1
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	9e08      	ldr	r6, [sp, #32]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d151      	bne.n	8000384 <__udivmoddi4+0xb4>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d96d      	bls.n	80003c2 <__udivmoddi4+0xf2>
 80002e6:	fab2 fe82 	clz	lr, r2
 80002ea:	f1be 0f00 	cmp.w	lr, #0
 80002ee:	d00b      	beq.n	8000308 <__udivmoddi4+0x38>
 80002f0:	f1ce 0c20 	rsb	ip, lr, #32
 80002f4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000300:	ea4c 0c05 	orr.w	ip, ip, r5
 8000304:	fa00 f40e 	lsl.w	r4, r0, lr
 8000308:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800030c:	0c25      	lsrs	r5, r4, #16
 800030e:	fbbc f8fa 	udiv	r8, ip, sl
 8000312:	fa1f f987 	uxth.w	r9, r7
 8000316:	fb0a cc18 	mls	ip, sl, r8, ip
 800031a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800031e:	fb08 f309 	mul.w	r3, r8, r9
 8000322:	42ab      	cmp	r3, r5
 8000324:	d90a      	bls.n	800033c <__udivmoddi4+0x6c>
 8000326:	19ed      	adds	r5, r5, r7
 8000328:	f108 32ff 	add.w	r2, r8, #4294967295
 800032c:	f080 8123 	bcs.w	8000576 <__udivmoddi4+0x2a6>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f240 8120 	bls.w	8000576 <__udivmoddi4+0x2a6>
 8000336:	f1a8 0802 	sub.w	r8, r8, #2
 800033a:	443d      	add	r5, r7
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb5 f0fa 	udiv	r0, r5, sl
 8000344:	fb0a 5510 	mls	r5, sl, r0, r5
 8000348:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800034c:	fb00 f909 	mul.w	r9, r0, r9
 8000350:	45a1      	cmp	r9, r4
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x98>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	f080 810a 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800035e:	45a1      	cmp	r9, r4
 8000360:	f240 8107 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000364:	3802      	subs	r0, #2
 8000366:	443c      	add	r4, r7
 8000368:	eba4 0409 	sub.w	r4, r4, r9
 800036c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000370:	2100      	movs	r1, #0
 8000372:	2e00      	cmp	r6, #0
 8000374:	d061      	beq.n	800043a <__udivmoddi4+0x16a>
 8000376:	fa24 f40e 	lsr.w	r4, r4, lr
 800037a:	2300      	movs	r3, #0
 800037c:	6034      	str	r4, [r6, #0]
 800037e:	6073      	str	r3, [r6, #4]
 8000380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000384:	428b      	cmp	r3, r1
 8000386:	d907      	bls.n	8000398 <__udivmoddi4+0xc8>
 8000388:	2e00      	cmp	r6, #0
 800038a:	d054      	beq.n	8000436 <__udivmoddi4+0x166>
 800038c:	2100      	movs	r1, #0
 800038e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000392:	4608      	mov	r0, r1
 8000394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000398:	fab3 f183 	clz	r1, r3
 800039c:	2900      	cmp	r1, #0
 800039e:	f040 808e 	bne.w	80004be <__udivmoddi4+0x1ee>
 80003a2:	42ab      	cmp	r3, r5
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xdc>
 80003a6:	4282      	cmp	r2, r0
 80003a8:	f200 80fa 	bhi.w	80005a0 <__udivmoddi4+0x2d0>
 80003ac:	1a84      	subs	r4, r0, r2
 80003ae:	eb65 0503 	sbc.w	r5, r5, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	46ac      	mov	ip, r5
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d03f      	beq.n	800043a <__udivmoddi4+0x16a>
 80003ba:	e886 1010 	stmia.w	r6, {r4, ip}
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	b912      	cbnz	r2, 80003ca <__udivmoddi4+0xfa>
 80003c4:	2701      	movs	r7, #1
 80003c6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ca:	fab7 fe87 	clz	lr, r7
 80003ce:	f1be 0f00 	cmp.w	lr, #0
 80003d2:	d134      	bne.n	800043e <__udivmoddi4+0x16e>
 80003d4:	1beb      	subs	r3, r5, r7
 80003d6:	0c3a      	lsrs	r2, r7, #16
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	2101      	movs	r1, #1
 80003de:	fbb3 f8f2 	udiv	r8, r3, r2
 80003e2:	0c25      	lsrs	r5, r4, #16
 80003e4:	fb02 3318 	mls	r3, r2, r8, r3
 80003e8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ec:	fb0c f308 	mul.w	r3, ip, r8
 80003f0:	42ab      	cmp	r3, r5
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x134>
 80003f4:	19ed      	adds	r5, r5, r7
 80003f6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x132>
 80003fc:	42ab      	cmp	r3, r5
 80003fe:	f200 80d1 	bhi.w	80005a4 <__udivmoddi4+0x2d4>
 8000402:	4680      	mov	r8, r0
 8000404:	1aed      	subs	r5, r5, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb5 f0f2 	udiv	r0, r5, r2
 800040c:	fb02 5510 	mls	r5, r2, r0, r5
 8000410:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000414:	fb0c fc00 	mul.w	ip, ip, r0
 8000418:	45a4      	cmp	ip, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x15c>
 800041c:	19e4      	adds	r4, r4, r7
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x15a>
 8000424:	45a4      	cmp	ip, r4
 8000426:	f200 80b8 	bhi.w	800059a <__udivmoddi4+0x2ca>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 040c 	sub.w	r4, r4, ip
 8000430:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000434:	e79d      	b.n	8000372 <__udivmoddi4+0xa2>
 8000436:	4631      	mov	r1, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	f1ce 0420 	rsb	r4, lr, #32
 8000442:	fa05 f30e 	lsl.w	r3, r5, lr
 8000446:	fa07 f70e 	lsl.w	r7, r7, lr
 800044a:	fa20 f804 	lsr.w	r8, r0, r4
 800044e:	0c3a      	lsrs	r2, r7, #16
 8000450:	fa25 f404 	lsr.w	r4, r5, r4
 8000454:	ea48 0803 	orr.w	r8, r8, r3
 8000458:	fbb4 f1f2 	udiv	r1, r4, r2
 800045c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000460:	fb02 4411 	mls	r4, r2, r1, r4
 8000464:	fa1f fc87 	uxth.w	ip, r7
 8000468:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800046c:	fb01 f30c 	mul.w	r3, r1, ip
 8000470:	42ab      	cmp	r3, r5
 8000472:	fa00 f40e 	lsl.w	r4, r0, lr
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x1bc>
 8000478:	19ed      	adds	r5, r5, r7
 800047a:	f101 30ff 	add.w	r0, r1, #4294967295
 800047e:	f080 808a 	bcs.w	8000596 <__udivmoddi4+0x2c6>
 8000482:	42ab      	cmp	r3, r5
 8000484:	f240 8087 	bls.w	8000596 <__udivmoddi4+0x2c6>
 8000488:	3902      	subs	r1, #2
 800048a:	443d      	add	r5, r7
 800048c:	1aeb      	subs	r3, r5, r3
 800048e:	fa1f f588 	uxth.w	r5, r8
 8000492:	fbb3 f0f2 	udiv	r0, r3, r2
 8000496:	fb02 3310 	mls	r3, r2, r0, r3
 800049a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800049e:	fb00 f30c 	mul.w	r3, r0, ip
 80004a2:	42ab      	cmp	r3, r5
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x1e6>
 80004a6:	19ed      	adds	r5, r5, r7
 80004a8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ac:	d26f      	bcs.n	800058e <__udivmoddi4+0x2be>
 80004ae:	42ab      	cmp	r3, r5
 80004b0:	d96d      	bls.n	800058e <__udivmoddi4+0x2be>
 80004b2:	3802      	subs	r0, #2
 80004b4:	443d      	add	r5, r7
 80004b6:	1aeb      	subs	r3, r5, r3
 80004b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004bc:	e78f      	b.n	80003de <__udivmoddi4+0x10e>
 80004be:	f1c1 0720 	rsb	r7, r1, #32
 80004c2:	fa22 f807 	lsr.w	r8, r2, r7
 80004c6:	408b      	lsls	r3, r1
 80004c8:	fa05 f401 	lsl.w	r4, r5, r1
 80004cc:	ea48 0303 	orr.w	r3, r8, r3
 80004d0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004d4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004d8:	40fd      	lsrs	r5, r7
 80004da:	ea4e 0e04 	orr.w	lr, lr, r4
 80004de:	fbb5 f9fc 	udiv	r9, r5, ip
 80004e2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004e6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ea:	fa1f f883 	uxth.w	r8, r3
 80004ee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004f2:	fb09 f408 	mul.w	r4, r9, r8
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	fa02 f201 	lsl.w	r2, r2, r1
 80004fc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x244>
 8000502:	18ed      	adds	r5, r5, r3
 8000504:	f109 30ff 	add.w	r0, r9, #4294967295
 8000508:	d243      	bcs.n	8000592 <__udivmoddi4+0x2c2>
 800050a:	42ac      	cmp	r4, r5
 800050c:	d941      	bls.n	8000592 <__udivmoddi4+0x2c2>
 800050e:	f1a9 0902 	sub.w	r9, r9, #2
 8000512:	441d      	add	r5, r3
 8000514:	1b2d      	subs	r5, r5, r4
 8000516:	fa1f fe8e 	uxth.w	lr, lr
 800051a:	fbb5 f0fc 	udiv	r0, r5, ip
 800051e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000522:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000526:	fb00 f808 	mul.w	r8, r0, r8
 800052a:	45a0      	cmp	r8, r4
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x26e>
 800052e:	18e4      	adds	r4, r4, r3
 8000530:	f100 35ff 	add.w	r5, r0, #4294967295
 8000534:	d229      	bcs.n	800058a <__udivmoddi4+0x2ba>
 8000536:	45a0      	cmp	r8, r4
 8000538:	d927      	bls.n	800058a <__udivmoddi4+0x2ba>
 800053a:	3802      	subs	r0, #2
 800053c:	441c      	add	r4, r3
 800053e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000542:	eba4 0408 	sub.w	r4, r4, r8
 8000546:	fba0 8902 	umull	r8, r9, r0, r2
 800054a:	454c      	cmp	r4, r9
 800054c:	46c6      	mov	lr, r8
 800054e:	464d      	mov	r5, r9
 8000550:	d315      	bcc.n	800057e <__udivmoddi4+0x2ae>
 8000552:	d012      	beq.n	800057a <__udivmoddi4+0x2aa>
 8000554:	b156      	cbz	r6, 800056c <__udivmoddi4+0x29c>
 8000556:	ebba 030e 	subs.w	r3, sl, lr
 800055a:	eb64 0405 	sbc.w	r4, r4, r5
 800055e:	fa04 f707 	lsl.w	r7, r4, r7
 8000562:	40cb      	lsrs	r3, r1
 8000564:	431f      	orrs	r7, r3
 8000566:	40cc      	lsrs	r4, r1
 8000568:	6037      	str	r7, [r6, #0]
 800056a:	6074      	str	r4, [r6, #4]
 800056c:	2100      	movs	r1, #0
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	4618      	mov	r0, r3
 8000574:	e6f8      	b.n	8000368 <__udivmoddi4+0x98>
 8000576:	4690      	mov	r8, r2
 8000578:	e6e0      	b.n	800033c <__udivmoddi4+0x6c>
 800057a:	45c2      	cmp	sl, r8
 800057c:	d2ea      	bcs.n	8000554 <__udivmoddi4+0x284>
 800057e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000582:	eb69 0503 	sbc.w	r5, r9, r3
 8000586:	3801      	subs	r0, #1
 8000588:	e7e4      	b.n	8000554 <__udivmoddi4+0x284>
 800058a:	4628      	mov	r0, r5
 800058c:	e7d7      	b.n	800053e <__udivmoddi4+0x26e>
 800058e:	4640      	mov	r0, r8
 8000590:	e791      	b.n	80004b6 <__udivmoddi4+0x1e6>
 8000592:	4681      	mov	r9, r0
 8000594:	e7be      	b.n	8000514 <__udivmoddi4+0x244>
 8000596:	4601      	mov	r1, r0
 8000598:	e778      	b.n	800048c <__udivmoddi4+0x1bc>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e745      	b.n	800042c <__udivmoddi4+0x15c>
 80005a0:	4608      	mov	r0, r1
 80005a2:	e708      	b.n	80003b6 <__udivmoddi4+0xe6>
 80005a4:	f1a8 0802 	sub.w	r8, r8, #2
 80005a8:	443d      	add	r5, r7
 80005aa:	e72b      	b.n	8000404 <__udivmoddi4+0x134>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <mfxstm32l152_DeInit>:
  uint8_t idx = 0;
  
  /* Check for all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 80005b0:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <mfxstm32l152_DeInit+0x28>)
 80005b2:	781a      	ldrb	r2, [r3, #0]
 80005b4:	4282      	cmp	r2, r0
 80005b6:	d00a      	beq.n	80005ce <mfxstm32l152_DeInit+0x1e>
 80005b8:	785a      	ldrb	r2, [r3, #1]
 80005ba:	4282      	cmp	r2, r0
 80005bc:	d009      	beq.n	80005d2 <mfxstm32l152_DeInit+0x22>
 80005be:	789a      	ldrb	r2, [r3, #2]
 80005c0:	4282      	cmp	r2, r0
 80005c2:	d108      	bne.n	80005d6 <mfxstm32l152_DeInit+0x26>
 80005c4:	2202      	movs	r2, #2
    {
      mfxstm32l152[idx] = 0;
 80005c6:	2100      	movs	r1, #0
 80005c8:	5499      	strb	r1, [r3, r2]
    MFX_IO_DeInit();
 80005ca:	f000 be7b 	b.w	80012c4 <MFX_IO_DeInit>
    if(mfxstm32l152[idx] == DeviceAddr)
 80005ce:	2200      	movs	r2, #0
 80005d0:	e7f9      	b.n	80005c6 <mfxstm32l152_DeInit+0x16>
 80005d2:	2201      	movs	r2, #1
 80005d4:	e7f7      	b.n	80005c6 <mfxstm32l152_DeInit+0x16>
 80005d6:	4770      	bx	lr
 80005d8:	20000374 	.word	0x20000374

080005dc <mfxstm32l152_IO_ClearIT>:
  if (pin_0_7)
 80005dc:	f011 02ff 	ands.w	r2, r1, #255	; 0xff
{
 80005e0:	b570      	push	{r4, r5, r6, lr}
 80005e2:	4604      	mov	r4, r0
  pin_8_15  = IO_Pin >> 8;
 80005e4:	f3c1 2607 	ubfx	r6, r1, #8, #8
  pin_16_23 = IO_Pin >> 16;
 80005e8:	f3c1 4507 	ubfx	r5, r1, #16, #8
  if (pin_0_7)
 80005ec:	d002      	beq.n	80005f4 <mfxstm32l152_IO_ClearIT+0x18>
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK1, pin_0_7);
 80005ee:	2154      	movs	r1, #84	; 0x54
 80005f0:	f000 fef4 	bl	80013dc <MFX_IO_Write>
  if (pin_8_15)
 80005f4:	b126      	cbz	r6, 8000600 <mfxstm32l152_IO_ClearIT+0x24>
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK2, pin_8_15);
 80005f6:	4632      	mov	r2, r6
 80005f8:	2155      	movs	r1, #85	; 0x55
 80005fa:	4620      	mov	r0, r4
 80005fc:	f000 feee 	bl	80013dc <MFX_IO_Write>
  if (pin_16_23)
 8000600:	b135      	cbz	r5, 8000610 <mfxstm32l152_IO_ClearIT+0x34>
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK3, pin_16_23);
 8000602:	462a      	mov	r2, r5
 8000604:	4620      	mov	r0, r4
 8000606:	2156      	movs	r1, #86	; 0x56
}
 8000608:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK3, pin_16_23);
 800060c:	f000 bee6 	b.w	80013dc <MFX_IO_Write>
 8000610:	bd70      	pop	{r4, r5, r6, pc}

08000612 <mfxstm32l152_Reset>:
{
 8000612:	b508      	push	{r3, lr}
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_SWRST);
 8000614:	2280      	movs	r2, #128	; 0x80
 8000616:	2140      	movs	r1, #64	; 0x40
 8000618:	f000 fee0 	bl	80013dc <MFX_IO_Write>
  MFX_IO_Delay(10);
 800061c:	200a      	movs	r0, #10
}
 800061e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MFX_IO_Delay(10);
 8000622:	f000 bf11 	b.w	8001448 <MFX_IO_Delay>

08000626 <mfxstm32l152_LowPower>:
{
 8000626:	b508      	push	{r3, lr}
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_STANDBY);
 8000628:	2240      	movs	r2, #64	; 0x40
 800062a:	4611      	mov	r1, r2
 800062c:	f000 fed6 	bl	80013dc <MFX_IO_Write>
}
 8000630:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MFX_IO_EnableWakeupPin();
 8000634:	f000 bea0 	b.w	8001378 <MFX_IO_EnableWakeupPin>

08000638 <mfxstm32l152_ReadID>:
{
 8000638:	b510      	push	{r4, lr}
 800063a:	4604      	mov	r4, r0
  MFX_IO_Delay(1);
 800063c:	2001      	movs	r0, #1
 800063e:	f000 ff03 	bl	8001448 <MFX_IO_Delay>
  MFX_IO_Init();
 8000642:	f000 fe29 	bl	8001298 <MFX_IO_Init>
  id = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_ID);
 8000646:	2100      	movs	r1, #0
 8000648:	4620      	mov	r0, r4
 800064a:	f000 fee3 	bl	8001414 <MFX_IO_Read>
}
 800064e:	bd10      	pop	{r4, pc}

08000650 <mfxstm32l152_IO_Start>:
{
 8000650:	b538      	push	{r3, r4, r5, lr}
 8000652:	460d      	mov	r5, r1
  mode = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 8000654:	2140      	movs	r1, #64	; 0x40
{
 8000656:	4604      	mov	r4, r0
  mode = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 8000658:	f000 fedc 	bl	8001414 <MFX_IO_Read>
  if (IO_Pin > 0xFFFF)
 800065c:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    mode |= MFXSTM32L152_ALTERNATE_GPIO_EN;  
 8000660:	bf2a      	itet	cs
 8000662:	f040 0209 	orrcs.w	r2, r0, #9
 8000666:	f000 02f7 	andcc.w	r2, r0, #247	; 0xf7
 800066a:	b2d2      	uxtbcs	r2, r2
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 800066c:	4620      	mov	r0, r4
    mode &= ~MFXSTM32L152_ALTERNATE_GPIO_EN;  
 800066e:	bf38      	it	cc
 8000670:	f042 0201 	orrcc.w	r2, r2, #1
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 8000674:	2140      	movs	r1, #64	; 0x40
 8000676:	f000 feb1 	bl	80013dc <MFX_IO_Write>
  MFX_IO_Delay(1);
 800067a:	2001      	movs	r0, #1
}
 800067c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  MFX_IO_Delay(1);
 8000680:	f000 bee2 	b.w	8001448 <MFX_IO_Delay>

08000684 <mfxstm32l152_reg24_setPinValue>:
  * @param  PinPosition: Pin [0:23]
  * @param  PinValue: 0/1
  * @retval None
  */
void mfxstm32l152_reg24_setPinValue(uint16_t DeviceAddr, uint8_t RegisterAddr, uint32_t PinPosition, uint8_t PinValue )
{
 8000684:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t tmp = 0;
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = PinPosition & 0x0000ff;
  pin_8_15  = PinPosition >> 8;
 8000688:	ea4f 2b12 	mov.w	fp, r2, lsr #8
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = PinPosition >> 16;
 800068c:	ea4f 4812 	mov.w	r8, r2, lsr #16
{
 8000690:	4691      	mov	r9, r2
  
  if (pin_0_7)
 8000692:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
{
 8000696:	4605      	mov	r5, r0
 8000698:	460c      	mov	r4, r1
 800069a:	461f      	mov	r7, r3
  pin_8_15  = PinPosition >> 8;
 800069c:	fa5f fa8b 	uxtb.w	sl, fp
  pin_16_23 = PinPosition >> 16;
 80006a0:	fa5f f688 	uxtb.w	r6, r8
  if (pin_0_7)
 80006a4:	d00a      	beq.n	80006bc <mfxstm32l152_reg24_setPinValue+0x38>
 80006a6:	9201      	str	r2, [sp, #4]
  {  
    /* Get the current register value */ 
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr);
 80006a8:	f000 feb4 	bl	8001414 <MFX_IO_Read>
  
    /* Set the selected pin direction */
    if (PinValue != 0)
 80006ac:	b35f      	cbz	r7, 8000706 <mfxstm32l152_reg24_setPinValue+0x82>
    {
      tmp |= (uint8_t)pin_0_7;
 80006ae:	9a01      	ldr	r2, [sp, #4]
 80006b0:	4302      	orrs	r2, r0
    }  
    else 
    {
      tmp &= ~(uint8_t)pin_0_7;
 80006b2:	b2d2      	uxtb	r2, r2
    }
  
    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr, tmp);
 80006b4:	4621      	mov	r1, r4
 80006b6:	4628      	mov	r0, r5
 80006b8:	f000 fe90 	bl	80013dc <MFX_IO_Write>
  }

  if (pin_8_15)
 80006bc:	f1ba 0f00 	cmp.w	sl, #0
 80006c0:	d00f      	beq.n	80006e2 <mfxstm32l152_reg24_setPinValue+0x5e>
  {
    /* Get the current register value */ 
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+1);
 80006c2:	f104 0901 	add.w	r9, r4, #1
 80006c6:	fa5f f989 	uxtb.w	r9, r9
 80006ca:	4649      	mov	r1, r9
 80006cc:	4628      	mov	r0, r5
 80006ce:	f000 fea1 	bl	8001414 <MFX_IO_Read>
  
    /* Set the selected pin direction */
    if (PinValue != 0)
 80006d2:	b1df      	cbz	r7, 800070c <mfxstm32l152_reg24_setPinValue+0x88>
    {
      tmp |= (uint8_t)pin_8_15;
 80006d4:	ea4a 0200 	orr.w	r2, sl, r0
    }  
    else 
    {
      tmp &= ~(uint8_t)pin_8_15;
 80006d8:	b2d2      	uxtb	r2, r2
    }
  
    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+1, tmp);
 80006da:	4649      	mov	r1, r9
 80006dc:	4628      	mov	r0, r5
 80006de:	f000 fe7d 	bl	80013dc <MFX_IO_Write>
  }  

  if (pin_16_23)
 80006e2:	b1ce      	cbz	r6, 8000718 <mfxstm32l152_reg24_setPinValue+0x94>
  {
    /* Get the current register value */ 
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+2);
 80006e4:	3402      	adds	r4, #2
 80006e6:	b2e4      	uxtb	r4, r4
 80006e8:	4621      	mov	r1, r4
 80006ea:	4628      	mov	r0, r5
 80006ec:	f000 fe92 	bl	8001414 <MFX_IO_Read>
  
    /* Set the selected pin direction */
    if (PinValue != 0)
 80006f0:	b17f      	cbz	r7, 8000712 <mfxstm32l152_reg24_setPinValue+0x8e>
    {
      tmp |= (uint8_t)pin_16_23;
 80006f2:	ea46 0200 	orr.w	r2, r6, r0
    }  
    else 
    {
      tmp &= ~(uint8_t)pin_16_23;
 80006f6:	b2d2      	uxtb	r2, r2
    }
  
    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+2, tmp);
 80006f8:	4621      	mov	r1, r4
 80006fa:	4628      	mov	r0, r5
  } 
}
 80006fc:	b003      	add	sp, #12
 80006fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    MFX_IO_Write(DeviceAddr, RegisterAddr+2, tmp);
 8000702:	f000 be6b 	b.w	80013dc <MFX_IO_Write>
      tmp &= ~(uint8_t)pin_0_7;
 8000706:	ea20 0209 	bic.w	r2, r0, r9
 800070a:	e7d2      	b.n	80006b2 <mfxstm32l152_reg24_setPinValue+0x2e>
      tmp &= ~(uint8_t)pin_8_15;
 800070c:	ea20 020b 	bic.w	r2, r0, fp
 8000710:	e7e2      	b.n	80006d8 <mfxstm32l152_reg24_setPinValue+0x54>
      tmp &= ~(uint8_t)pin_16_23;
 8000712:	ea20 0208 	bic.w	r2, r0, r8
 8000716:	e7ee      	b.n	80006f6 <mfxstm32l152_reg24_setPinValue+0x72>
}
 8000718:	b003      	add	sp, #12
 800071a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800071e <mfxstm32l152_IO_ReadPin>:
{
 800071e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000720:	460e      	mov	r6, r1
  tmp1 = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE1);
 8000722:	2110      	movs	r1, #16
{
 8000724:	4605      	mov	r5, r0
  tmp1 = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE1);
 8000726:	f000 fe75 	bl	8001414 <MFX_IO_Read>
  tmp2 = (uint16_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE2);
 800072a:	2111      	movs	r1, #17
  tmp1 = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE1);
 800072c:	4604      	mov	r4, r0
  tmp2 = (uint16_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE2);
 800072e:	4628      	mov	r0, r5
 8000730:	f000 fe70 	bl	8001414 <MFX_IO_Read>
  tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE3);
 8000734:	2112      	movs	r1, #18
  tmp2 = (uint16_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE2);
 8000736:	4607      	mov	r7, r0
  tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE3);
 8000738:	4628      	mov	r0, r5
 800073a:	f000 fe6b 	bl	8001414 <MFX_IO_Read>
  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 800073e:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 8000742:	eb04 4000 	add.w	r0, r4, r0, lsl #16
}
 8000746:	4030      	ands	r0, r6
 8000748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800074a <mfxstm32l152_IO_ITStatus>:
{
 800074a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800074c:	460e      	mov	r6, r1
  tmp1 = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1);
 800074e:	210c      	movs	r1, #12
{
 8000750:	4605      	mov	r5, r0
  tmp1 = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1);
 8000752:	f000 fe5f 	bl	8001414 <MFX_IO_Read>
  tmp2 = (uint16_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING2);
 8000756:	210d      	movs	r1, #13
  tmp1 = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1);
 8000758:	4604      	mov	r4, r0
  tmp2 = (uint16_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING2);
 800075a:	4628      	mov	r0, r5
 800075c:	f000 fe5a 	bl	8001414 <MFX_IO_Read>
  tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING3);
 8000760:	210e      	movs	r1, #14
  tmp2 = (uint16_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING2);
 8000762:	4607      	mov	r7, r0
  tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING3);
 8000764:	4628      	mov	r0, r5
 8000766:	f000 fe55 	bl	8001414 <MFX_IO_Read>
  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 800076a:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 800076e:	eb04 4000 	add.w	r0, r4, r0, lsl #16
}
 8000772:	4030      	ands	r0, r6
 8000774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000776 <mfxstm32l152_TS_Start>:
{
 8000776:	b510      	push	{r4, lr}
  mode = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 8000778:	2140      	movs	r1, #64	; 0x40
{
 800077a:	4604      	mov	r4, r0
  mode = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 800077c:	f000 fe4a 	bl	8001414 <MFX_IO_Read>
  mode |= MFXSTM32L152_TS_EN;  
 8000780:	f040 0202 	orr.w	r2, r0, #2
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 8000784:	b2d2      	uxtb	r2, r2
 8000786:	2140      	movs	r1, #64	; 0x40
 8000788:	4620      	mov	r0, r4
 800078a:	f000 fe27 	bl	80013dc <MFX_IO_Write>
  MFX_IO_Delay(2); 
 800078e:	2002      	movs	r0, #2
 8000790:	f000 fe5a 	bl	8001448 <MFX_IO_Delay>
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_TS_SETTLING, 0x32);
 8000794:	4620      	mov	r0, r4
 8000796:	2232      	movs	r2, #50	; 0x32
 8000798:	21a0      	movs	r1, #160	; 0xa0
 800079a:	f000 fe1f 	bl	80013dc <MFX_IO_Write>
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_TS_TOUCH_DET_DELAY, 0x5);
 800079e:	4620      	mov	r0, r4
 80007a0:	2205      	movs	r2, #5
 80007a2:	21a1      	movs	r1, #161	; 0xa1
 80007a4:	f000 fe1a 	bl	80013dc <MFX_IO_Write>
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_TS_AVE, 0x04);
 80007a8:	4620      	mov	r0, r4
 80007aa:	2204      	movs	r2, #4
 80007ac:	21a2      	movs	r1, #162	; 0xa2
 80007ae:	f000 fe15 	bl	80013dc <MFX_IO_Write>
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_TS_FIFO_TH, 0x01);
 80007b2:	4620      	mov	r0, r4
 80007b4:	2201      	movs	r2, #1
 80007b6:	21a4      	movs	r1, #164	; 0xa4
 80007b8:	f000 fe10 	bl	80013dc <MFX_IO_Write>
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_TS_FIFO_TH, MFXSTM32L152_TS_CLEAR_FIFO);
 80007bc:	4620      	mov	r0, r4
 80007be:	2280      	movs	r2, #128	; 0x80
 80007c0:	21a4      	movs	r1, #164	; 0xa4
 80007c2:	f000 fe0b 	bl	80013dc <MFX_IO_Write>
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_TS_TRACK, 0x00);
 80007c6:	4620      	mov	r0, r4
 80007c8:	2200      	movs	r2, #0
 80007ca:	21a3      	movs	r1, #163	; 0xa3
 80007cc:	f000 fe06 	bl	80013dc <MFX_IO_Write>
  mfxstm32l152_IO_ClearIT(DeviceAddr, 0xFFFFFF);
 80007d0:	4620      	mov	r0, r4
 80007d2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80007d6:	f7ff ff01 	bl	80005dc <mfxstm32l152_IO_ClearIT>
  MFX_IO_Delay(1);
 80007da:	2001      	movs	r0, #1
}
 80007dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MFX_IO_Delay(1);
 80007e0:	f000 be32 	b.w	8001448 <MFX_IO_Delay>

080007e4 <mfxstm32l152_IDD_Start>:
{
 80007e4:	b510      	push	{r4, lr}
 80007e6:	b2c4      	uxtb	r4, r0
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL);
 80007e8:	2180      	movs	r1, #128	; 0x80
 80007ea:	4620      	mov	r0, r4
 80007ec:	f000 fe12 	bl	8001414 <MFX_IO_Read>
  mode |= MFXSTM32L152_IDD_CTRL_REQ;
 80007f0:	f040 0201 	orr.w	r2, r0, #1
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, mode);
 80007f4:	b2d2      	uxtb	r2, r2
 80007f6:	4620      	mov	r0, r4
 80007f8:	2180      	movs	r1, #128	; 0x80
}
 80007fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, mode);
 80007fe:	f000 bded 	b.w	80013dc <MFX_IO_Write>

08000802 <mfxstm32l152_IDD_Config>:
{
 8000802:	b084      	sub	sp, #16
 8000804:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000808:	ac0b      	add	r4, sp, #44	; 0x2c
 800080a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800080e:	b2c4      	uxtb	r4, r0
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 8000810:	2140      	movs	r1, #64	; 0x40
 8000812:	4620      	mov	r0, r4
 8000814:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
 8000818:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 800081c:	f8bd b030 	ldrh.w	fp, [sp, #48]	; 0x30
 8000820:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 8000824:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 8000828:	f8bd 8036 	ldrh.w	r8, [sp, #54]	; 0x36
 800082c:	f8bd 7038 	ldrh.w	r7, [sp, #56]	; 0x38
 8000830:	f000 fdf0 	bl	8001414 <MFX_IO_Read>
  if((mode & MFXSTM32L152_IDD_EN) != MFXSTM32L152_IDD_EN)
 8000834:	0743      	lsls	r3, r0, #29
 8000836:	d406      	bmi.n	8000846 <mfxstm32l152_IDD_Config+0x44>
    mode |= MFXSTM32L152_IDD_EN;
 8000838:	f040 0204 	orr.w	r2, r0, #4
    MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 800083c:	b2d2      	uxtb	r2, r2
 800083e:	2140      	movs	r1, #64	; 0x40
 8000840:	4620      	mov	r0, r4
 8000842:	f000 fdcb 	bl	80013dc <MFX_IO_Write>
  value |= (MfxIddConfig.VrefMeasurement & MFXSTM32L152_IDD_CTRL_VREF_DIS);
 8000846:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
  value |= (MfxIddConfig.Calibration & MFXSTM32L152_IDD_CTRL_CAL_DIS);
 800084a:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
  value |= (MfxIddConfig.VrefMeasurement & MFXSTM32L152_IDD_CTRL_VREF_DIS);
 800084e:	f002 0240 	and.w	r2, r2, #64	; 0x40
  value |= (MfxIddConfig.Calibration & MFXSTM32L152_IDD_CTRL_CAL_DIS);
 8000852:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000856:	431a      	orrs	r2, r3
  value =  ((MfxIddConfig.ShuntNbUsed << 1) & MFXSTM32L152_IDD_CTRL_SHUNT_NB);
 8000858:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	f003 030e 	and.w	r3, r3, #14
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, value);
 8000862:	431a      	orrs	r2, r3
 8000864:	4620      	mov	r0, r4
 8000866:	2180      	movs	r1, #128	; 0x80
 8000868:	f000 fdb8 	bl	80013dc <MFX_IO_Write>
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 800086c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
          (MfxIddConfig.PreDelayValue & MFXSTM32L152_IDD_PREDELAY_VALUE);
 8000870:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8000874:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
          (MfxIddConfig.PreDelayValue & MFXSTM32L152_IDD_PREDELAY_VALUE);
 8000878:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, value);
 800087c:	431a      	orrs	r2, r3
 800087e:	4620      	mov	r0, r4
 8000880:	2181      	movs	r1, #129	; 0x81
 8000882:	f000 fdab 	bl	80013dc <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_MSB, value);
 8000886:	ea4f 221b 	mov.w	r2, fp, lsr #8
 800088a:	4620      	mov	r0, r4
 800088c:	2182      	movs	r1, #130	; 0x82
 800088e:	f000 fda5 	bl	80013dc <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_LSB, value);
 8000892:	fa5f f28b 	uxtb.w	r2, fp
 8000896:	4620      	mov	r0, r4
 8000898:	2183      	movs	r1, #131	; 0x83
 800089a:	f000 fd9f 	bl	80013dc <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_MSB, value);
 800089e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80008a2:	4620      	mov	r0, r4
 80008a4:	2184      	movs	r1, #132	; 0x84
 80008a6:	f000 fd99 	bl	80013dc <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_LSB, value);
 80008aa:	fa5f f28a 	uxtb.w	r2, sl
 80008ae:	4620      	mov	r0, r4
 80008b0:	2185      	movs	r1, #133	; 0x85
 80008b2:	f000 fd93 	bl	80013dc <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_MSB, value);
 80008b6:	ea4f 2219 	mov.w	r2, r9, lsr #8
 80008ba:	4620      	mov	r0, r4
 80008bc:	2186      	movs	r1, #134	; 0x86
 80008be:	f000 fd8d 	bl	80013dc <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_LSB, value);
 80008c2:	fa5f f289 	uxtb.w	r2, r9
 80008c6:	4620      	mov	r0, r4
 80008c8:	2187      	movs	r1, #135	; 0x87
 80008ca:	f000 fd87 	bl	80013dc <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_MSB, value);
 80008ce:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80008d2:	4620      	mov	r0, r4
 80008d4:	2188      	movs	r1, #136	; 0x88
 80008d6:	f000 fd81 	bl	80013dc <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_LSB, value);
 80008da:	fa5f f288 	uxtb.w	r2, r8
 80008de:	4620      	mov	r0, r4
 80008e0:	2189      	movs	r1, #137	; 0x89
 80008e2:	f000 fd7b 	bl	80013dc <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_MSB, value);
 80008e6:	0a3a      	lsrs	r2, r7, #8
 80008e8:	4620      	mov	r0, r4
 80008ea:	218a      	movs	r1, #138	; 0x8a
 80008ec:	f000 fd76 	bl	80013dc <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_LSB, value);
 80008f0:	b2fa      	uxtb	r2, r7
 80008f2:	4620      	mov	r0, r4
 80008f4:	218b      	movs	r1, #139	; 0x8b
 80008f6:	f000 fd71 	bl	80013dc <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH0_STABILIZATION, value);
 80008fa:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 80008fe:	4620      	mov	r0, r4
 8000900:	2190      	movs	r1, #144	; 0x90
 8000902:	f000 fd6b 	bl	80013dc <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH1_STABILIZATION, value);
 8000906:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800090a:	4620      	mov	r0, r4
 800090c:	2191      	movs	r1, #145	; 0x91
 800090e:	f000 fd65 	bl	80013dc <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH2_STABILIZATION, value);
 8000912:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
 8000916:	4620      	mov	r0, r4
 8000918:	2192      	movs	r1, #146	; 0x92
 800091a:	f000 fd5f 	bl	80013dc <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH3_STABILIZATION, value);
 800091e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8000922:	4620      	mov	r0, r4
 8000924:	2193      	movs	r1, #147	; 0x93
 8000926:	f000 fd59 	bl	80013dc <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH4_STABILIZATION, value);
 800092a:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 800092e:	4620      	mov	r0, r4
 8000930:	2194      	movs	r1, #148	; 0x94
 8000932:	f000 fd53 	bl	80013dc <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_MSB, value);
 8000936:	0a32      	lsrs	r2, r6, #8
 8000938:	4620      	mov	r0, r4
 800093a:	218c      	movs	r1, #140	; 0x8c
 800093c:	f000 fd4e 	bl	80013dc <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_LSB, value);
 8000940:	b2f2      	uxtb	r2, r6
 8000942:	4620      	mov	r0, r4
 8000944:	218d      	movs	r1, #141	; 0x8d
 8000946:	f000 fd49 	bl	80013dc <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_MSB, value);
 800094a:	0a2a      	lsrs	r2, r5, #8
 800094c:	4620      	mov	r0, r4
 800094e:	218e      	movs	r1, #142	; 0x8e
 8000950:	f000 fd44 	bl	80013dc <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_LSB, value);
 8000954:	b2ea      	uxtb	r2, r5
 8000956:	4620      	mov	r0, r4
 8000958:	218f      	movs	r1, #143	; 0x8f
 800095a:	f000 fd3f 	bl	80013dc <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_NBR_OF_MEAS, value);
 800095e:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
 8000962:	4620      	mov	r0, r4
 8000964:	2196      	movs	r1, #150	; 0x96
 8000966:	f000 fd39 	bl	80013dc <MFX_IO_Write>
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 800096a:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
          (MfxIddConfig.DeltaDelayValue & MFXSTM32L152_IDD_DELTADELAY_VALUE);
 800096e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8000972:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
          (MfxIddConfig.DeltaDelayValue & MFXSTM32L152_IDD_DELTADELAY_VALUE);
 8000976:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, value);
 800097a:	431a      	orrs	r2, r3
 800097c:	4620      	mov	r0, r4
 800097e:	2197      	movs	r1, #151	; 0x97
 8000980:	f000 fd2c 	bl	80013dc <MFX_IO_Write>
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNTS_ON_BOARD, value);
 8000984:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8000988:	4620      	mov	r0, r4
}
 800098a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNTS_ON_BOARD, value);
 800098e:	2198      	movs	r1, #152	; 0x98
}
 8000990:	b004      	add	sp, #16
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNTS_ON_BOARD, value);
 8000992:	f000 bd23 	b.w	80013dc <MFX_IO_Write>

08000996 <mfxstm32l152_Error_ReadSrc>:
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_SRC));
 8000996:	2103      	movs	r1, #3
 8000998:	b2c0      	uxtb	r0, r0
 800099a:	f000 bd3b 	b.w	8001414 <MFX_IO_Read>

0800099e <mfxstm32l152_Error_ReadMsg>:
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_MSG));
 800099e:	2104      	movs	r1, #4
 80009a0:	b2c0      	uxtb	r0, r0
 80009a2:	f000 bd37 	b.w	8001414 <MFX_IO_Read>

080009a6 <mfxstm32l152_TS_GetXY>:
{
 80009a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  MFX_IO_ReadMultiple(DeviceAddr, MFXSTM32L152_TS_XY_DATA, data_xy, sizeof(data_xy)) ;
 80009a8:	2303      	movs	r3, #3
{
 80009aa:	460e      	mov	r6, r1
 80009ac:	4615      	mov	r5, r2
  MFX_IO_ReadMultiple(DeviceAddr, MFXSTM32L152_TS_XY_DATA, data_xy, sizeof(data_xy)) ;
 80009ae:	2124      	movs	r1, #36	; 0x24
 80009b0:	aa01      	add	r2, sp, #4
{
 80009b2:	4604      	mov	r4, r0
  MFX_IO_ReadMultiple(DeviceAddr, MFXSTM32L152_TS_XY_DATA, data_xy, sizeof(data_xy)) ;
 80009b4:	f000 fd30 	bl	8001418 <MFX_IO_ReadMultiple>
  *X = (data_xy[1]<<4) + (data_xy[0]>>4); 
 80009b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80009bc:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80009c0:	091a      	lsrs	r2, r3, #4
 80009c2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80009c6:	8032      	strh	r2, [r6, #0]
  *Y = (data_xy[2]<<4) + (data_xy[0]&4); 
 80009c8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80009cc:	f003 0304 	and.w	r3, r3, #4
 80009d0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80009d4:	802b      	strh	r3, [r5, #0]
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_TS_FIFO_TH, MFXSTM32L152_TS_CLEAR_FIFO);
 80009d6:	2280      	movs	r2, #128	; 0x80
 80009d8:	21a4      	movs	r1, #164	; 0xa4
 80009da:	4620      	mov	r0, r4
 80009dc:	f000 fcfe 	bl	80013dc <MFX_IO_Write>
}
 80009e0:	b002      	add	sp, #8
 80009e2:	bd70      	pop	{r4, r5, r6, pc}

080009e4 <mfxstm32l152_IDD_GetValue>:
{
 80009e4:	b513      	push	{r0, r1, r4, lr}
  MFX_IO_ReadMultiple((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VALUE_MSB, data, sizeof(data)) ;
 80009e6:	2303      	movs	r3, #3
{
 80009e8:	460c      	mov	r4, r1
  MFX_IO_ReadMultiple((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VALUE_MSB, data, sizeof(data)) ;
 80009ea:	aa01      	add	r2, sp, #4
 80009ec:	2114      	movs	r1, #20
 80009ee:	b2c0      	uxtb	r0, r0
 80009f0:	f000 fd12 	bl	8001418 <MFX_IO_ReadMultiple>
  *ReadValue = (data[0] << 16) | (data[1] << 8) | data[2];
 80009f4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80009f8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80009fc:	021b      	lsls	r3, r3, #8
 80009fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a02:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	6023      	str	r3, [r4, #0]
}
 8000a0a:	b002      	add	sp, #8
 8000a0c:	bd10      	pop	{r4, pc}

08000a0e <mfxstm32l152_IO_WritePin>:
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1);
 8000a0e:	2301      	movs	r3, #1
  if (PinState != 0)
 8000a10:	b11a      	cbz	r2, 8000a1a <mfxstm32l152_IO_WritePin+0xc>
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1);
 8000a12:	460a      	mov	r2, r1
 8000a14:	216c      	movs	r1, #108	; 0x6c
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
 8000a16:	f7ff be35 	b.w	8000684 <mfxstm32l152_reg24_setPinValue>
 8000a1a:	460a      	mov	r2, r1
 8000a1c:	2170      	movs	r1, #112	; 0x70
 8000a1e:	e7fa      	b.n	8000a16 <mfxstm32l152_IO_WritePin+0x8>

08000a20 <mfxstm32l152_TS_DetectTouch>:
{
 8000a20:	b510      	push	{r4, lr}
  state = MFX_IO_Read(DeviceAddr, MFXSTM32L152_TS_FIFO_STA);
 8000a22:	2120      	movs	r1, #32
{
 8000a24:	4604      	mov	r4, r0
  state = MFX_IO_Read(DeviceAddr, MFXSTM32L152_TS_FIFO_STA);
 8000a26:	f000 fcf5 	bl	8001414 <MFX_IO_Read>
  if(state > 0)
 8000a2a:	f010 0008 	ands.w	r0, r0, #8
 8000a2e:	d006      	beq.n	8000a3e <mfxstm32l152_TS_DetectTouch+0x1e>
    if(MFX_IO_Read(DeviceAddr, MFXSTM32L152_TS_FIFO_LEVEL) > 0)
 8000a30:	2121      	movs	r1, #33	; 0x21
 8000a32:	4620      	mov	r0, r4
 8000a34:	f000 fcee 	bl	8001414 <MFX_IO_Read>
  uint8_t ret = 0;
 8000a38:	3000      	adds	r0, #0
 8000a3a:	bf18      	it	ne
 8000a3c:	2001      	movne	r0, #1
}
 8000a3e:	bd10      	pop	{r4, pc}

08000a40 <mfxstm32l152_WakeUp>:
{
 8000a40:	b508      	push	{r3, lr}
    if(mfxstm32l152[idx] == DeviceAddr)
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <mfxstm32l152_WakeUp+0x24>)
 8000a44:	781a      	ldrb	r2, [r3, #0]
 8000a46:	4282      	cmp	r2, r0
 8000a48:	d007      	beq.n	8000a5a <mfxstm32l152_WakeUp+0x1a>
 8000a4a:	785a      	ldrb	r2, [r3, #1]
 8000a4c:	4282      	cmp	r2, r0
 8000a4e:	d004      	beq.n	8000a5a <mfxstm32l152_WakeUp+0x1a>
 8000a50:	789b      	ldrb	r3, [r3, #2]
 8000a52:	4283      	cmp	r3, r0
 8000a54:	d001      	beq.n	8000a5a <mfxstm32l152_WakeUp+0x1a>
    MFX_IO_EnableWakeupPin();
 8000a56:	f000 fc8f 	bl	8001378 <MFX_IO_EnableWakeupPin>
}
 8000a5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MFX_IO_Wakeup();
 8000a5e:	f000 bca9 	b.w	80013b4 <MFX_IO_Wakeup>
 8000a62:	bf00      	nop
 8000a64:	20000374 	.word	0x20000374

08000a68 <mfxstm32l152_EnableITSource>:
{
 8000a68:	b538      	push	{r3, r4, r5, lr}
 8000a6a:	460c      	mov	r4, r1
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 8000a6c:	2142      	movs	r1, #66	; 0x42
{
 8000a6e:	4605      	mov	r5, r0
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 8000a70:	f000 fcd0 	bl	8001414 <MFX_IO_Read>
  tmp |= Source; 
 8000a74:	ea40 0204 	orr.w	r2, r0, r4
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 8000a78:	b2d2      	uxtb	r2, r2
 8000a7a:	4628      	mov	r0, r5
 8000a7c:	2142      	movs	r1, #66	; 0x42
}
 8000a7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 8000a82:	f000 bcab 	b.w	80013dc <MFX_IO_Write>

08000a86 <mfxstm32l152_IO_EnableIT>:
{ 
 8000a86:	b510      	push	{r4, lr}
 8000a88:	4604      	mov	r4, r0
  MFX_IO_ITConfig();
 8000a8a:	f000 fc4d 	bl	8001328 <MFX_IO_ITConfig>
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 8000a8e:	4620      	mov	r0, r4
 8000a90:	2101      	movs	r1, #1
}
 8000a92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 8000a96:	f7ff bfe7 	b.w	8000a68 <mfxstm32l152_EnableITSource>

08000a9a <mfxstm32l152_TS_EnableIT>:
{
 8000a9a:	b510      	push	{r4, lr}
 8000a9c:	4604      	mov	r4, r0
  MFX_IO_ITConfig();
 8000a9e:	f000 fc43 	bl	8001328 <MFX_IO_ITConfig>
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_TS_DET);
 8000aa2:	4620      	mov	r0, r4
 8000aa4:	2108      	movs	r1, #8
}
 8000aa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_TS_DET);
 8000aaa:	f7ff bfdd 	b.w	8000a68 <mfxstm32l152_EnableITSource>

08000aae <mfxstm32l152_IDD_EnableIT>:
{
 8000aae:	b510      	push	{r4, lr}
 8000ab0:	4604      	mov	r4, r0
  MFX_IO_ITConfig();
 8000ab2:	f000 fc39 	bl	8001328 <MFX_IO_ITConfig>
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8000ab6:	4620      	mov	r0, r4
 8000ab8:	2102      	movs	r1, #2
}
 8000aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8000abe:	f7ff bfd3 	b.w	8000a68 <mfxstm32l152_EnableITSource>

08000ac2 <mfxstm32l152_Error_EnableIT>:
{
 8000ac2:	b510      	push	{r4, lr}
 8000ac4:	4604      	mov	r4, r0
  MFX_IO_ITConfig();
 8000ac6:	f000 fc2f 	bl	8001328 <MFX_IO_ITConfig>
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8000aca:	4620      	mov	r0, r4
 8000acc:	2104      	movs	r1, #4
}
 8000ace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8000ad2:	f7ff bfc9 	b.w	8000a68 <mfxstm32l152_EnableITSource>

08000ad6 <mfxstm32l152_DisableITSource>:
{
 8000ad6:	b538      	push	{r3, r4, r5, lr}
 8000ad8:	460c      	mov	r4, r1
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 8000ada:	2142      	movs	r1, #66	; 0x42
{
 8000adc:	4605      	mov	r5, r0
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 8000ade:	f000 fc99 	bl	8001414 <MFX_IO_Read>
  tmp &= ~Source; 
 8000ae2:	ea20 0204 	bic.w	r2, r0, r4
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 8000ae6:	b2d2      	uxtb	r2, r2
 8000ae8:	4628      	mov	r0, r5
 8000aea:	2142      	movs	r1, #66	; 0x42
}
 8000aec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 8000af0:	f000 bc74 	b.w	80013dc <MFX_IO_Write>

08000af4 <mfxstm32l152_IO_DisableIT>:
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);    
 8000af4:	2101      	movs	r1, #1
 8000af6:	f7ff bfee 	b.w	8000ad6 <mfxstm32l152_DisableITSource>

08000afa <mfxstm32l152_TS_DisableIT>:
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_TS_DET);    
 8000afa:	2108      	movs	r1, #8
 8000afc:	f7ff bfeb 	b.w	8000ad6 <mfxstm32l152_DisableITSource>

08000b00 <mfxstm32l152_IDD_DisableIT>:
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8000b00:	2102      	movs	r1, #2
 8000b02:	f7ff bfe8 	b.w	8000ad6 <mfxstm32l152_DisableITSource>

08000b06 <mfxstm32l152_Error_DisableIT>:
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8000b06:	2104      	movs	r1, #4
 8000b08:	f7ff bfe5 	b.w	8000ad6 <mfxstm32l152_DisableITSource>

08000b0c <mfxstm32l152_GlobalITStatus>:
{
 8000b0c:	b510      	push	{r4, lr}
 8000b0e:	460c      	mov	r4, r1
  return((MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_PENDING) & Source));
 8000b10:	2108      	movs	r1, #8
 8000b12:	f000 fc7f 	bl	8001414 <MFX_IO_Read>
}
 8000b16:	4020      	ands	r0, r4
 8000b18:	bd10      	pop	{r4, pc}

08000b1a <mfxstm32l152_TS_ITStatus>:
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_TS));
 8000b1a:	21f8      	movs	r1, #248	; 0xf8
 8000b1c:	f7ff bff6 	b.w	8000b0c <mfxstm32l152_GlobalITStatus>

08000b20 <mfxstm32l152_IDD_GetITStatus>:
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_IDD));
 8000b20:	2102      	movs	r1, #2
 8000b22:	f7ff bff3 	b.w	8000b0c <mfxstm32l152_GlobalITStatus>

08000b26 <mfxstm32l152_Error_GetITStatus>:
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_ERROR));
 8000b26:	2104      	movs	r1, #4
 8000b28:	f7ff bff0 	b.w	8000b0c <mfxstm32l152_GlobalITStatus>

08000b2c <mfxstm32l152_ClearGlobalIT>:
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_ACK, Source);
 8000b2c:	460a      	mov	r2, r1
 8000b2e:	2144      	movs	r1, #68	; 0x44
 8000b30:	f000 bc54 	b.w	80013dc <MFX_IO_Write>

08000b34 <mfxstm32l152_TS_ClearIT>:
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_TS);
 8000b34:	21f8      	movs	r1, #248	; 0xf8
 8000b36:	f7ff bff9 	b.w	8000b2c <mfxstm32l152_ClearGlobalIT>

08000b3a <mfxstm32l152_IDD_ClearIT>:
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8000b3a:	2102      	movs	r1, #2
 8000b3c:	f7ff bff6 	b.w	8000b2c <mfxstm32l152_ClearGlobalIT>

08000b40 <mfxstm32l152_Error_ClearIT>:
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8000b40:	2104      	movs	r1, #4
 8000b42:	f7ff bff3 	b.w	8000b2c <mfxstm32l152_ClearGlobalIT>

08000b46 <mfxstm32l152_SetIrqOutPinPolarity>:
{
 8000b46:	b538      	push	{r3, r4, r5, lr}
 8000b48:	460d      	mov	r5, r1
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 8000b4a:	2141      	movs	r1, #65	; 0x41
{
 8000b4c:	4604      	mov	r4, r0
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 8000b4e:	f000 fc61 	bl	8001414 <MFX_IO_Read>
  tmp &= ~(uint8_t)0x02;
 8000b52:	f000 02fd 	and.w	r2, r0, #253	; 0xfd
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 8000b56:	432a      	orrs	r2, r5
 8000b58:	4620      	mov	r0, r4
 8000b5a:	2141      	movs	r1, #65	; 0x41
 8000b5c:	f000 fc3e 	bl	80013dc <MFX_IO_Write>
  MFX_IO_Delay(1);
 8000b60:	2001      	movs	r0, #1
}
 8000b62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  MFX_IO_Delay(1);
 8000b66:	f000 bc6f 	b.w	8001448 <MFX_IO_Delay>

08000b6a <mfxstm32l152_SetIrqOutPinType>:
{
 8000b6a:	b538      	push	{r3, r4, r5, lr}
 8000b6c:	460d      	mov	r5, r1
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 8000b6e:	2141      	movs	r1, #65	; 0x41
{
 8000b70:	4604      	mov	r4, r0
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 8000b72:	f000 fc4f 	bl	8001414 <MFX_IO_Read>
  tmp &= ~(uint8_t)0x01;
 8000b76:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 8000b7a:	432a      	orrs	r2, r5
 8000b7c:	4620      	mov	r0, r4
 8000b7e:	2141      	movs	r1, #65	; 0x41
 8000b80:	f000 fc2c 	bl	80013dc <MFX_IO_Write>
  MFX_IO_Delay(1);
 8000b84:	2001      	movs	r0, #1
}
 8000b86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  MFX_IO_Delay(1);
 8000b8a:	f000 bc5d 	b.w	8001448 <MFX_IO_Delay>
	...

08000b90 <mfxstm32l152_Init>:
{
 8000b90:	b510      	push	{r4, lr}
    if(mfxstm32l152[idx] == DeviceAddr)
 8000b92:	4a0f      	ldr	r2, [pc, #60]	; (8000bd0 <mfxstm32l152_Init+0x40>)
 8000b94:	7813      	ldrb	r3, [r2, #0]
 8000b96:	4298      	cmp	r0, r3
{
 8000b98:	4604      	mov	r4, r0
    if(mfxstm32l152[idx] == DeviceAddr)
 8000b9a:	d008      	beq.n	8000bae <mfxstm32l152_Init+0x1e>
 8000b9c:	7850      	ldrb	r0, [r2, #1]
 8000b9e:	4284      	cmp	r4, r0
 8000ba0:	d005      	beq.n	8000bae <mfxstm32l152_Init+0x1e>
 8000ba2:	7891      	ldrb	r1, [r2, #2]
 8000ba4:	428c      	cmp	r4, r1
 8000ba6:	d002      	beq.n	8000bae <mfxstm32l152_Init+0x1e>
 8000ba8:	b163      	cbz	r3, 8000bc4 <mfxstm32l152_Init+0x34>
 8000baa:	b150      	cbz	r0, 8000bc2 <mfxstm32l152_Init+0x32>
 8000bac:	b171      	cbz	r1, 8000bcc <mfxstm32l152_Init+0x3c>
  mfxstm32l152_SetIrqOutPinPolarity(DeviceAddr, MFXSTM32L152_OUT_PIN_POLARITY_HIGH);
 8000bae:	4620      	mov	r0, r4
 8000bb0:	2102      	movs	r1, #2
 8000bb2:	f7ff ffc8 	bl	8000b46 <mfxstm32l152_SetIrqOutPinPolarity>
  mfxstm32l152_SetIrqOutPinType(DeviceAddr, MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL);
 8000bb6:	4620      	mov	r0, r4
 8000bb8:	2101      	movs	r1, #1
}
 8000bba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  mfxstm32l152_SetIrqOutPinType(DeviceAddr, MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL);
 8000bbe:	f7ff bfd4 	b.w	8000b6a <mfxstm32l152_SetIrqOutPinType>
    if(mfxstm32l152[idx] == DeviceAddr)
 8000bc2:	2301      	movs	r3, #1
      mfxstm32l152[empty] = DeviceAddr;
 8000bc4:	54d4      	strb	r4, [r2, r3]
      MFX_IO_Init();
 8000bc6:	f000 fb67 	bl	8001298 <MFX_IO_Init>
 8000bca:	e7f0      	b.n	8000bae <mfxstm32l152_Init+0x1e>
    if(mfxstm32l152[idx] == DeviceAddr)
 8000bcc:	2302      	movs	r3, #2
 8000bce:	e7f9      	b.n	8000bc4 <mfxstm32l152_Init+0x34>
 8000bd0:	20000374 	.word	0x20000374

08000bd4 <mfxstm32l152_IO_InitPin>:
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_DIR1, IO_Pin, Direction);
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	460a      	mov	r2, r1
 8000bd8:	2160      	movs	r1, #96	; 0x60
 8000bda:	f7ff bd53 	b.w	8000684 <mfxstm32l152_reg24_setPinValue>

08000bde <mfxstm32l152_IO_SetIrqEvtMode>:
{
 8000bde:	b508      	push	{r3, lr}
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_EVT1, IO_Pin, Evt);
 8000be0:	4613      	mov	r3, r2
 8000be2:	460a      	mov	r2, r1
 8000be4:	214c      	movs	r1, #76	; 0x4c
 8000be6:	f7ff fd4d 	bl	8000684 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 8000bea:	2001      	movs	r0, #1
}
 8000bec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MFX_IO_Delay(1);
 8000bf0:	f000 bc2a 	b.w	8001448 <MFX_IO_Delay>

08000bf4 <mfxstm32l152_IO_SetIrqTypeMode>:
{
 8000bf4:	b508      	push	{r3, lr}
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_TYPE1, IO_Pin, Type);
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	460a      	mov	r2, r1
 8000bfa:	2150      	movs	r1, #80	; 0x50
 8000bfc:	f7ff fd42 	bl	8000684 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 8000c00:	2001      	movs	r0, #1
}
 8000c02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MFX_IO_Delay(1);
 8000c06:	f000 bc1f 	b.w	8001448 <MFX_IO_Delay>

08000c0a <mfxstm32l152_IO_EnablePinIT>:
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 1);
 8000c0a:	460a      	mov	r2, r1
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	2148      	movs	r1, #72	; 0x48
 8000c10:	f7ff bd38 	b.w	8000684 <mfxstm32l152_reg24_setPinValue>

08000c14 <mfxstm32l152_IO_DisablePinIT>:
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 0);
 8000c14:	460a      	mov	r2, r1
 8000c16:	2300      	movs	r3, #0
 8000c18:	2148      	movs	r1, #72	; 0x48
 8000c1a:	f7ff bd33 	b.w	8000684 <mfxstm32l152_reg24_setPinValue>

08000c1e <mfxstm32l152_IO_Config>:
{
 8000c1e:	b538      	push	{r3, r4, r5, lr}
 8000c20:	4604      	mov	r4, r0
 8000c22:	460d      	mov	r5, r1
  switch(IO_Mode)
 8000c24:	2a17      	cmp	r2, #23
 8000c26:	f200 8126 	bhi.w	8000e76 <mfxstm32l152_IO_Config+0x258>
 8000c2a:	e8df f012 	tbh	[pc, r2, lsl #1]
 8000c2e:	0021      	.short	0x0021
 8000c30:	005e004e 	.word	0x005e004e
 8000c34:	00ca0090 	.word	0x00ca0090
 8000c38:	001800f7 	.word	0x001800f7
 8000c3c:	00300018 	.word	0x00300018
 8000c40:	01240039 	.word	0x01240039
 8000c44:	0056005a 	.word	0x0056005a
 8000c48:	00520124 	.word	0x00520124
 8000c4c:	0078004e 	.word	0x0078004e
 8000c50:	00b20081 	.word	0x00b20081
 8000c54:	00df00bb 	.word	0x00df00bb
 8000c58:	010c00e8 	.word	0x010c00e8
 8000c5c:	0115      	.short	0x0115
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000c5e:	f7ff ffd9 	bl	8000c14 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000c62:	2200      	movs	r2, #0
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8000c64:	4629      	mov	r1, r5
 8000c66:	4620      	mov	r0, r4
 8000c68:	f7ff ffb4 	bl	8000bd4 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	e01f      	b.n	8000cb0 <mfxstm32l152_IO_Config+0x92>
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000c70:	f7ff ffd0 	bl	8000c14 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000c74:	2200      	movs	r2, #0
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8000c76:	4629      	mov	r1, r5
 8000c78:	4620      	mov	r0, r4
 8000c7a:	f7ff ffab 	bl	8000bd4 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 8000c7e:	2300      	movs	r3, #0
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 8000c80:	462a      	mov	r2, r5
 8000c82:	2164      	movs	r1, #100	; 0x64
 8000c84:	4620      	mov	r0, r4
 8000c86:	f7ff fcfd 	bl	8000684 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e016      	b.n	8000cbc <mfxstm32l152_IO_Config+0x9e>
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000c8e:	f7ff ffc1 	bl	8000c14 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000c92:	2200      	movs	r2, #0
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8000c94:	4629      	mov	r1, r5
 8000c96:	4620      	mov	r0, r4
 8000c98:	f7ff ff9c 	bl	8000bd4 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	e7ef      	b.n	8000c80 <mfxstm32l152_IO_Config+0x62>
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000ca0:	f7ff ffb8 	bl	8000c14 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	4629      	mov	r1, r5
 8000ca8:	4620      	mov	r0, r4
 8000caa:	f7ff ff93 	bl	8000bd4 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000cae:	2301      	movs	r3, #1
 8000cb0:	462a      	mov	r2, r5
 8000cb2:	2164      	movs	r1, #100	; 0x64
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f7ff fce5 	bl	8000684 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000cba:	2300      	movs	r3, #0
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000cbc:	462a      	mov	r2, r5
 8000cbe:	2168      	movs	r1, #104	; 0x68
 8000cc0:	4620      	mov	r0, r4
 8000cc2:	f7ff fcdf 	bl	8000684 <mfxstm32l152_reg24_setPinValue>
  uint8_t error_code = 0;
 8000cc6:	2000      	movs	r0, #0
    break;    
 8000cc8:	bd38      	pop	{r3, r4, r5, pc}
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000cca:	f7ff ffa3 	bl	8000c14 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8000cce:	2201      	movs	r2, #1
 8000cd0:	e7c8      	b.n	8000c64 <mfxstm32l152_IO_Config+0x46>
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000cd2:	f7ff ff9f 	bl	8000c14 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	e7cd      	b.n	8000c76 <mfxstm32l152_IO_Config+0x58>
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000cda:	f7ff ff9b 	bl	8000c14 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8000cde:	2201      	movs	r2, #1
 8000ce0:	e7e1      	b.n	8000ca6 <mfxstm32l152_IO_Config+0x88>
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000ce2:	f7ff ff97 	bl	8000c14 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	e7d4      	b.n	8000c94 <mfxstm32l152_IO_Config+0x76>
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000cea:	f7ff fecc 	bl	8000a86 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN); 
 8000cee:	2200      	movs	r2, #0
 8000cf0:	4629      	mov	r1, r5
 8000cf2:	4620      	mov	r0, r4
 8000cf4:	f7ff ff6e 	bl	8000bd4 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8000cf8:	2300      	movs	r3, #0
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000cfa:	462a      	mov	r2, r5
 8000cfc:	2164      	movs	r1, #100	; 0x64
 8000cfe:	4620      	mov	r0, r4
 8000d00:	f7ff fcc0 	bl	8000684 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000d04:	2301      	movs	r3, #1
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000d06:	462a      	mov	r2, r5
 8000d08:	2168      	movs	r1, #104	; 0x68
 8000d0a:	4620      	mov	r0, r4
 8000d0c:	f7ff fcba 	bl	8000684 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);      
 8000d10:	2201      	movs	r2, #1
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8000d12:	4629      	mov	r1, r5
 8000d14:	4620      	mov	r0, r4
 8000d16:	f7ff ff62 	bl	8000bde <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);  
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	e030      	b.n	8000d80 <mfxstm32l152_IO_Config+0x162>
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000d1e:	f7ff feb2 	bl	8000a86 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000d22:	2200      	movs	r2, #0
 8000d24:	4629      	mov	r1, r5
 8000d26:	4620      	mov	r0, r4
 8000d28:	f7ff ff54 	bl	8000bd4 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e7e4      	b.n	8000cfa <mfxstm32l152_IO_Config+0xdc>
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000d30:	f7ff fea9 	bl	8000a86 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000d34:	2200      	movs	r2, #0
 8000d36:	4629      	mov	r1, r5
 8000d38:	4620      	mov	r0, r4
 8000d3a:	f7ff ff4b 	bl	8000bd4 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000d3e:	2301      	movs	r3, #1
 8000d40:	462a      	mov	r2, r5
 8000d42:	2164      	movs	r1, #100	; 0x64
 8000d44:	4620      	mov	r0, r4
 8000d46:	f7ff fc9d 	bl	8000684 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e7db      	b.n	8000d06 <mfxstm32l152_IO_Config+0xe8>
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000d4e:	f7ff fe9a 	bl	8000a86 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000d52:	2200      	movs	r2, #0
 8000d54:	4629      	mov	r1, r5
 8000d56:	4620      	mov	r0, r4
 8000d58:	f7ff ff3c 	bl	8000bd4 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8000d5c:	2300      	movs	r3, #0
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000d5e:	462a      	mov	r2, r5
 8000d60:	2164      	movs	r1, #100	; 0x64
 8000d62:	4620      	mov	r0, r4
 8000d64:	f7ff fc8e 	bl	8000684 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000d68:	2301      	movs	r3, #1
 8000d6a:	462a      	mov	r2, r5
 8000d6c:	2168      	movs	r1, #104	; 0x68
 8000d6e:	4620      	mov	r0, r4
 8000d70:	f7ff fc88 	bl	8000684 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8000d74:	2201      	movs	r2, #1
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8000d76:	4629      	mov	r1, r5
 8000d78:	4620      	mov	r0, r4
 8000d7a:	f7ff ff30 	bl	8000bde <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);      
 8000d7e:	2200      	movs	r2, #0
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);  
 8000d80:	4629      	mov	r1, r5
 8000d82:	4620      	mov	r0, r4
 8000d84:	f7ff ff36 	bl	8000bf4 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000d88:	4629      	mov	r1, r5
 8000d8a:	4620      	mov	r0, r4
 8000d8c:	f7ff ff3d 	bl	8000c0a <mfxstm32l152_IO_EnablePinIT>
 8000d90:	e799      	b.n	8000cc6 <mfxstm32l152_IO_Config+0xa8>
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000d92:	f7ff fe78 	bl	8000a86 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000d96:	2200      	movs	r2, #0
 8000d98:	4629      	mov	r1, r5
 8000d9a:	4620      	mov	r0, r4
 8000d9c:	f7ff ff1a 	bl	8000bd4 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000da0:	2301      	movs	r3, #1
 8000da2:	e7dc      	b.n	8000d5e <mfxstm32l152_IO_Config+0x140>
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000da4:	f7ff fe6f 	bl	8000a86 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN); 
 8000da8:	2200      	movs	r2, #0
 8000daa:	4629      	mov	r1, r5
 8000dac:	4620      	mov	r0, r4
 8000dae:	f7ff ff11 	bl	8000bd4 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000db2:	2301      	movs	r3, #1
 8000db4:	462a      	mov	r2, r5
 8000db6:	2164      	movs	r1, #100	; 0x64
 8000db8:	4620      	mov	r0, r4
 8000dba:	f7ff fc63 	bl	8000684 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e7d3      	b.n	8000d6a <mfxstm32l152_IO_Config+0x14c>
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000dc2:	f7ff fe60 	bl	8000a86 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN); 
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	4629      	mov	r1, r5
 8000dca:	4620      	mov	r0, r4
 8000dcc:	f7ff ff02 	bl	8000bd4 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8000dd0:	2300      	movs	r3, #0
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000dd2:	462a      	mov	r2, r5
 8000dd4:	2164      	movs	r1, #100	; 0x64
 8000dd6:	4620      	mov	r0, r4
 8000dd8:	f7ff fc54 	bl	8000684 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000ddc:	2301      	movs	r3, #1
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000dde:	462a      	mov	r2, r5
 8000de0:	2168      	movs	r1, #104	; 0x68
 8000de2:	4620      	mov	r0, r4
 8000de4:	f7ff fc4e 	bl	8000684 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8000de8:	2200      	movs	r2, #0
 8000dea:	e7c4      	b.n	8000d76 <mfxstm32l152_IO_Config+0x158>
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000dec:	f7ff fe4b 	bl	8000a86 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000df0:	2200      	movs	r2, #0
 8000df2:	4629      	mov	r1, r5
 8000df4:	4620      	mov	r0, r4
 8000df6:	f7ff feed 	bl	8000bd4 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e7e9      	b.n	8000dd2 <mfxstm32l152_IO_Config+0x1b4>
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000dfe:	f7ff fe42 	bl	8000a86 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000e02:	2200      	movs	r2, #0
 8000e04:	4629      	mov	r1, r5
 8000e06:	4620      	mov	r0, r4
 8000e08:	f7ff fee4 	bl	8000bd4 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	462a      	mov	r2, r5
 8000e10:	2164      	movs	r1, #100	; 0x64
 8000e12:	4620      	mov	r0, r4
 8000e14:	f7ff fc36 	bl	8000684 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000e18:	2300      	movs	r3, #0
 8000e1a:	e7e0      	b.n	8000dde <mfxstm32l152_IO_Config+0x1c0>
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000e1c:	f7ff fe33 	bl	8000a86 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN); 
 8000e20:	2200      	movs	r2, #0
 8000e22:	4629      	mov	r1, r5
 8000e24:	4620      	mov	r0, r4
 8000e26:	f7ff fed5 	bl	8000bd4 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8000e2a:	2300      	movs	r3, #0
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000e2c:	462a      	mov	r2, r5
 8000e2e:	2164      	movs	r1, #100	; 0x64
 8000e30:	4620      	mov	r0, r4
 8000e32:	f7ff fc27 	bl	8000684 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000e36:	2301      	movs	r3, #1
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000e38:	462a      	mov	r2, r5
 8000e3a:	2168      	movs	r1, #104	; 0x68
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	f7ff fc21 	bl	8000684 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8000e42:	2200      	movs	r2, #0
 8000e44:	e765      	b.n	8000d12 <mfxstm32l152_IO_Config+0xf4>
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000e46:	f7ff fe1e 	bl	8000a86 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	4629      	mov	r1, r5
 8000e4e:	4620      	mov	r0, r4
 8000e50:	f7ff fec0 	bl	8000bd4 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000e54:	2301      	movs	r3, #1
 8000e56:	e7e9      	b.n	8000e2c <mfxstm32l152_IO_Config+0x20e>
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000e58:	f7ff fe15 	bl	8000a86 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	4629      	mov	r1, r5
 8000e60:	4620      	mov	r0, r4
 8000e62:	f7ff feb7 	bl	8000bd4 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000e66:	2301      	movs	r3, #1
 8000e68:	462a      	mov	r2, r5
 8000e6a:	2164      	movs	r1, #100	; 0x64
 8000e6c:	4620      	mov	r0, r4
 8000e6e:	f7ff fc09 	bl	8000684 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000e72:	2300      	movs	r3, #0
 8000e74:	e7e0      	b.n	8000e38 <mfxstm32l152_IO_Config+0x21a>
  switch(IO_Mode)
 8000e76:	4610      	mov	r0, r2
}
 8000e78:	bd38      	pop	{r3, r4, r5, pc}

08000e7a <BSP_ErrorHandler>:
/**
  * @}
  */

__weak void BSP_ErrorHandler(void)
{
 8000e7a:	e7fe      	b.n	8000e7a <BSP_ErrorHandler>

08000e7c <BSP_LED_Init>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000e7c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef  GPIO_InitStructure;

  if (Led == LED2)
 8000e7e:	2801      	cmp	r0, #1
{
 8000e80:	b086      	sub	sp, #24
 8000e82:	4604      	mov	r4, r0
  if (Led == LED2)
 8000e84:	d11d      	bne.n	8000ec2 <BSP_LED_Init+0x46>
  {
    /* Enable the GPIO_LED clock */
    LED2_GPIO_CLK_ENABLE();
 8000e86:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <BSP_LED_Init+0x6c>)
 8000e88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e8a:	f042 0202 	orr.w	r2, r2, #2
 8000e8e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

    /* Configure the GPIO_LED pin */
    GPIO_InitStructure.Pin = LED_PIN[Led];
    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000e92:	9002      	str	r0, [sp, #8]
    LED2_GPIO_CLK_ENABLE();
 8000e94:	f003 0302 	and.w	r3, r3, #2
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

    HAL_GPIO_Init(LED2_GPIO_PORT, &GPIO_InitStructure);
 8000e9c:	4813      	ldr	r0, [pc, #76]	; (8000eec <BSP_LED_Init+0x70>)
    GPIO_InitStructure.Pin = LED_PIN[Led];
 8000e9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ea2:	9301      	str	r3, [sp, #4]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(LED2_GPIO_PORT, &GPIO_InitStructure);
 8000ea8:	a901      	add	r1, sp, #4
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(LED2_GPIO_PORT, &GPIO_InitStructure);
 8000eae:	f000 fc0b 	bl	80016c8 <HAL_GPIO_Init>
    /* By default, turn off LED */
    HAL_GPIO_WritePin(LED2_GPIO_PORT, GPIO_InitStructure.Pin, GPIO_PIN_SET);
 8000eb2:	4622      	mov	r2, r4
 8000eb4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8000eb8:	480c      	ldr	r0, [pc, #48]	; (8000eec <BSP_LED_Init+0x70>)
 8000eba:	f000 fd75 	bl	80019a8 <HAL_GPIO_WritePin>

    /* By default, turn off LED */
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
  }

}
 8000ebe:	b006      	add	sp, #24
 8000ec0:	bd10      	pop	{r4, pc}
    if (BSP_IO_Init() == IO_ERROR)
 8000ec2:	f000 fac3 	bl	800144c <BSP_IO_Init>
 8000ec6:	2801      	cmp	r0, #1
 8000ec8:	d101      	bne.n	8000ece <BSP_LED_Init+0x52>
      BSP_ErrorHandler();
 8000eca:	f7ff ffd6 	bl	8000e7a <BSP_ErrorHandler>
    BSP_IO_ConfigPin(LED_PIN[Led], IO_MODE_OUTPUT);
 8000ece:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <BSP_LED_Init+0x74>)
 8000ed0:	f833 4014 	ldrh.w	r4, [r3, r4, lsl #1]
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	4620      	mov	r0, r4
 8000ed8:	f000 fae4 	bl	80014a4 <BSP_IO_ConfigPin>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
 8000edc:	2101      	movs	r1, #1
 8000ede:	4620      	mov	r0, r4
 8000ee0:	f000 faf0 	bl	80014c4 <BSP_IO_WritePin>
}
 8000ee4:	e7eb      	b.n	8000ebe <BSP_LED_Init+0x42>
 8000ee6:	bf00      	nop
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	48000400 	.word	0x48000400
 8000ef0:	08004aa8 	.word	0x08004aa8

08000ef4 <BSP_LED_Toggle>:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  if (Led == LED2)
 8000ef4:	2801      	cmp	r0, #1
 8000ef6:	d104      	bne.n	8000f02 <BSP_LED_Toggle+0xe>
  {
    HAL_GPIO_TogglePin(LED2_GPIO_PORT, LED_PIN[Led]);
 8000ef8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000efc:	4803      	ldr	r0, [pc, #12]	; (8000f0c <BSP_LED_Toggle+0x18>)
 8000efe:	f000 bd58 	b.w	80019b2 <HAL_GPIO_TogglePin>
  }
  else
  {
    BSP_IO_TogglePin(LED_PIN[Led]);
 8000f02:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <BSP_LED_Toggle+0x1c>)
 8000f04:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8000f08:	f000 bae8 	b.w	80014dc <BSP_IO_TogglePin>
 8000f0c:	48000400 	.word	0x48000400
 8000f10:	08004aa8 	.word	0x08004aa8

08000f14 <BSP_JOY_Init>:
  *     @arg  JOY_MODE_EXTI: Joystick pins will be connected to EXTI line
  *                                 with interrupt generation capability
  * @retval HAL_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_JOY_Init(JOYMode_TypeDef Joy_Mode)
{
 8000f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  /* Initialized the Joystick. */
  for (joykey = JOY_SEL; joykey < (JOY_SEL + JOYn) ; joykey++)
  {
    /* Enable the JOY clock */
    JOYx_GPIO_CLK_ENABLE(joykey);
 8000f18:	4c38      	ldr	r4, [pc, #224]	; (8000ffc <BSP_JOY_Init+0xe8>)

    GPIO_InitStruct.Pin = JOY_PIN[joykey];
 8000f1a:	4f39      	ldr	r7, [pc, #228]	; (8001000 <BSP_JOY_Init+0xec>)
      HAL_GPIO_Init(JOY_PORT[joykey], &GPIO_InitStruct);
    }
    else if (Joy_Mode == JOY_MODE_EXTI)
    {
      /* Configure Joy pin as input with External interrupt */
      GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f1c:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 800100c <BSP_JOY_Init+0xf8>
{
 8000f20:	b08a      	sub	sp, #40	; 0x28
 8000f22:	4606      	mov	r6, r0
 8000f24:	2500      	movs	r5, #0
 8000f26:	b2eb      	uxtb	r3, r5
    JOYx_GPIO_CLK_ENABLE(joykey);
 8000f28:	bb0d      	cbnz	r5, 8000f6e <BSP_JOY_Init+0x5a>
 8000f2a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000f2c:	f043 0304 	orr.w	r3, r3, #4
 8000f30:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000f32:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000f34:	f003 0304 	and.w	r3, r3, #4
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = JOY_PIN[joykey];
 8000f3c:	f837 3015 	ldrh.w	r3, [r7, r5, lsl #1]
 8000f40:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	f04f 0a00 	mov.w	sl, #0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f46:	2302      	movs	r3, #2
 8000f48:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	f8cd a020 	str.w	sl, [sp, #32]
    if (Joy_Mode == JOY_MODE_GPIO)
 8000f4e:	2e00      	cmp	r6, #0
 8000f50:	d13d      	bne.n	8000fce <BSP_JOY_Init+0xba>
      HAL_GPIO_Init(JOY_PORT[joykey], &GPIO_InitStruct);
 8000f52:	4b2c      	ldr	r3, [pc, #176]	; (8001004 <BSP_JOY_Init+0xf0>)
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f54:	9606      	str	r6, [sp, #24]
      HAL_GPIO_Init(JOY_PORT[joykey], &GPIO_InitStruct);
 8000f56:	a905      	add	r1, sp, #20
 8000f58:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000f5c:	f000 fbb4 	bl	80016c8 <HAL_GPIO_Init>
 8000f60:	3501      	adds	r5, #1
  for (joykey = JOY_SEL; joykey < (JOY_SEL + JOYn) ; joykey++)
 8000f62:	2d05      	cmp	r5, #5
 8000f64:	d1df      	bne.n	8000f26 <BSP_JOY_Init+0x12>
      HAL_NVIC_EnableIRQ((IRQn_Type)(JOY_IRQn[joykey]));
    }
  }

  return HAL_OK;
}
 8000f66:	2000      	movs	r0, #0
 8000f68:	b00a      	add	sp, #40	; 0x28
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    JOYx_GPIO_CLK_ENABLE(joykey);
 8000f6e:	2b03      	cmp	r3, #3
 8000f70:	d109      	bne.n	8000f86 <BSP_JOY_Init+0x72>
 8000f72:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f78:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000f7a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f80:	9301      	str	r3, [sp, #4]
 8000f82:	9b01      	ldr	r3, [sp, #4]
 8000f84:	e7da      	b.n	8000f3c <BSP_JOY_Init+0x28>
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d109      	bne.n	8000f9e <BSP_JOY_Init+0x8a>
 8000f8a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f90:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000f92:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f98:	9302      	str	r3, [sp, #8]
 8000f9a:	9b02      	ldr	r3, [sp, #8]
 8000f9c:	e7ce      	b.n	8000f3c <BSP_JOY_Init+0x28>
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d109      	bne.n	8000fb6 <BSP_JOY_Init+0xa2>
 8000fa2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000fa4:	f043 0320 	orr.w	r3, r3, #32
 8000fa8:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000faa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000fac:	f003 0320 	and.w	r3, r3, #32
 8000fb0:	9303      	str	r3, [sp, #12]
 8000fb2:	9b03      	ldr	r3, [sp, #12]
 8000fb4:	e7c2      	b.n	8000f3c <BSP_JOY_Init+0x28>
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	d1c0      	bne.n	8000f3c <BSP_JOY_Init+0x28>
 8000fba:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc0:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000fc2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc8:	9304      	str	r3, [sp, #16]
 8000fca:	9b04      	ldr	r3, [sp, #16]
 8000fcc:	e7b6      	b.n	8000f3c <BSP_JOY_Init+0x28>
    else if (Joy_Mode == JOY_MODE_EXTI)
 8000fce:	2e01      	cmp	r6, #1
 8000fd0:	d1c6      	bne.n	8000f60 <BSP_JOY_Init+0x4c>
      HAL_GPIO_Init(JOY_PORT[joykey], &GPIO_InitStruct);
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <BSP_JOY_Init+0xf0>)
      GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fd4:	f8cd 8018 	str.w	r8, [sp, #24]
      HAL_GPIO_Init(JOY_PORT[joykey], &GPIO_InitStruct);
 8000fd8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000fdc:	a905      	add	r1, sp, #20
 8000fde:	f000 fb73 	bl	80016c8 <HAL_GPIO_Init>
      HAL_NVIC_SetPriority((IRQn_Type)(JOY_IRQn[joykey]), 0x0F, 0x00);
 8000fe2:	4b09      	ldr	r3, [pc, #36]	; (8001008 <BSP_JOY_Init+0xf4>)
 8000fe4:	f915 9003 	ldrsb.w	r9, [r5, r3]
 8000fe8:	4652      	mov	r2, sl
 8000fea:	4648      	mov	r0, r9
 8000fec:	210f      	movs	r1, #15
 8000fee:	f000 fb07 	bl	8001600 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((IRQn_Type)(JOY_IRQn[joykey]));
 8000ff2:	4648      	mov	r0, r9
 8000ff4:	f000 fb38 	bl	8001668 <HAL_NVIC_EnableIRQ>
 8000ff8:	e7b2      	b.n	8000f60 <BSP_JOY_Init+0x4c>
 8000ffa:	bf00      	nop
 8000ffc:	40021000 	.word	0x40021000
 8001000:	08004aac 	.word	0x08004aac
 8001004:	200000a0 	.word	0x200000a0
 8001008:	08004ab6 	.word	0x08004ab6
 800100c:	10210000 	.word	0x10210000

08001010 <BSP_COM_Init>:
  *            @arg  COM1 
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart) 
{
 8001010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001012:	460e      	mov	r6, r1
 8001014:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 8001016:	b9d8      	cbnz	r0, 8001050 <BSP_COM_Init+0x40>
 8001018:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <BSP_COM_Init+0x80>)
 800101a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800101c:	f042 0201 	orr.w	r2, r2, #1
 8001020:	64da      	str	r2, [r3, #76]	; 0x4c
 8001022:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001024:	f002 0201 	and.w	r2, r2, #1
 8001028:	9200      	str	r2, [sp, #0]
 800102a:	9a00      	ldr	r2, [sp, #0]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 800102c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800102e:	f042 0208 	orr.w	r2, r2, #8
 8001032:	64da      	str	r2, [r3, #76]	; 0x4c
 8001034:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001036:	f002 0208 	and.w	r2, r2, #8
 800103a:	9201      	str	r2, [sp, #4]
 800103c:	9a01      	ldr	r2, [sp, #4]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 800103e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001040:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001044:	659a      	str	r2, [r3, #88]	; 0x58
 8001046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104c:	9302      	str	r3, [sp, #8]
 800104e:	9b02      	ldr	r3, [sp, #8]
  gpio_init_structure.Pin = COM_TX_PIN[COM];
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Alternate = COM_TX_AF[COM];
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8001050:	4c10      	ldr	r4, [pc, #64]	; (8001094 <BSP_COM_Init+0x84>)
 8001052:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 8001056:	2304      	movs	r3, #4
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001058:	2502      	movs	r5, #2
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 800105a:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 800105c:	2707      	movs	r7, #7
  gpio_init_structure.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8001060:	a903      	add	r1, sp, #12
 8001062:	6960      	ldr	r0, [r4, #20]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001064:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001066:	9504      	str	r5, [sp, #16]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001068:	9506      	str	r5, [sp, #24]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 800106a:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 800106c:	f000 fb2c 	bl	80016c8 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8001070:	2340      	movs	r3, #64	; 0x40
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = COM_RX_AF[COM];
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8001072:	a903      	add	r1, sp, #12
 8001074:	69a0      	ldr	r0, [r4, #24]
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8001076:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001078:	9504      	str	r5, [sp, #16]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 800107a:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 800107c:	f000 fb24 	bl	80016c8 <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 8001080:	69e3      	ldr	r3, [r4, #28]
 8001082:	6033      	str	r3, [r6, #0]
  HAL_UART_Init(huart);
 8001084:	4630      	mov	r0, r6
 8001086:	f002 fa0e 	bl	80034a6 <HAL_UART_Init>
}
 800108a:	b009      	add	sp, #36	; 0x24
 800108c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800108e:	bf00      	nop
 8001090:	40021000 	.word	0x40021000
 8001094:	200000a0 	.word	0x200000a0

08001098 <I2C2_Init>:
/**
  * @brief Discovery I2C2 Bus initialization
  * @retval None
  */
void I2C2_Init(void)
{
 8001098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (HAL_I2C_GetState(&I2c2Handle) == HAL_I2C_STATE_RESET)
 800109c:	4d3c      	ldr	r5, [pc, #240]	; (8001190 <I2C2_Init+0xf8>)
{
 800109e:	b0ac      	sub	sp, #176	; 0xb0
  if (HAL_I2C_GetState(&I2c2Handle) == HAL_I2C_STATE_RESET)
 80010a0:	f105 00e4 	add.w	r0, r5, #228	; 0xe4
 80010a4:	f001 f843 	bl	800212e <HAL_I2C_GetState>
 80010a8:	4606      	mov	r6, r0
 80010aa:	2800      	cmp	r0, #0
 80010ac:	d16c      	bne.n	8001188 <I2C2_Init+0xf0>
  {
    I2c2Handle.Instance              = DISCOVERY_I2C2;
 80010ae:	4b39      	ldr	r3, [pc, #228]	; (8001194 <I2C2_Init+0xfc>)
 80010b0:	f8c5 30e4 	str.w	r3, [r5, #228]	; 0xe4
    I2c2Handle.Init.Timing           = DISCOVERY_I2C2_TIMING;
 80010b4:	f503 137f 	add.w	r3, r3, #4177920	; 0x3fc000
 80010b8:	f503 5319 	add.w	r3, r3, #9792	; 0x2640
 80010bc:	331d      	adds	r3, #29
 80010be:	f8c5 30e8 	str.w	r3, [r5, #232]	; 0xe8
    I2c2Handle.Init.OwnAddress1      = 0x70;
 80010c2:	2370      	movs	r3, #112	; 0x70
    RCC_PeriphCLKInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);

    /*##-2- Configure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 80010c4:	4c34      	ldr	r4, [pc, #208]	; (8001198 <I2C2_Init+0x100>)
    I2c2Handle.Init.OwnAddress1      = 0x70;
 80010c6:	f8c5 30ec 	str.w	r3, [r5, #236]	; 0xec
    I2c2Handle.Init.OwnAddress2      = 0xFF;
 80010ca:	23ff      	movs	r3, #255	; 0xff
    I2c2Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80010cc:	f04f 0801 	mov.w	r8, #1
    I2c2Handle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80010d0:	f8c5 00f4 	str.w	r0, [r5, #244]	; 0xf4
    I2c2Handle.Init.OwnAddress2      = 0xFF;
 80010d4:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
    I2c2Handle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80010d8:	f8c5 0100 	str.w	r0, [r5, #256]	; 0x100
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80010dc:	2380      	movs	r3, #128	; 0x80
    I2c2Handle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80010de:	f8c5 0104 	str.w	r0, [r5, #260]	; 0x104
    RCC_PeriphCLKInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 80010e2:	f44f 4780 	mov.w	r7, #16384	; 0x4000
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 80010e6:	a809      	add	r0, sp, #36	; 0x24
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80010e8:	9309      	str	r3, [sp, #36]	; 0x24
    I2c2Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80010ea:	f8c5 80f0 	str.w	r8, [r5, #240]	; 0xf0
    RCC_PeriphCLKInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 80010ee:	971e      	str	r7, [sp, #120]	; 0x78
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 80010f0:	f001 fcce 	bl	8002a90 <HAL_RCCEx_PeriphCLKConfig>
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 80010f4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SCL_PIN;
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
    GPIO_InitStructure.Pull      = /*GPIO_NOPULL*/ GPIO_PULLUP;
    GPIO_InitStructure.Speed     = /*GPIO_SPEED_MEDIUM*/ GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStructure.Alternate = DISCOVERY_I2C2_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_I2C2_SCL_GPIO_PORT, &GPIO_InitStructure);
 80010f6:	4829      	ldr	r0, [pc, #164]	; (800119c <I2C2_Init+0x104>)
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 80010f8:	f043 0302 	orr.w	r3, r3, #2
 80010fc:	64e3      	str	r3, [r4, #76]	; 0x4c
 80010fe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001100:	f003 0302 	and.w	r3, r3, #2
 8001104:	9301      	str	r3, [sp, #4]
 8001106:	9b01      	ldr	r3, [sp, #4]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 8001108:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800110a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800110e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001110:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    GPIO_InitStructure.Pull      = /*GPIO_NOPULL*/ GPIO_PULLUP;
 8001112:	f8cd 8018 	str.w	r8, [sp, #24]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 8001116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800111a:	9302      	str	r3, [sp, #8]
 800111c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SCL_PIN;
 800111e:	2310      	movs	r3, #16
 8001120:	9304      	str	r3, [sp, #16]
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
 8001122:	2312      	movs	r3, #18
 8001124:	9305      	str	r3, [sp, #20]
    GPIO_InitStructure.Speed     = /*GPIO_SPEED_MEDIUM*/ GPIO_SPEED_FREQ_VERY_HIGH;
 8001126:	2303      	movs	r3, #3
 8001128:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(DISCOVERY_I2C2_SCL_GPIO_PORT, &GPIO_InitStructure);
 800112a:	a904      	add	r1, sp, #16
    GPIO_InitStructure.Alternate = DISCOVERY_I2C2_SCL_SDA_AF;
 800112c:	2304      	movs	r3, #4
 800112e:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_I2C2_SCL_GPIO_PORT, &GPIO_InitStructure);
 8001130:	f000 faca 	bl	80016c8 <HAL_GPIO_Init>
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SDA_PIN;
    HAL_GPIO_Init(DISCOVERY_I2C2_SDA_GPIO_PORT, &GPIO_InitStructure);
 8001134:	a904      	add	r1, sp, #16
 8001136:	481a      	ldr	r0, [pc, #104]	; (80011a0 <I2C2_Init+0x108>)
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SDA_PIN;
 8001138:	9704      	str	r7, [sp, #16]
    HAL_GPIO_Init(DISCOVERY_I2C2_SDA_GPIO_PORT, &GPIO_InitStructure);
 800113a:	f000 fac5 	bl	80016c8 <HAL_GPIO_Init>

    /*##-3- Configure the Discovery I2C2 peripheral #############################*/
    /* Enable Discovery_I2C2 clock */
    DISCOVERY_I2C2_CLK_ENABLE();
 800113e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001140:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001144:	65a3      	str	r3, [r4, #88]	; 0x58
 8001146:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001148:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800114c:	9303      	str	r3, [sp, #12]
 800114e:	9b03      	ldr	r3, [sp, #12]

    /* Force and release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C2_FORCE_RESET();
 8001150:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001152:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001156:	63a3      	str	r3, [r4, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 8001158:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800115a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800115e:	63a3      	str	r3, [r4, #56]	; 0x38

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_EV_IRQn, 0x00, 0);
 8001160:	4632      	mov	r2, r6
 8001162:	4631      	mov	r1, r6
 8001164:	2021      	movs	r0, #33	; 0x21
 8001166:	f000 fa4b 	bl	8001600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_EV_IRQn);
 800116a:	2021      	movs	r0, #33	; 0x21
 800116c:	f000 fa7c 	bl	8001668 <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_ER_IRQn, 0x00, 0);
 8001170:	4632      	mov	r2, r6
 8001172:	4631      	mov	r1, r6
 8001174:	2022      	movs	r0, #34	; 0x22
 8001176:	f000 fa43 	bl	8001600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_ER_IRQn);
 800117a:	2022      	movs	r0, #34	; 0x22
 800117c:	f000 fa74 	bl	8001668 <HAL_NVIC_EnableIRQ>
    HAL_I2C_Init(&I2c2Handle);
 8001180:	f105 00e4 	add.w	r0, r5, #228	; 0xe4
 8001184:	f000 fd68 	bl	8001c58 <HAL_I2C_Init>
}
 8001188:	b02c      	add	sp, #176	; 0xb0
 800118a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800118e:	bf00      	nop
 8001190:	20000378 	.word	0x20000378
 8001194:	40005800 	.word	0x40005800
 8001198:	40021000 	.word	0x40021000
 800119c:	48001c00 	.word	0x48001c00
 80011a0:	48000400 	.word	0x48000400

080011a4 <I2C2_Error>:
/**
  * @brief Discovery I2C2 error treatment function
  * @retval None
  */
static void I2C2_Error(void)
{
 80011a4:	b508      	push	{r3, lr}
  BSP_ErrorHandler();
 80011a6:	f7ff fe68 	bl	8000e7a <BSP_ErrorHandler>

  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2c2Handle);
 80011aa:	4803      	ldr	r0, [pc, #12]	; (80011b8 <I2C2_Error+0x14>)
 80011ac:	f000 fda6 	bl	8001cfc <HAL_I2C_DeInit>

  /* Re- Initiaize the I2C communication BUS */
  I2C2_Init();
}
 80011b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  I2C2_Init();
 80011b4:	f7ff bf70 	b.w	8001098 <I2C2_Init>
 80011b8:	2000045c 	.word	0x2000045c

080011bc <I2C2_ReadData.constprop.9>:
static uint8_t I2C2_ReadData(uint16_t Addr, uint16_t Reg, uint16_t RegSize)
 80011bc:	b510      	push	{r4, lr}
 80011be:	b086      	sub	sp, #24
  uint8_t value = 0x0;
 80011c0:	ac06      	add	r4, sp, #24
 80011c2:	2300      	movs	r3, #0
static uint8_t I2C2_ReadData(uint16_t Addr, uint16_t Reg, uint16_t RegSize)
 80011c4:	460a      	mov	r2, r1
  uint8_t value = 0x0;
 80011c6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ca:	b672      	cpsid	i
  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, Reg, RegSize, &value, 1, I2c2Timeout);
 80011cc:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <I2C2_ReadData.constprop.9+0x3c>)
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	9302      	str	r3, [sp, #8]
 80011d2:	2301      	movs	r3, #1
 80011d4:	4601      	mov	r1, r0
 80011d6:	9301      	str	r3, [sp, #4]
 80011d8:	9400      	str	r4, [sp, #0]
 80011da:	4808      	ldr	r0, [pc, #32]	; (80011fc <I2C2_ReadData.constprop.9+0x40>)
 80011dc:	f000 fe5e 	bl	8001e9c <HAL_I2C_Mem_Read>
  __ASM volatile ("cpsie i" : : : "memory");
 80011e0:	b662      	cpsie	i
  if (status != HAL_OK)
 80011e2:	b120      	cbz	r0, 80011ee <I2C2_ReadData.constprop.9+0x32>
    I2C2_Error();
 80011e4:	f7ff ffde 	bl	80011a4 <I2C2_Error>
    HAL_Delay(200);
 80011e8:	20c8      	movs	r0, #200	; 0xc8
 80011ea:	f000 f9e9 	bl	80015c0 <HAL_Delay>
}
 80011ee:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80011f2:	b006      	add	sp, #24
 80011f4:	bd10      	pop	{r4, pc}
 80011f6:	bf00      	nop
 80011f8:	200000a0 	.word	0x200000a0
 80011fc:	2000045c 	.word	0x2000045c

08001200 <I2C2_DeInit>:
{
 8001200:	b513      	push	{r0, r1, r4, lr}
  if (HAL_I2C_GetState(&I2c2Handle) != HAL_I2C_STATE_RESET)
 8001202:	4c20      	ldr	r4, [pc, #128]	; (8001284 <I2C2_DeInit+0x84>)
 8001204:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
 8001208:	f000 ff91 	bl	800212e <HAL_I2C_GetState>
 800120c:	2800      	cmp	r0, #0
 800120e:	d036      	beq.n	800127e <I2C2_DeInit+0x7e>
    HAL_I2C_DeInit(&I2c2Handle);
 8001210:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
 8001214:	f000 fd72 	bl	8001cfc <HAL_I2C_DeInit>
  if (hi2c->Instance == DISCOVERY_I2C2)
 8001218:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <I2C2_DeInit+0x88>)
 800121e:	429a      	cmp	r2, r3
 8001220:	d12d      	bne.n	800127e <I2C2_DeInit+0x7e>
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 8001222:	4c1a      	ldr	r4, [pc, #104]	; (800128c <I2C2_DeInit+0x8c>)
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SCL_GPIO_PORT, DISCOVERY_I2C2_SCL_PIN);
 8001224:	481a      	ldr	r0, [pc, #104]	; (8001290 <I2C2_DeInit+0x90>)
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 8001226:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001228:	f043 0302 	orr.w	r3, r3, #2
 800122c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800122e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	9b00      	ldr	r3, [sp, #0]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 8001238:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800123a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800123e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001240:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001246:	9301      	str	r3, [sp, #4]
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SCL_GPIO_PORT, DISCOVERY_I2C2_SCL_PIN);
 8001248:	2110      	movs	r1, #16
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 800124a:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SCL_GPIO_PORT, DISCOVERY_I2C2_SCL_PIN);
 800124c:	f000 fb14 	bl	8001878 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SDA_GPIO_PORT,  DISCOVERY_I2C2_SDA_PIN);
 8001250:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001254:	480f      	ldr	r0, [pc, #60]	; (8001294 <I2C2_DeInit+0x94>)
 8001256:	f000 fb0f 	bl	8001878 <HAL_GPIO_DeInit>
    DISCOVERY_I2C2_FORCE_RESET();
 800125a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800125c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001260:	63a3      	str	r3, [r4, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 8001262:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001264:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001268:	63a3      	str	r3, [r4, #56]	; 0x38
    DISCOVERY_I2C2_CLK_DISABLE();
 800126a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800126c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_EV_IRQn);
 8001270:	2021      	movs	r0, #33	; 0x21
    DISCOVERY_I2C2_CLK_DISABLE();
 8001272:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_EV_IRQn);
 8001274:	f000 fa04 	bl	8001680 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_ER_IRQn);
 8001278:	2022      	movs	r0, #34	; 0x22
 800127a:	f000 fa01 	bl	8001680 <HAL_NVIC_DisableIRQ>
}
 800127e:	b002      	add	sp, #8
 8001280:	bd10      	pop	{r4, pc}
 8001282:	bf00      	nop
 8001284:	20000378 	.word	0x20000378
 8001288:	40005800 	.word	0x40005800
 800128c:	40021000 	.word	0x40021000
 8001290:	48001c00 	.word	0x48001c00
 8001294:	48000400 	.word	0x48000400

08001298 <MFX_IO_Init>:
/**
  * @brief  Initializes MFX low level.
  * @retval None
  */
void MFX_IO_Init(void)
{
 8001298:	b508      	push	{r3, lr}
  /* I2C2 init */
  I2C2_Init();
 800129a:	f7ff fefd 	bl	8001098 <I2C2_Init>
  __ASM volatile ("cpsid i" : : : "memory");
 800129e:	b672      	cpsid	i
  status = HAL_I2C_IsDeviceReady(&I2c2Handle, Addr, trial, 50);
 80012a0:	2332      	movs	r3, #50	; 0x32
 80012a2:	2204      	movs	r2, #4
 80012a4:	2184      	movs	r1, #132	; 0x84
 80012a6:	4806      	ldr	r0, [pc, #24]	; (80012c0 <MFX_IO_Init+0x28>)
 80012a8:	f000 feb6 	bl	8002018 <HAL_I2C_IsDeviceReady>
  __ASM volatile ("cpsie i" : : : "memory");
 80012ac:	b662      	cpsie	i
  if (status != HAL_OK)
 80012ae:	b130      	cbz	r0, 80012be <MFX_IO_Init+0x26>
    I2C2_Error();
 80012b0:	f7ff ff78 	bl	80011a4 <I2C2_Error>
    HAL_Delay(200);
 80012b4:	20c8      	movs	r0, #200	; 0xc8
  /* Wait for device ready */
  if (I2C2_isDeviceReady(IO1_I2C_ADDRESS, 4) != HAL_OK)
  {
    BSP_ErrorHandler();
  }
}
 80012b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_Delay(200);
 80012ba:	f000 b981 	b.w	80015c0 <HAL_Delay>
 80012be:	bd08      	pop	{r3, pc}
 80012c0:	2000045c 	.word	0x2000045c

080012c4 <MFX_IO_DeInit>:
/**
  * @brief  Deinitializes MFX low level.
  * @retval None
  */
void MFX_IO_DeInit(void)
{
 80012c4:	b510      	push	{r4, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 80012c6:	4c15      	ldr	r4, [pc, #84]	; (800131c <MFX_IO_DeInit+0x58>)
  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 80012c8:	4815      	ldr	r0, [pc, #84]	; (8001320 <MFX_IO_DeInit+0x5c>)
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 80012ca:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80012cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d0:	64e3      	str	r3, [r4, #76]	; 0x4c
 80012d2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
{
 80012d4:	b088      	sub	sp, #32
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 80012d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012da:	9301      	str	r3, [sp, #4]
 80012dc:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 80012de:	2340      	movs	r3, #64	; 0x40
 80012e0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80012e2:	2301      	movs	r3, #1
 80012e4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	2300      	movs	r3, #0
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 80012e8:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 80012ec:	2302      	movs	r3, #2
 80012ee:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 80012f0:	f000 f9ea 	bl	80016c8 <HAL_GPIO_Init>

  /* DeInit interrupt pin : disable IRQ before to avoid spurious interrupt */
  HAL_NVIC_DisableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 80012f4:	2017      	movs	r0, #23
 80012f6:	f000 f9c3 	bl	8001680 <HAL_NVIC_DisableIRQ>
  MFX_INT_GPIO_CLK_ENABLE();
 80012fa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  HAL_GPIO_DeInit(MFX_INT_GPIO_PORT, MFX_INT_PIN);
 80012fc:	4809      	ldr	r0, [pc, #36]	; (8001324 <MFX_IO_DeInit+0x60>)
  MFX_INT_GPIO_CLK_ENABLE();
 80012fe:	f043 0304 	orr.w	r3, r3, #4
 8001302:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001304:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	9302      	str	r3, [sp, #8]
  HAL_GPIO_DeInit(MFX_INT_GPIO_PORT, MFX_INT_PIN);
 800130c:	2120      	movs	r1, #32
  MFX_INT_GPIO_CLK_ENABLE();
 800130e:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_DeInit(MFX_INT_GPIO_PORT, MFX_INT_PIN);
 8001310:	f000 fab2 	bl	8001878 <HAL_GPIO_DeInit>

  /* I2C2 Deinit */
  I2C2_DeInit();
 8001314:	f7ff ff74 	bl	8001200 <I2C2_DeInit>
}
 8001318:	b008      	add	sp, #32
 800131a:	bd10      	pop	{r4, pc}
 800131c:	40021000 	.word	0x40021000
 8001320:	48001c00 	.word	0x48001c00
 8001324:	48000800 	.word	0x48000800

08001328 <MFX_IO_ITConfig>:
/**
  * @brief  Configures MFX low level interrupt.
  * @retval None
  */
void MFX_IO_ITConfig(void)
{
 8001328:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO clock */
  MFX_INT_GPIO_CLK_ENABLE();
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <MFX_IO_ITConfig+0x44>)
  /* MFX_OUT_IRQ (normally used for EXTI_WKUP) */
  GPIO_InitStruct.Pin   = MFX_INT_PIN;
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_RISING;
  HAL_GPIO_Init(MFX_INT_GPIO_PORT, &GPIO_InitStruct);
 800132c:	4810      	ldr	r0, [pc, #64]	; (8001370 <MFX_IO_ITConfig+0x48>)
  MFX_INT_GPIO_CLK_ENABLE();
 800132e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001330:	f042 0204 	orr.w	r2, r2, #4
 8001334:	64da      	str	r2, [r3, #76]	; 0x4c
 8001336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001338:	f003 0304 	and.w	r3, r3, #4
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin   = MFX_INT_PIN;
 8001340:	2320      	movs	r3, #32
 8001342:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(MFX_INT_GPIO_PORT, &GPIO_InitStruct);
 800134a:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_RISING;
 800134c:	4b09      	ldr	r3, [pc, #36]	; (8001374 <MFX_IO_ITConfig+0x4c>)
 800134e:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(MFX_INT_GPIO_PORT, &GPIO_InitStruct);
 8001350:	f000 f9ba 	bl	80016c8 <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(MFX_INT_EXTI_IRQn), 0x0F, 0x0F);
 8001354:	220f      	movs	r2, #15
 8001356:	4611      	mov	r1, r2
 8001358:	2017      	movs	r0, #23
 800135a:	f000 f951 	bl	8001600 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 800135e:	2017      	movs	r0, #23
 8001360:	f000 f982 	bl	8001668 <HAL_NVIC_EnableIRQ>
}
 8001364:	b007      	add	sp, #28
 8001366:	f85d fb04 	ldr.w	pc, [sp], #4
 800136a:	bf00      	nop
 800136c:	40021000 	.word	0x40021000
 8001370:	48000800 	.word	0x48000800
 8001374:	10110000 	.word	0x10110000

08001378 <MFX_IO_EnableWakeupPin>:
/**
  * @brief  Configures MFX wke up  pin.
  * @retval None
  */
void MFX_IO_EnableWakeupPin(void)
{
 8001378:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 800137a:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <MFX_IO_EnableWakeupPin+0x34>)
  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 800137c:	480c      	ldr	r0, [pc, #48]	; (80013b0 <MFX_IO_EnableWakeupPin+0x38>)
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 800137e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001380:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001384:	64da      	str	r2, [r3, #76]	; 0x4c
 8001386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 8001390:	2340      	movs	r3, #64	; 0x40
 8001392:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8001394:	2301      	movs	r3, #1
 8001396:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001398:	2302      	movs	r3, #2
 800139a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 800139c:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 80013a2:	f000 f991 	bl	80016c8 <HAL_GPIO_Init>
}
 80013a6:	b007      	add	sp, #28
 80013a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80013ac:	40021000 	.word	0x40021000
 80013b0:	48001c00 	.word	0x48001c00

080013b4 <MFX_IO_Wakeup>:
/**
  * @brief  Wakeup MFX.
  * @retval None
  */
void MFX_IO_Wakeup(void)
{
 80013b4:	b510      	push	{r4, lr}
  /* Set Wakeup pin to high to wakeup Idd measurement component from standby mode */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_SET);
 80013b6:	4c08      	ldr	r4, [pc, #32]	; (80013d8 <MFX_IO_Wakeup+0x24>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	2140      	movs	r1, #64	; 0x40
 80013bc:	4620      	mov	r0, r4
 80013be:	f000 faf3 	bl	80019a8 <HAL_GPIO_WritePin>

  /* Wait */
  HAL_Delay(1);
 80013c2:	2001      	movs	r0, #1
 80013c4:	f000 f8fc 	bl	80015c0 <HAL_Delay>

  /* Set gpio pin basck to low */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_RESET);
 80013c8:	4620      	mov	r0, r4
 80013ca:	2200      	movs	r2, #0
 80013cc:	2140      	movs	r1, #64	; 0x40
}
 80013ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_RESET);
 80013d2:	f000 bae9 	b.w	80019a8 <HAL_GPIO_WritePin>
 80013d6:	bf00      	nop
 80013d8:	48001c00 	.word	0x48001c00

080013dc <MFX_IO_Write>:
  * @param  Reg: Register address
  * @param  Value: Data to be written
  * @retval None
  */
void MFX_IO_Write(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 80013dc:	b510      	push	{r4, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	ac06      	add	r4, sp, #24
 80013e2:	f804 2d01 	strb.w	r2, [r4, #-1]!
  __ASM volatile ("cpsid i" : : : "memory");
 80013e6:	b672      	cpsid	i
  status = HAL_I2C_Mem_Write(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, &Value, 1, I2c2Timeout);
 80013e8:	4b08      	ldr	r3, [pc, #32]	; (800140c <MFX_IO_Write+0x30>)
 80013ea:	6a1b      	ldr	r3, [r3, #32]
 80013ec:	9302      	str	r3, [sp, #8]
 80013ee:	2301      	movs	r3, #1
 80013f0:	460a      	mov	r2, r1
 80013f2:	9301      	str	r3, [sp, #4]
 80013f4:	4601      	mov	r1, r0
 80013f6:	9400      	str	r4, [sp, #0]
 80013f8:	4805      	ldr	r0, [pc, #20]	; (8001410 <MFX_IO_Write+0x34>)
 80013fa:	f000 fc98 	bl	8001d2e <HAL_I2C_Mem_Write>
  __ASM volatile ("cpsie i" : : : "memory");
 80013fe:	b662      	cpsie	i
  if (status != HAL_OK)
 8001400:	b108      	cbz	r0, 8001406 <MFX_IO_Write+0x2a>
    I2C2_Error();
 8001402:	f7ff fecf 	bl	80011a4 <I2C2_Error>
  I2C2_WriteData(Addr, Reg, I2C_MEMADD_SIZE_8BIT, Value);
}
 8001406:	b006      	add	sp, #24
 8001408:	bd10      	pop	{r4, pc}
 800140a:	bf00      	nop
 800140c:	200000a0 	.word	0x200000a0
 8001410:	2000045c 	.word	0x2000045c

08001414 <MFX_IO_Read>:
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t MFX_IO_Read(uint16_t Addr, uint8_t Reg)
{
  return I2C2_ReadData(Addr, Reg, I2C_MEMADD_SIZE_8BIT);
 8001414:	f7ff bed2 	b.w	80011bc <I2C2_ReadData.constprop.9>

08001418 <MFX_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t MFX_IO_ReadMultiple(uint16_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 800141a:	b672      	cpsid	i
  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c2Timeout);
 800141c:	4c08      	ldr	r4, [pc, #32]	; (8001440 <MFX_IO_ReadMultiple+0x28>)
 800141e:	6a24      	ldr	r4, [r4, #32]
 8001420:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
 8001424:	460a      	mov	r2, r1
 8001426:	2301      	movs	r3, #1
 8001428:	4601      	mov	r1, r0
 800142a:	4806      	ldr	r0, [pc, #24]	; (8001444 <MFX_IO_ReadMultiple+0x2c>)
 800142c:	f000 fd36 	bl	8001e9c <HAL_I2C_Mem_Read>
 8001430:	4604      	mov	r4, r0
  __ASM volatile ("cpsie i" : : : "memory");
 8001432:	b662      	cpsie	i
  if (status != HAL_OK)
 8001434:	b108      	cbz	r0, 800143a <MFX_IO_ReadMultiple+0x22>
    I2C2_Error();
 8001436:	f7ff feb5 	bl	80011a4 <I2C2_Error>
  return I2C2_ReadBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
}
 800143a:	4620      	mov	r0, r4
 800143c:	b004      	add	sp, #16
 800143e:	bd10      	pop	{r4, pc}
 8001440:	200000a0 	.word	0x200000a0
 8001444:	2000045c 	.word	0x2000045c

08001448 <MFX_IO_Delay>:
 8001448:	f000 b8ba 	b.w	80015c0 <HAL_Delay>

0800144c <BSP_IO_Init>:
  *         then the SysTick interrupt must have higher priority (numerically lower)
  *         than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_Init(void)
{
 800144c:	b570      	push	{r4, r5, r6, lr}
  uint8_t ret = IO_ERROR;
  uint8_t mfxstm32l152_id = 0;

  if (io1_driver == NULL) /* Checks if MFX initialization has been already done */
 800144e:	4d11      	ldr	r5, [pc, #68]	; (8001494 <BSP_IO_Init+0x48>)
 8001450:	682c      	ldr	r4, [r5, #0]
 8001452:	b9ec      	cbnz	r4, 8001490 <BSP_IO_Init+0x44>
  {
    mfxstm32l152_idd_drv.WakeUp(IO1_I2C_ADDRESS);
 8001454:	4b10      	ldr	r3, [pc, #64]	; (8001498 <BSP_IO_Init+0x4c>)

    HAL_Delay(10);

    /* Read ID and verify the IO expander is ready */
    mfxstm32l152_id = mfxstm32l152_io_drv.ReadID(IO1_I2C_ADDRESS);
 8001456:	4e11      	ldr	r6, [pc, #68]	; (800149c <BSP_IO_Init+0x50>)
    mfxstm32l152_idd_drv.WakeUp(IO1_I2C_ADDRESS);
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	2084      	movs	r0, #132	; 0x84
 800145c:	4798      	blx	r3
    HAL_Delay(10);
 800145e:	200a      	movs	r0, #10
 8001460:	f000 f8ae 	bl	80015c0 <HAL_Delay>
    mfxstm32l152_id = mfxstm32l152_io_drv.ReadID(IO1_I2C_ADDRESS);
 8001464:	6873      	ldr	r3, [r6, #4]
 8001466:	2084      	movs	r0, #132	; 0x84
 8001468:	4798      	blx	r3

    if ((mfxstm32l152_id == MFXSTM32L152_ID_1) || (mfxstm32l152_id == MFXSTM32L152_ID_2))
 800146a:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 800146e:	2879      	cmp	r0, #121	; 0x79
 8001470:	d001      	beq.n	8001476 <BSP_IO_Init+0x2a>
  uint8_t ret = IO_ERROR;
 8001472:	2001      	movs	r0, #1
 8001474:	bd70      	pop	{r4, r5, r6, pc}
    {
      /* Initialize the MFX */
      io1_driver = &mfxstm32l152_io_drv;

      /* Initialize the MFX IO driver structure  */
      if (io1_driver->Init != NULL)
 8001476:	6833      	ldr	r3, [r6, #0]
      io1_driver = &mfxstm32l152_io_drv;
 8001478:	602e      	str	r6, [r5, #0]
      if (io1_driver->Init != NULL)
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0f9      	beq.n	8001472 <BSP_IO_Init+0x26>
      {
        io1_driver->Init(IO1_I2C_ADDRESS);
 800147e:	2084      	movs	r0, #132	; 0x84
 8001480:	4798      	blx	r3
        io1_driver->Start(IO1_I2C_ADDRESS, IO1_PIN_ALL >> IO1_PIN_OFFSET);
 8001482:	682b      	ldr	r3, [r5, #0]
 8001484:	4906      	ldr	r1, [pc, #24]	; (80014a0 <BSP_IO_Init+0x54>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	2084      	movs	r0, #132	; 0x84
 800148a:	4798      	blx	r3

        ret = IO_OK;
 800148c:	4620      	mov	r0, r4
 800148e:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
  }
  else
  {
    ret = IO_ALREADY_INITIALIZED;
 8001490:	2003      	movs	r0, #3
  }

  return ret;
}
 8001492:	bd70      	pop	{r4, r5, r6, pc}
 8001494:	200004ac 	.word	0x200004ac
 8001498:	20000000 	.word	0x20000000
 800149c:	2000004c 	.word	0x2000004c
 80014a0:	000301ff 	.word	0x000301ff

080014a4 <BSP_IO_ConfigPin>:
  *            @arg  IO_MODE_IT_LOW_LEVEL
  *            @arg  IO_MODE_IT_HIGH_LEVEL
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_ConfigPin(uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 80014a4:	b508      	push	{r3, lr}

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;


  /* Configure the selected IO Expander 1 pin(s) mode */
  io1_driver->Config(IO1_I2C_ADDRESS, io1_pin, IO_Mode);
 80014a6:	4b05      	ldr	r3, [pc, #20]	; (80014bc <BSP_IO_ConfigPin+0x18>)
 80014a8:	460a      	mov	r2, r1
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4904      	ldr	r1, [pc, #16]	; (80014c0 <BSP_IO_ConfigPin+0x1c>)
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	4001      	ands	r1, r0
 80014b2:	2084      	movs	r0, #132	; 0x84
 80014b4:	4798      	blx	r3

  return IO_OK;
}
 80014b6:	2000      	movs	r0, #0
 80014b8:	bd08      	pop	{r3, pc}
 80014ba:	bf00      	nop
 80014bc:	200004ac 	.word	0x200004ac
 80014c0:	000301ff 	.word	0x000301ff

080014c4 <BSP_IO_WritePin>:
  uint32_t io1_pin = 0;

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;

  /* Sets the IO Expander 1 selected pins state */
  io1_driver->WritePin(IO1_I2C_ADDRESS, io1_pin, PinState);
 80014c4:	4b03      	ldr	r3, [pc, #12]	; (80014d4 <BSP_IO_WritePin+0x10>)
 80014c6:	460a      	mov	r2, r1
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4903      	ldr	r1, [pc, #12]	; (80014d8 <BSP_IO_WritePin+0x14>)
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	4001      	ands	r1, r0
 80014d0:	2084      	movs	r0, #132	; 0x84
 80014d2:	4718      	bx	r3
 80014d4:	200004ac 	.word	0x200004ac
 80014d8:	000301ff 	.word	0x000301ff

080014dc <BSP_IO_TogglePin>:
  uint32_t io1_pin = 0;

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;

  /* Toggles the IO Expander 1 selected pins state */
  if (io1_driver->ReadPin(IO1_I2C_ADDRESS, io1_pin) == RESET) /* Set */
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <BSP_IO_TogglePin+0x24>)
{
 80014de:	b510      	push	{r4, lr}
  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 80014e0:	4c08      	ldr	r4, [pc, #32]	; (8001504 <BSP_IO_TogglePin+0x28>)
  if (io1_driver->ReadPin(IO1_I2C_ADDRESS, io1_pin) == RESET) /* Set */
 80014e2:	681b      	ldr	r3, [r3, #0]
  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 80014e4:	4004      	ands	r4, r0
  if (io1_driver->ReadPin(IO1_I2C_ADDRESS, io1_pin) == RESET) /* Set */
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	4621      	mov	r1, r4
 80014ea:	2084      	movs	r0, #132	; 0x84
 80014ec:	4798      	blx	r3
 80014ee:	b928      	cbnz	r0, 80014fc <BSP_IO_TogglePin+0x20>
  {
    BSP_IO_WritePin(io1_pin, GPIO_PIN_SET); /* Reset */
 80014f0:	2101      	movs	r1, #1
  }
  else
  {
    BSP_IO_WritePin(io1_pin, GPIO_PIN_RESET);  /* Set */
 80014f2:	4620      	mov	r0, r4
  }

}
 80014f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    BSP_IO_WritePin(io1_pin, GPIO_PIN_RESET);  /* Set */
 80014f8:	f7ff bfe4 	b.w	80014c4 <BSP_IO_WritePin>
 80014fc:	2100      	movs	r1, #0
 80014fe:	e7f8      	b.n	80014f2 <BSP_IO_TogglePin+0x16>
 8001500:	200004ac 	.word	0x200004ac
 8001504:	000301ff 	.word	0x000301ff

08001508 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001508:	490f      	ldr	r1, [pc, #60]	; (8001548 <SystemInit+0x40>)
 800150a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800150e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001516:	4b0d      	ldr	r3, [pc, #52]	; (800154c <SystemInit+0x44>)
 8001518:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800151a:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 800151c:	f042 0201 	orr.w	r2, r2, #1
 8001520:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001522:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800152a:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800152e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8001530:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001534:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800153c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800153e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001540:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001544:	608b      	str	r3, [r1, #8]
 8001546:	4770      	bx	lr
 8001548:	e000ed00 	.word	0xe000ed00
 800154c:	40021000 	.word	0x40021000

08001550 <HAL_MspInit>:
 8001550:	4770      	bx	lr
	...

08001554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001554:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <HAL_InitTick+0x2c>)
{
 8001558:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800155a:	6818      	ldr	r0, [r3, #0]
 800155c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001560:	fbb0 f0f3 	udiv	r0, r0, r3
 8001564:	f000 f89a 	bl	800169c <HAL_SYSTICK_Config>
 8001568:	4604      	mov	r4, r0
 800156a:	b938      	cbnz	r0, 800157c <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 800156c:	4602      	mov	r2, r0
 800156e:	4629      	mov	r1, r5
 8001570:	f04f 30ff 	mov.w	r0, #4294967295
 8001574:	f000 f844 	bl	8001600 <HAL_NVIC_SetPriority>
 8001578:	4620      	mov	r0, r4
 800157a:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 800157c:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800157e:	bd38      	pop	{r3, r4, r5, pc}
 8001580:	200000c8 	.word	0x200000c8

08001584 <HAL_Init>:
{
 8001584:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001586:	2003      	movs	r0, #3
 8001588:	f000 f828 	bl	80015dc <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800158c:	200f      	movs	r0, #15
 800158e:	f7ff ffe1 	bl	8001554 <HAL_InitTick>
 8001592:	4604      	mov	r4, r0
 8001594:	b918      	cbnz	r0, 800159e <HAL_Init+0x1a>
    HAL_MspInit();
 8001596:	f7ff ffdb 	bl	8001550 <HAL_MspInit>
}
 800159a:	4620      	mov	r0, r4
 800159c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800159e:	2401      	movs	r4, #1
 80015a0:	e7fb      	b.n	800159a <HAL_Init+0x16>
	...

080015a4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80015a4:	4a02      	ldr	r2, [pc, #8]	; (80015b0 <HAL_IncTick+0xc>)
 80015a6:	6813      	ldr	r3, [r2, #0]
 80015a8:	3301      	adds	r3, #1
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	200004c0 	.word	0x200004c0

080015b4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80015b4:	4b01      	ldr	r3, [pc, #4]	; (80015bc <HAL_GetTick+0x8>)
 80015b6:	6818      	ldr	r0, [r3, #0]
}
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	200004c0 	.word	0x200004c0

080015c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c0:	b538      	push	{r3, r4, r5, lr}
 80015c2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80015c4:	f7ff fff6 	bl	80015b4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015c8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80015ca:	4605      	mov	r5, r0
  {
    wait++;
 80015cc:	bf18      	it	ne
 80015ce:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015d0:	f7ff fff0 	bl	80015b4 <HAL_GetTick>
 80015d4:	1b40      	subs	r0, r0, r5
 80015d6:	4284      	cmp	r4, r0
 80015d8:	d8fa      	bhi.n	80015d0 <HAL_Delay+0x10>
  {
  }
}
 80015da:	bd38      	pop	{r3, r4, r5, pc}

080015dc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015dc:	4a07      	ldr	r2, [pc, #28]	; (80015fc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80015de:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80015e4:	041b      	lsls	r3, r3, #16
 80015e6:	0c1b      	lsrs	r3, r3, #16
 80015e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80015ec:	0200      	lsls	r0, r0, #8
 80015ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80015f6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80015f8:	60d3      	str	r3, [r2, #12]
 80015fa:	4770      	bx	lr
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001600:	4b17      	ldr	r3, [pc, #92]	; (8001660 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001602:	b530      	push	{r4, r5, lr}
 8001604:	68dc      	ldr	r4, [r3, #12]
 8001606:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800160a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001610:	2b04      	cmp	r3, #4
 8001612:	bf28      	it	cs
 8001614:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001616:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	f04f 0501 	mov.w	r5, #1
 800161c:	fa05 f303 	lsl.w	r3, r5, r3
 8001620:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001624:	bf8c      	ite	hi
 8001626:	3c03      	subhi	r4, #3
 8001628:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800162a:	4019      	ands	r1, r3
 800162c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800162e:	fa05 f404 	lsl.w	r4, r5, r4
 8001632:	3c01      	subs	r4, #1
 8001634:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001636:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001638:	ea42 0201 	orr.w	r2, r2, r1
 800163c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001640:	bfaf      	iteee	ge
 8001642:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001646:	f000 000f 	andlt.w	r0, r0, #15
 800164a:	4b06      	ldrlt	r3, [pc, #24]	; (8001664 <HAL_NVIC_SetPriority+0x64>)
 800164c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164e:	bfa5      	ittet	ge
 8001650:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001654:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001656:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001658:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800165c:	bd30      	pop	{r4, r5, pc}
 800165e:	bf00      	nop
 8001660:	e000ed00 	.word	0xe000ed00
 8001664:	e000ed14 	.word	0xe000ed14

08001668 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001668:	0942      	lsrs	r2, r0, #5
 800166a:	2301      	movs	r3, #1
 800166c:	f000 001f 	and.w	r0, r0, #31
 8001670:	fa03 f000 	lsl.w	r0, r3, r0
 8001674:	4b01      	ldr	r3, [pc, #4]	; (800167c <HAL_NVIC_EnableIRQ+0x14>)
 8001676:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800167a:	4770      	bx	lr
 800167c:	e000e100 	.word	0xe000e100

08001680 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001680:	0943      	lsrs	r3, r0, #5
 8001682:	2201      	movs	r2, #1
 8001684:	f000 001f 	and.w	r0, r0, #31
 8001688:	fa02 f000 	lsl.w	r0, r2, r0
 800168c:	3320      	adds	r3, #32
 800168e:	4a02      	ldr	r2, [pc, #8]	; (8001698 <HAL_NVIC_DisableIRQ+0x18>)
 8001690:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000e100 	.word	0xe000e100

0800169c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800169c:	3801      	subs	r0, #1
 800169e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80016a2:	d20a      	bcs.n	80016ba <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a6:	4a07      	ldr	r2, [pc, #28]	; (80016c4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016a8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016aa:	21f0      	movs	r1, #240	; 0xf0
 80016ac:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016b2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80016ba:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000e010 	.word	0xe000e010
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016cc:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d0:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8001874 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80016d4:	4a65      	ldr	r2, [pc, #404]	; (800186c <HAL_GPIO_Init+0x1a4>)
  uint32_t position = 0x00u;
 80016d6:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d8:	fa38 f403 	lsrs.w	r4, r8, r3
 80016dc:	d102      	bne.n	80016e4 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 80016de:	b003      	add	sp, #12
 80016e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016e4:	f04f 0e01 	mov.w	lr, #1
 80016e8:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 80016ec:	ea18 060e 	ands.w	r6, r8, lr
 80016f0:	f000 80ab 	beq.w	800184a <HAL_GPIO_Init+0x182>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016f4:	684c      	ldr	r4, [r1, #4]
 80016f6:	f024 0710 	bic.w	r7, r4, #16
 80016fa:	2f02      	cmp	r7, #2
 80016fc:	d116      	bne.n	800172c <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 80016fe:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001702:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001706:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800170a:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800170e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001712:	f04f 0c0f 	mov.w	ip, #15
 8001716:	fa0c fc0b 	lsl.w	ip, ip, fp
 800171a:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800171e:	690d      	ldr	r5, [r1, #16]
 8001720:	fa05 f50b 	lsl.w	r5, r5, fp
 8001724:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8001728:	f8ca 5020 	str.w	r5, [sl, #32]
 800172c:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001730:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001732:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001736:	fa05 f50a 	lsl.w	r5, r5, sl
 800173a:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800173c:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001740:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001744:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001748:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800174a:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800174e:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001750:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001754:	d811      	bhi.n	800177a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8001756:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001758:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 800175c:	68cf      	ldr	r7, [r1, #12]
 800175e:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001762:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001766:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001768:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800176a:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800176e:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001772:	409f      	lsls	r7, r3
 8001774:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001778:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800177a:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800177c:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800177e:	688f      	ldr	r7, [r1, #8]
 8001780:	fa07 f70a 	lsl.w	r7, r7, sl
 8001784:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001786:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001788:	00e5      	lsls	r5, r4, #3
 800178a:	d55e      	bpl.n	800184a <HAL_GPIO_Init+0x182>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178c:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8001790:	f045 0501 	orr.w	r5, r5, #1
 8001794:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
 8001798:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 800179c:	f023 0703 	bic.w	r7, r3, #3
 80017a0:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80017a4:	f005 0501 	and.w	r5, r5, #1
 80017a8:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80017ac:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017ae:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b2:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80017b4:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017b8:	f04f 0c0f 	mov.w	ip, #15
 80017bc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80017c0:	fa0c f50e 	lsl.w	r5, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017c4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017c8:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017cc:	d03f      	beq.n	800184e <HAL_GPIO_Init+0x186>
 80017ce:	4d28      	ldr	r5, [pc, #160]	; (8001870 <HAL_GPIO_Init+0x1a8>)
 80017d0:	42a8      	cmp	r0, r5
 80017d2:	d03e      	beq.n	8001852 <HAL_GPIO_Init+0x18a>
 80017d4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80017d8:	42a8      	cmp	r0, r5
 80017da:	d03c      	beq.n	8001856 <HAL_GPIO_Init+0x18e>
 80017dc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80017e0:	42a8      	cmp	r0, r5
 80017e2:	d03a      	beq.n	800185a <HAL_GPIO_Init+0x192>
 80017e4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80017e8:	42a8      	cmp	r0, r5
 80017ea:	d038      	beq.n	800185e <HAL_GPIO_Init+0x196>
 80017ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80017f0:	42a8      	cmp	r0, r5
 80017f2:	d036      	beq.n	8001862 <HAL_GPIO_Init+0x19a>
 80017f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80017f8:	42a8      	cmp	r0, r5
 80017fa:	d034      	beq.n	8001866 <HAL_GPIO_Init+0x19e>
 80017fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001800:	42a8      	cmp	r0, r5
 8001802:	bf14      	ite	ne
 8001804:	2508      	movne	r5, #8
 8001806:	2507      	moveq	r5, #7
 8001808:	fa05 f50e 	lsl.w	r5, r5, lr
 800180c:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001810:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR1;
 8001812:	6815      	ldr	r5, [r2, #0]
        temp &= ~(iocurrent);
 8001814:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001816:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 800181a:	bf0c      	ite	eq
 800181c:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800181e:	4335      	orrne	r5, r6
        EXTI->IMR1 = temp;
 8001820:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR1;
 8001822:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001824:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8001828:	bf0c      	ite	eq
 800182a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800182c:	4335      	orrne	r5, r6
        EXTI->EMR1 = temp;
 800182e:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR1;
 8001830:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001832:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8001836:	bf0c      	ite	eq
 8001838:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800183a:	4335      	orrne	r5, r6
        EXTI->RTSR1 = temp;
 800183c:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR1;
 800183e:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001840:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8001842:	bf54      	ite	pl
 8001844:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8001846:	4335      	orrmi	r5, r6
        EXTI->FTSR1 = temp;
 8001848:	60d5      	str	r5, [r2, #12]
    position++;
 800184a:	3301      	adds	r3, #1
 800184c:	e744      	b.n	80016d8 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800184e:	2500      	movs	r5, #0
 8001850:	e7da      	b.n	8001808 <HAL_GPIO_Init+0x140>
 8001852:	2501      	movs	r5, #1
 8001854:	e7d8      	b.n	8001808 <HAL_GPIO_Init+0x140>
 8001856:	2502      	movs	r5, #2
 8001858:	e7d6      	b.n	8001808 <HAL_GPIO_Init+0x140>
 800185a:	2503      	movs	r5, #3
 800185c:	e7d4      	b.n	8001808 <HAL_GPIO_Init+0x140>
 800185e:	2504      	movs	r5, #4
 8001860:	e7d2      	b.n	8001808 <HAL_GPIO_Init+0x140>
 8001862:	2505      	movs	r5, #5
 8001864:	e7d0      	b.n	8001808 <HAL_GPIO_Init+0x140>
 8001866:	2506      	movs	r5, #6
 8001868:	e7ce      	b.n	8001808 <HAL_GPIO_Init+0x140>
 800186a:	bf00      	nop
 800186c:	40010400 	.word	0x40010400
 8001870:	48000400 	.word	0x48000400
 8001874:	40021000 	.word	0x40021000

08001878 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800187c:	4d46      	ldr	r5, [pc, #280]	; (8001998 <HAL_GPIO_DeInit+0x120>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800187e:	f8df a120 	ldr.w	sl, [pc, #288]	; 80019a0 <HAL_GPIO_DeInit+0x128>
 8001882:	f8df b120 	ldr.w	fp, [pc, #288]	; 80019a4 <HAL_GPIO_DeInit+0x12c>
  uint32_t position = 0x00u;
 8001886:	2200      	movs	r2, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001888:	f04f 0901 	mov.w	r9, #1
  while ((GPIO_Pin >> position) != 0x00u)
 800188c:	fa31 f302 	lsrs.w	r3, r1, r2
 8001890:	d101      	bne.n	8001896 <HAL_GPIO_DeInit+0x1e>
      }
    }

    position++;
  }
}
 8001892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001896:	fa09 f802 	lsl.w	r8, r9, r2
    if (iocurrent != 0x00u)
 800189a:	ea11 0608 	ands.w	r6, r1, r8
 800189e:	d06b      	beq.n	8001978 <HAL_GPIO_DeInit+0x100>
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80018a0:	6807      	ldr	r7, [r0, #0]
 80018a2:	2303      	movs	r3, #3
 80018a4:	0054      	lsls	r4, r2, #1
 80018a6:	fa03 f404 	lsl.w	r4, r3, r4
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80018aa:	fa22 fc03 	lsr.w	ip, r2, r3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80018ae:	4327      	orrs	r7, r4
 80018b0:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80018b4:	6007      	str	r7, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80018b6:	f8dc 7020 	ldr.w	r7, [ip, #32]
 80018ba:	f002 0e07 	and.w	lr, r2, #7
 80018be:	463b      	mov	r3, r7
 80018c0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80018c4:	270f      	movs	r7, #15
 80018c6:	fa07 fe0e 	lsl.w	lr, r7, lr
 80018ca:	ea23 0e0e 	bic.w	lr, r3, lr
 80018ce:	f8cc e020 	str.w	lr, [ip, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018d2:	f8d0 e008 	ldr.w	lr, [r0, #8]
 80018d6:	43e4      	mvns	r4, r4
 80018d8:	ea0e 0e04 	and.w	lr, lr, r4
 80018dc:	f8c0 e008 	str.w	lr, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80018e0:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80018e4:	ea2e 0808 	bic.w	r8, lr, r8
 80018e8:	f8c0 8004 	str.w	r8, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80018ec:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 80018f0:	ea04 040e 	and.w	r4, r4, lr
 80018f4:	60c4      	str	r4, [r0, #12]
 80018f6:	f022 0403 	bic.w	r4, r2, #3
 80018fa:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80018fe:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001902:	f002 0e03 	and.w	lr, r2, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 8001906:	f8d4 c008 	ldr.w	ip, [r4, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800190a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800190e:	fa07 f70e 	lsl.w	r7, r7, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001912:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001916:	ea0c 0c07 	and.w	ip, ip, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800191a:	d02f      	beq.n	800197c <HAL_GPIO_DeInit+0x104>
 800191c:	4b1f      	ldr	r3, [pc, #124]	; (800199c <HAL_GPIO_DeInit+0x124>)
 800191e:	4298      	cmp	r0, r3
 8001920:	d02e      	beq.n	8001980 <HAL_GPIO_DeInit+0x108>
 8001922:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001926:	4298      	cmp	r0, r3
 8001928:	d02c      	beq.n	8001984 <HAL_GPIO_DeInit+0x10c>
 800192a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800192e:	4298      	cmp	r0, r3
 8001930:	d02a      	beq.n	8001988 <HAL_GPIO_DeInit+0x110>
 8001932:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001936:	4298      	cmp	r0, r3
 8001938:	d028      	beq.n	800198c <HAL_GPIO_DeInit+0x114>
 800193a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800193e:	4298      	cmp	r0, r3
 8001940:	d026      	beq.n	8001990 <HAL_GPIO_DeInit+0x118>
 8001942:	4550      	cmp	r0, sl
 8001944:	d026      	beq.n	8001994 <HAL_GPIO_DeInit+0x11c>
 8001946:	4558      	cmp	r0, fp
 8001948:	bf0c      	ite	eq
 800194a:	2307      	moveq	r3, #7
 800194c:	2308      	movne	r3, #8
 800194e:	fa03 f30e 	lsl.w	r3, r3, lr
 8001952:	459c      	cmp	ip, r3
 8001954:	d110      	bne.n	8001978 <HAL_GPIO_DeInit+0x100>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001956:	68a3      	ldr	r3, [r4, #8]
 8001958:	ea23 0707 	bic.w	r7, r3, r7
 800195c:	60a7      	str	r7, [r4, #8]
        EXTI->IMR1 &= ~(iocurrent);
 800195e:	682b      	ldr	r3, [r5, #0]
 8001960:	43f6      	mvns	r6, r6
 8001962:	4033      	ands	r3, r6
 8001964:	602b      	str	r3, [r5, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001966:	686b      	ldr	r3, [r5, #4]
 8001968:	4033      	ands	r3, r6
 800196a:	606b      	str	r3, [r5, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800196c:	68ab      	ldr	r3, [r5, #8]
 800196e:	4033      	ands	r3, r6
 8001970:	60ab      	str	r3, [r5, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8001972:	68eb      	ldr	r3, [r5, #12]
 8001974:	401e      	ands	r6, r3
 8001976:	60ee      	str	r6, [r5, #12]
    position++;
 8001978:	3201      	adds	r2, #1
 800197a:	e787      	b.n	800188c <HAL_GPIO_DeInit+0x14>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800197c:	2300      	movs	r3, #0
 800197e:	e7e6      	b.n	800194e <HAL_GPIO_DeInit+0xd6>
 8001980:	2301      	movs	r3, #1
 8001982:	e7e4      	b.n	800194e <HAL_GPIO_DeInit+0xd6>
 8001984:	2302      	movs	r3, #2
 8001986:	e7e2      	b.n	800194e <HAL_GPIO_DeInit+0xd6>
 8001988:	2303      	movs	r3, #3
 800198a:	e7e0      	b.n	800194e <HAL_GPIO_DeInit+0xd6>
 800198c:	2304      	movs	r3, #4
 800198e:	e7de      	b.n	800194e <HAL_GPIO_DeInit+0xd6>
 8001990:	2305      	movs	r3, #5
 8001992:	e7dc      	b.n	800194e <HAL_GPIO_DeInit+0xd6>
 8001994:	2306      	movs	r3, #6
 8001996:	e7da      	b.n	800194e <HAL_GPIO_DeInit+0xd6>
 8001998:	40010400 	.word	0x40010400
 800199c:	48000400 	.word	0x48000400
 80019a0:	48001800 	.word	0x48001800
 80019a4:	48001c00 	.word	0x48001c00

080019a8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019a8:	b10a      	cbz	r2, 80019ae <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019aa:	6181      	str	r1, [r0, #24]
 80019ac:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019ae:	6281      	str	r1, [r0, #40]	; 0x28
 80019b0:	4770      	bx	lr

080019b2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80019b2:	6943      	ldr	r3, [r0, #20]
 80019b4:	4059      	eors	r1, r3
 80019b6:	6141      	str	r1, [r0, #20]
 80019b8:	4770      	bx	lr

080019ba <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019ba:	4770      	bx	lr

080019bc <HAL_GPIO_EXTI_IRQHandler>:
{
 80019bc:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019be:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80019c0:	6959      	ldr	r1, [r3, #20]
 80019c2:	4201      	tst	r1, r0
 80019c4:	d002      	beq.n	80019cc <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019c6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019c8:	f7ff fff7 	bl	80019ba <HAL_GPIO_EXTI_Callback>
 80019cc:	bd08      	pop	{r3, pc}
 80019ce:	bf00      	nop
 80019d0:	40010400 	.word	0x40010400

080019d4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80019d4:	6803      	ldr	r3, [r0, #0]
 80019d6:	699a      	ldr	r2, [r3, #24]
 80019d8:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 80019da:	bf44      	itt	mi
 80019dc:	2200      	movmi	r2, #0
 80019de:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019e0:	699a      	ldr	r2, [r3, #24]
 80019e2:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80019e4:	bf5e      	ittt	pl
 80019e6:	699a      	ldrpl	r2, [r3, #24]
 80019e8:	f042 0201 	orrpl.w	r2, r2, #1
 80019ec:	619a      	strpl	r2, [r3, #24]
 80019ee:	4770      	bx	lr

080019f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80019f0:	b530      	push	{r4, r5, lr}
 80019f2:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80019f4:	6805      	ldr	r5, [r0, #0]
 80019f6:	4323      	orrs	r3, r4
 80019f8:	0d64      	lsrs	r4, r4, #21
 80019fa:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 80019fe:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8001a02:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8001a06:	6868      	ldr	r0, [r5, #4]
 8001a08:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001a0c:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8001a10:	4319      	orrs	r1, r3
 8001a12:	f044 0403 	orr.w	r4, r4, #3
 8001a16:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001a1a:	ea20 0404 	bic.w	r4, r0, r4
 8001a1e:	4321      	orrs	r1, r4
 8001a20:	6069      	str	r1, [r5, #4]
 8001a22:	bd30      	pop	{r4, r5, pc}

08001a24 <I2C_WaitOnFlagUntilTimeout>:
{
 8001a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a28:	9f06      	ldr	r7, [sp, #24]
 8001a2a:	4604      	mov	r4, r0
 8001a2c:	4688      	mov	r8, r1
 8001a2e:	4616      	mov	r6, r2
 8001a30:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a32:	6822      	ldr	r2, [r4, #0]
 8001a34:	6993      	ldr	r3, [r2, #24]
 8001a36:	ea38 0303 	bics.w	r3, r8, r3
 8001a3a:	bf0c      	ite	eq
 8001a3c:	2301      	moveq	r3, #1
 8001a3e:	2300      	movne	r3, #0
 8001a40:	42b3      	cmp	r3, r6
 8001a42:	d002      	beq.n	8001a4a <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8001a44:	2000      	movs	r0, #0
}
 8001a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001a4a:	1c6b      	adds	r3, r5, #1
 8001a4c:	d0f2      	beq.n	8001a34 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a4e:	f7ff fdb1 	bl	80015b4 <HAL_GetTick>
 8001a52:	1bc0      	subs	r0, r0, r7
 8001a54:	4285      	cmp	r5, r0
 8001a56:	d301      	bcc.n	8001a5c <I2C_WaitOnFlagUntilTimeout+0x38>
 8001a58:	2d00      	cmp	r5, #0
 8001a5a:	d1ea      	bne.n	8001a32 <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a5c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a5e:	f043 0320 	orr.w	r3, r3, #32
 8001a62:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001a64:	2320      	movs	r3, #32
 8001a66:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001a70:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001a74:	2001      	movs	r0, #1
 8001a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001a7a <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a7a:	6803      	ldr	r3, [r0, #0]
{
 8001a7c:	b570      	push	{r4, r5, r6, lr}
 8001a7e:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a80:	6998      	ldr	r0, [r3, #24]
 8001a82:	f010 0010 	ands.w	r0, r0, #16
{
 8001a86:	460d      	mov	r5, r1
 8001a88:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a8a:	d116      	bne.n	8001aba <I2C_IsAcknowledgeFailed+0x40>
 8001a8c:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8001a8e:	1c69      	adds	r1, r5, #1
 8001a90:	d014      	beq.n	8001abc <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a92:	f7ff fd8f 	bl	80015b4 <HAL_GetTick>
 8001a96:	1b80      	subs	r0, r0, r6
 8001a98:	4285      	cmp	r5, r0
 8001a9a:	d300      	bcc.n	8001a9e <I2C_IsAcknowledgeFailed+0x24>
 8001a9c:	b96d      	cbnz	r5, 8001aba <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001aa0:	f043 0320 	orr.w	r3, r3, #32
 8001aa4:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001aa6:	2320      	movs	r3, #32
 8001aa8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aac:	2300      	movs	r3, #0
 8001aae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001ab2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8001ab6:	2001      	movs	r0, #1
}
 8001ab8:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001aba:	6823      	ldr	r3, [r4, #0]
 8001abc:	6999      	ldr	r1, [r3, #24]
 8001abe:	068a      	lsls	r2, r1, #26
 8001ac0:	d5e5      	bpl.n	8001a8e <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ac2:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ac4:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ac6:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001ac8:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001aca:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001acc:	f7ff ff82 	bl	80019d4 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001ad0:	6822      	ldr	r2, [r4, #0]
 8001ad2:	6853      	ldr	r3, [r2, #4]
 8001ad4:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001ad8:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001adc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001ae0:	f023 0301 	bic.w	r3, r3, #1
 8001ae4:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ae6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001ae8:	f043 0304 	orr.w	r3, r3, #4
 8001aec:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001aee:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8001af2:	e7db      	b.n	8001aac <I2C_IsAcknowledgeFailed+0x32>

08001af4 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001af4:	b570      	push	{r4, r5, r6, lr}
 8001af6:	4604      	mov	r4, r0
 8001af8:	460d      	mov	r5, r1
 8001afa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001afc:	6823      	ldr	r3, [r4, #0]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	079b      	lsls	r3, r3, #30
 8001b02:	d501      	bpl.n	8001b08 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8001b04:	2000      	movs	r0, #0
 8001b06:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b08:	4632      	mov	r2, r6
 8001b0a:	4629      	mov	r1, r5
 8001b0c:	4620      	mov	r0, r4
 8001b0e:	f7ff ffb4 	bl	8001a7a <I2C_IsAcknowledgeFailed>
 8001b12:	b9a0      	cbnz	r0, 8001b3e <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8001b14:	1c6a      	adds	r2, r5, #1
 8001b16:	d0f1      	beq.n	8001afc <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b18:	f7ff fd4c 	bl	80015b4 <HAL_GetTick>
 8001b1c:	1b80      	subs	r0, r0, r6
 8001b1e:	4285      	cmp	r5, r0
 8001b20:	d301      	bcc.n	8001b26 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8001b22:	2d00      	cmp	r5, #0
 8001b24:	d1ea      	bne.n	8001afc <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b26:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b28:	f043 0320 	orr.w	r3, r3, #32
 8001b2c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001b2e:	2320      	movs	r3, #32
 8001b30:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b34:	2300      	movs	r3, #0
 8001b36:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001b3a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001b3e:	2001      	movs	r0, #1
}
 8001b40:	bd70      	pop	{r4, r5, r6, pc}
	...

08001b44 <I2C_RequestMemoryWrite>:
{
 8001b44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001b46:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001b48:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001b4a:	4b16      	ldr	r3, [pc, #88]	; (8001ba4 <I2C_RequestMemoryWrite+0x60>)
 8001b4c:	9300      	str	r3, [sp, #0]
{
 8001b4e:	4605      	mov	r5, r0
 8001b50:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001b52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b56:	b2fa      	uxtb	r2, r7
 8001b58:	f7ff ff4a 	bl	80019f0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b5c:	4632      	mov	r2, r6
 8001b5e:	9908      	ldr	r1, [sp, #32]
 8001b60:	4628      	mov	r0, r5
 8001b62:	f7ff ffc7 	bl	8001af4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b66:	b110      	cbz	r0, 8001b6e <I2C_RequestMemoryWrite+0x2a>
    return HAL_ERROR;
 8001b68:	2001      	movs	r0, #1
}
 8001b6a:	b003      	add	sp, #12
 8001b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b6e:	2f01      	cmp	r7, #1
 8001b70:	682b      	ldr	r3, [r5, #0]
 8001b72:	d10c      	bne.n	8001b8e <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b74:	b2e4      	uxtb	r4, r4
 8001b76:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001b78:	9b08      	ldr	r3, [sp, #32]
 8001b7a:	9600      	str	r6, [sp, #0]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2180      	movs	r1, #128	; 0x80
 8001b80:	4628      	mov	r0, r5
 8001b82:	f7ff ff4f 	bl	8001a24 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8001b86:	3000      	adds	r0, #0
 8001b88:	bf18      	it	ne
 8001b8a:	2001      	movne	r0, #1
 8001b8c:	e7ed      	b.n	8001b6a <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001b8e:	0a22      	lsrs	r2, r4, #8
 8001b90:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b92:	9908      	ldr	r1, [sp, #32]
 8001b94:	4632      	mov	r2, r6
 8001b96:	4628      	mov	r0, r5
 8001b98:	f7ff ffac 	bl	8001af4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b9c:	2800      	cmp	r0, #0
 8001b9e:	d1e3      	bne.n	8001b68 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ba0:	682b      	ldr	r3, [r5, #0]
 8001ba2:	e7e7      	b.n	8001b74 <I2C_RequestMemoryWrite+0x30>
 8001ba4:	80002000 	.word	0x80002000

08001ba8 <I2C_RequestMemoryRead>:
{
 8001ba8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001baa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001bac:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001bae:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <I2C_RequestMemoryRead+0x60>)
 8001bb0:	9300      	str	r3, [sp, #0]
{
 8001bb2:	4605      	mov	r5, r0
 8001bb4:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	b2fa      	uxtb	r2, r7
 8001bba:	f7ff ff19 	bl	80019f0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bbe:	4632      	mov	r2, r6
 8001bc0:	9908      	ldr	r1, [sp, #32]
 8001bc2:	4628      	mov	r0, r5
 8001bc4:	f7ff ff96 	bl	8001af4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001bc8:	b110      	cbz	r0, 8001bd0 <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 8001bca:	2001      	movs	r0, #1
}
 8001bcc:	b003      	add	sp, #12
 8001bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001bd0:	2f01      	cmp	r7, #1
 8001bd2:	682b      	ldr	r3, [r5, #0]
 8001bd4:	d10c      	bne.n	8001bf0 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001bd6:	b2e4      	uxtb	r4, r4
 8001bd8:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001bda:	9b08      	ldr	r3, [sp, #32]
 8001bdc:	9600      	str	r6, [sp, #0]
 8001bde:	2200      	movs	r2, #0
 8001be0:	2140      	movs	r1, #64	; 0x40
 8001be2:	4628      	mov	r0, r5
 8001be4:	f7ff ff1e 	bl	8001a24 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8001be8:	3000      	adds	r0, #0
 8001bea:	bf18      	it	ne
 8001bec:	2001      	movne	r0, #1
 8001bee:	e7ed      	b.n	8001bcc <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001bf0:	0a22      	lsrs	r2, r4, #8
 8001bf2:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bf4:	9908      	ldr	r1, [sp, #32]
 8001bf6:	4632      	mov	r2, r6
 8001bf8:	4628      	mov	r0, r5
 8001bfa:	f7ff ff7b 	bl	8001af4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001bfe:	2800      	cmp	r0, #0
 8001c00:	d1e3      	bne.n	8001bca <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c02:	682b      	ldr	r3, [r5, #0]
 8001c04:	e7e7      	b.n	8001bd6 <I2C_RequestMemoryRead+0x2e>
 8001c06:	bf00      	nop
 8001c08:	80002000 	.word	0x80002000

08001c0c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001c0c:	b570      	push	{r4, r5, r6, lr}
 8001c0e:	4604      	mov	r4, r0
 8001c10:	460d      	mov	r5, r1
 8001c12:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c14:	6823      	ldr	r3, [r4, #0]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	069b      	lsls	r3, r3, #26
 8001c1a:	d501      	bpl.n	8001c20 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c20:	4632      	mov	r2, r6
 8001c22:	4629      	mov	r1, r5
 8001c24:	4620      	mov	r0, r4
 8001c26:	f7ff ff28 	bl	8001a7a <I2C_IsAcknowledgeFailed>
 8001c2a:	b990      	cbnz	r0, 8001c52 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c2c:	f7ff fcc2 	bl	80015b4 <HAL_GetTick>
 8001c30:	1b80      	subs	r0, r0, r6
 8001c32:	4285      	cmp	r5, r0
 8001c34:	d301      	bcc.n	8001c3a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8001c36:	2d00      	cmp	r5, #0
 8001c38:	d1ec      	bne.n	8001c14 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c3a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c3c:	f043 0320 	orr.w	r3, r3, #32
 8001c40:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c42:	2320      	movs	r3, #32
 8001c44:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001c4e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001c52:	2001      	movs	r0, #1
}
 8001c54:	bd70      	pop	{r4, r5, r6, pc}

08001c56 <HAL_I2C_MspInit>:
 8001c56:	4770      	bx	lr

08001c58 <HAL_I2C_Init>:
{
 8001c58:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8001c5a:	4604      	mov	r4, r0
 8001c5c:	2800      	cmp	r0, #0
 8001c5e:	d04a      	beq.n	8001cf6 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c60:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001c64:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c68:	b91b      	cbnz	r3, 8001c72 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8001c6a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001c6e:	f7ff fff2 	bl	8001c56 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c72:	2324      	movs	r3, #36	; 0x24
 8001c74:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001c78:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c7a:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	f022 0201 	bic.w	r2, r2, #1
 8001c82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c84:	6862      	ldr	r2, [r4, #4]
 8001c86:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c8a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c8c:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c8e:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c94:	609a      	str	r2, [r3, #8]
 8001c96:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c98:	d124      	bne.n	8001ce4 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c9e:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ca0:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001ca2:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ca4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001ca8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cac:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001cae:	68da      	ldr	r2, [r3, #12]
 8001cb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cb4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001cb6:	6922      	ldr	r2, [r4, #16]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	69a1      	ldr	r1, [r4, #24]
 8001cbc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001cc0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001cc2:	6a21      	ldr	r1, [r4, #32]
 8001cc4:	69e2      	ldr	r2, [r4, #28]
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	f042 0201 	orr.w	r2, r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cd2:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001cd4:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cd6:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001cd8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cdc:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cde:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8001ce2:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ce4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ce8:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cea:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001cec:	bf04      	itt	eq
 8001cee:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8001cf2:	605a      	streq	r2, [r3, #4]
 8001cf4:	e7d4      	b.n	8001ca0 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8001cf6:	2001      	movs	r0, #1
}
 8001cf8:	bd10      	pop	{r4, pc}

08001cfa <HAL_I2C_MspDeInit>:
 8001cfa:	4770      	bx	lr

08001cfc <HAL_I2C_DeInit>:
{
 8001cfc:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8001cfe:	4604      	mov	r4, r0
 8001d00:	b198      	cbz	r0, 8001d2a <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8001d02:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d04:	2324      	movs	r3, #36	; 0x24
 8001d06:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001d0a:	6813      	ldr	r3, [r2, #0]
 8001d0c:	f023 0301 	bic.w	r3, r3, #1
 8001d10:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8001d12:	f7ff fff2 	bl	8001cfa <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d16:	2000      	movs	r0, #0
 8001d18:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8001d1a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8001d1e:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d22:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d24:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8001d28:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001d2a:	2001      	movs	r0, #1
}
 8001d2c:	bd10      	pop	{r4, pc}

08001d2e <HAL_I2C_Mem_Write>:
{
 8001d2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d32:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d34:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8001d38:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d3a:	2b20      	cmp	r3, #32
{
 8001d3c:	4604      	mov	r4, r0
 8001d3e:	460f      	mov	r7, r1
 8001d40:	9203      	str	r2, [sp, #12]
 8001d42:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8001d46:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d4a:	f040 80a5 	bne.w	8001e98 <HAL_I2C_Mem_Write+0x16a>
    if ((pData == NULL) || (Size == 0U))
 8001d4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001d50:	b113      	cbz	r3, 8001d58 <HAL_I2C_Mem_Write+0x2a>
 8001d52:	f1ba 0f00 	cmp.w	sl, #0
 8001d56:	d106      	bne.n	8001d66 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001d58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d5c:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8001d5e:	2001      	movs	r0, #1
}
 8001d60:	b005      	add	sp, #20
 8001d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8001d66:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	f000 8094 	beq.w	8001e98 <HAL_I2C_Mem_Write+0x16a>
 8001d70:	2501      	movs	r5, #1
 8001d72:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001d76:	f7ff fc1d 	bl	80015b4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d7a:	2319      	movs	r3, #25
 8001d7c:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8001d7e:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d80:	462a      	mov	r2, r5
 8001d82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d86:	4620      	mov	r0, r4
 8001d88:	f7ff fe4c 	bl	8001a24 <I2C_WaitOnFlagUntilTimeout>
 8001d8c:	4681      	mov	r9, r0
 8001d8e:	2800      	cmp	r0, #0
 8001d90:	d1e5      	bne.n	8001d5e <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d92:	2321      	movs	r3, #33	; 0x21
 8001d94:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d98:	2340      	movs	r3, #64	; 0x40
 8001d9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8001d9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001da0:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001da2:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8001da4:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8001da6:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001daa:	9601      	str	r6, [sp, #4]
 8001dac:	f8cd 8000 	str.w	r8, [sp]
 8001db0:	465b      	mov	r3, fp
 8001db2:	9a03      	ldr	r2, [sp, #12]
 8001db4:	4639      	mov	r1, r7
 8001db6:	4620      	mov	r0, r4
 8001db8:	f7ff fec4 	bl	8001b44 <I2C_RequestMemoryWrite>
 8001dbc:	b110      	cbz	r0, 8001dc4 <HAL_I2C_Mem_Write+0x96>
      __HAL_UNLOCK(hi2c);
 8001dbe:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8001dc2:	e7cc      	b.n	8001d5e <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dc4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	2bff      	cmp	r3, #255	; 0xff
 8001dca:	d955      	bls.n	8001e78 <HAL_I2C_Mem_Write+0x14a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dcc:	22ff      	movs	r2, #255	; 0xff
 8001dce:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001dd0:	9000      	str	r0, [sp, #0]
 8001dd2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001dd6:	4639      	mov	r1, r7
 8001dd8:	4620      	mov	r0, r4
 8001dda:	f7ff fe09 	bl	80019f0 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dde:	4632      	mov	r2, r6
 8001de0:	4641      	mov	r1, r8
 8001de2:	4620      	mov	r0, r4
 8001de4:	f7ff fe86 	bl	8001af4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001de8:	2800      	cmp	r0, #0
 8001dea:	d1b8      	bne.n	8001d5e <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001dec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001dee:	6822      	ldr	r2, [r4, #0]
 8001df0:	f813 1b01 	ldrb.w	r1, [r3], #1
 8001df4:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001df6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001df8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001dfa:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e02:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001e04:	3a01      	subs	r2, #1
 8001e06:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e08:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001e0a:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e0c:	b1ab      	cbz	r3, 8001e3a <HAL_I2C_Mem_Write+0x10c>
 8001e0e:	b9a2      	cbnz	r2, 8001e3a <HAL_I2C_Mem_Write+0x10c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e10:	9600      	str	r6, [sp, #0]
 8001e12:	4643      	mov	r3, r8
 8001e14:	2180      	movs	r1, #128	; 0x80
 8001e16:	4620      	mov	r0, r4
 8001e18:	f7ff fe04 	bl	8001a24 <I2C_WaitOnFlagUntilTimeout>
 8001e1c:	2800      	cmp	r0, #0
 8001e1e:	d19e      	bne.n	8001d5e <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e20:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	2bff      	cmp	r3, #255	; 0xff
 8001e26:	d92f      	bls.n	8001e88 <HAL_I2C_Mem_Write+0x15a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e28:	22ff      	movs	r2, #255	; 0xff
 8001e2a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001e2c:	9000      	str	r0, [sp, #0]
 8001e2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e32:	4639      	mov	r1, r7
 8001e34:	4620      	mov	r0, r4
 8001e36:	f7ff fddb 	bl	80019f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8001e3a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1cd      	bne.n	8001dde <HAL_I2C_Mem_Write+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e42:	4632      	mov	r2, r6
 8001e44:	4641      	mov	r1, r8
 8001e46:	4620      	mov	r0, r4
 8001e48:	f7ff fee0 	bl	8001c0c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e4c:	2800      	cmp	r0, #0
 8001e4e:	d186      	bne.n	8001d5e <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e50:	6823      	ldr	r3, [r4, #0]
 8001e52:	2120      	movs	r1, #32
 8001e54:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001e5c:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001e60:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001e64:	f022 0201 	bic.w	r2, r2, #1
 8001e68:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001e6a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001e6e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e72:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001e76:	e773      	b.n	8001d60 <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8001e78:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e7a:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8001e7c:	b292      	uxth	r2, r2
 8001e7e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	e7a6      	b.n	8001dd6 <HAL_I2C_Mem_Write+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 8001e88:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e8a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001e8c:	b292      	uxth	r2, r2
 8001e8e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	e7cc      	b.n	8001e32 <HAL_I2C_Mem_Write+0x104>
    return HAL_BUSY;
 8001e98:	2002      	movs	r0, #2
 8001e9a:	e761      	b.n	8001d60 <HAL_I2C_Mem_Write+0x32>

08001e9c <HAL_I2C_Mem_Read>:
{
 8001e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ea0:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ea2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8001ea6:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ea8:	2b20      	cmp	r3, #32
{
 8001eaa:	4604      	mov	r4, r0
 8001eac:	460f      	mov	r7, r1
 8001eae:	9203      	str	r2, [sp, #12]
 8001eb0:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8001eb4:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eb8:	f040 80a9 	bne.w	800200e <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 8001ebc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001ebe:	b113      	cbz	r3, 8001ec6 <HAL_I2C_Mem_Read+0x2a>
 8001ec0:	f1ba 0f00 	cmp.w	sl, #0
 8001ec4:	d106      	bne.n	8001ed4 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ec6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eca:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8001ecc:	2001      	movs	r0, #1
}
 8001ece:	b005      	add	sp, #20
 8001ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8001ed4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	f000 8098 	beq.w	800200e <HAL_I2C_Mem_Read+0x172>
 8001ede:	2501      	movs	r5, #1
 8001ee0:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001ee4:	f7ff fb66 	bl	80015b4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ee8:	2319      	movs	r3, #25
 8001eea:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8001eec:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001eee:	462a      	mov	r2, r5
 8001ef0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	f7ff fd95 	bl	8001a24 <I2C_WaitOnFlagUntilTimeout>
 8001efa:	4681      	mov	r9, r0
 8001efc:	2800      	cmp	r0, #0
 8001efe:	d1e5      	bne.n	8001ecc <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f00:	2322      	movs	r3, #34	; 0x22
 8001f02:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f06:	2340      	movs	r3, #64	; 0x40
 8001f08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8001f0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f0e:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001f10:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8001f12:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8001f14:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f18:	9601      	str	r6, [sp, #4]
 8001f1a:	f8cd 8000 	str.w	r8, [sp]
 8001f1e:	465b      	mov	r3, fp
 8001f20:	9a03      	ldr	r2, [sp, #12]
 8001f22:	4639      	mov	r1, r7
 8001f24:	4620      	mov	r0, r4
 8001f26:	f7ff fe3f 	bl	8001ba8 <I2C_RequestMemoryRead>
 8001f2a:	b110      	cbz	r0, 8001f32 <HAL_I2C_Mem_Read+0x96>
      __HAL_UNLOCK(hi2c);
 8001f2c:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8001f30:	e7cc      	b.n	8001ecc <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f32:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	2bff      	cmp	r3, #255	; 0xff
 8001f38:	4b36      	ldr	r3, [pc, #216]	; (8002014 <HAL_I2C_Mem_Read+0x178>)
 8001f3a:	d958      	bls.n	8001fee <HAL_I2C_Mem_Read+0x152>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f3c:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001f3e:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f40:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001f42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001f46:	4639      	mov	r1, r7
 8001f48:	4620      	mov	r0, r4
 8001f4a:	f7ff fd51 	bl	80019f0 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001f4e:	9600      	str	r6, [sp, #0]
 8001f50:	4643      	mov	r3, r8
 8001f52:	2200      	movs	r2, #0
 8001f54:	2104      	movs	r1, #4
 8001f56:	4620      	mov	r0, r4
 8001f58:	f7ff fd64 	bl	8001a24 <I2C_WaitOnFlagUntilTimeout>
 8001f5c:	2800      	cmp	r0, #0
 8001f5e:	d1b5      	bne.n	8001ecc <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f60:	6822      	ldr	r2, [r4, #0]
 8001f62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f66:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001f68:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001f6a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001f70:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f72:	3b01      	subs	r3, #1
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f78:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001f7a:	3a01      	subs	r2, #1
 8001f7c:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f7e:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001f80:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f82:	b1ab      	cbz	r3, 8001fb0 <HAL_I2C_Mem_Read+0x114>
 8001f84:	b9a2      	cbnz	r2, 8001fb0 <HAL_I2C_Mem_Read+0x114>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f86:	9600      	str	r6, [sp, #0]
 8001f88:	4643      	mov	r3, r8
 8001f8a:	2180      	movs	r1, #128	; 0x80
 8001f8c:	4620      	mov	r0, r4
 8001f8e:	f7ff fd49 	bl	8001a24 <I2C_WaitOnFlagUntilTimeout>
 8001f92:	2800      	cmp	r0, #0
 8001f94:	d19a      	bne.n	8001ecc <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f96:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	2bff      	cmp	r3, #255	; 0xff
 8001f9c:	d92f      	bls.n	8001ffe <HAL_I2C_Mem_Read+0x162>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f9e:	22ff      	movs	r2, #255	; 0xff
 8001fa0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001fa2:	9000      	str	r0, [sp, #0]
 8001fa4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001fa8:	4639      	mov	r1, r7
 8001faa:	4620      	mov	r0, r4
 8001fac:	f7ff fd20 	bl	80019f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8001fb0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1ca      	bne.n	8001f4e <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fb8:	4632      	mov	r2, r6
 8001fba:	4641      	mov	r1, r8
 8001fbc:	4620      	mov	r0, r4
 8001fbe:	f7ff fe25 	bl	8001c0c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001fc2:	2800      	cmp	r0, #0
 8001fc4:	d182      	bne.n	8001ecc <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fc6:	6823      	ldr	r3, [r4, #0]
 8001fc8:	2120      	movs	r1, #32
 8001fca:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001fd2:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001fd6:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001fda:	f022 0201 	bic.w	r2, r2, #1
 8001fde:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001fe0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001fe4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001fe8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001fec:	e76f      	b.n	8001ece <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8001fee:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001ff0:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8001ff2:	b292      	uxth	r2, r2
 8001ff4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001ff6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	e7a3      	b.n	8001f46 <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 8001ffe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002000:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8002002:	b292      	uxth	r2, r2
 8002004:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002006:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	e7cc      	b.n	8001fa8 <HAL_I2C_Mem_Read+0x10c>
    return HAL_BUSY;
 800200e:	2002      	movs	r0, #2
 8002010:	e75d      	b.n	8001ece <HAL_I2C_Mem_Read+0x32>
 8002012:	bf00      	nop
 8002014:	80002400 	.word	0x80002400

08002018 <HAL_I2C_IsDeviceReady>:
{
 8002018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800201c:	461d      	mov	r5, r3
  __IO uint32_t I2C_Trials = 0UL;
 800201e:	2300      	movs	r3, #0
 8002020:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002022:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002026:	2b20      	cmp	r3, #32
{
 8002028:	4604      	mov	r4, r0
 800202a:	4690      	mov	r8, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800202c:	d17d      	bne.n	800212a <HAL_I2C_IsDeviceReady+0x112>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800202e:	6803      	ldr	r3, [r0, #0]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
 8002036:	d178      	bne.n	800212a <HAL_I2C_IsDeviceReady+0x112>
    __HAL_LOCK(hi2c);
 8002038:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800203c:	2a01      	cmp	r2, #1
 800203e:	d074      	beq.n	800212a <HAL_I2C_IsDeviceReady+0x112>
 8002040:	2201      	movs	r2, #1
 8002042:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
 8002046:	f3c1 0609 	ubfx	r6, r1, #0, #10
    hi2c->State = HAL_I2C_STATE_BUSY;
 800204a:	2224      	movs	r2, #36	; 0x24
 800204c:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002050:	f446 5920 	orr.w	r9, r6, #10240	; 0x2800
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002054:	6443      	str	r3, [r0, #68]	; 0x44
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002056:	68e3      	ldr	r3, [r4, #12]
 8002058:	6822      	ldr	r2, [r4, #0]
 800205a:	2b01      	cmp	r3, #1
 800205c:	bf06      	itte	eq
 800205e:	f046 7300 	orreq.w	r3, r6, #33554432	; 0x2000000
 8002062:	f443 5300 	orreq.w	r3, r3, #8192	; 0x2000
 8002066:	464b      	movne	r3, r9
 8002068:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 800206a:	f7ff faa3 	bl	80015b4 <HAL_GetTick>
 800206e:	4607      	mov	r7, r0
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002070:	6823      	ldr	r3, [r4, #0]
 8002072:	699a      	ldr	r2, [r3, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002074:	699b      	ldr	r3, [r3, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002076:	f3c2 1240 	ubfx	r2, r2, #5, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800207a:	f3c3 1300 	ubfx	r3, r3, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800207e:	b902      	cbnz	r2, 8002082 <HAL_I2C_IsDeviceReady+0x6a>
 8002080:	b16b      	cbz	r3, 800209e <HAL_I2C_IsDeviceReady+0x86>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002082:	6823      	ldr	r3, [r4, #0]
 8002084:	699a      	ldr	r2, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002086:	9700      	str	r7, [sp, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002088:	f012 0210 	ands.w	r2, r2, #16
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800208c:	462b      	mov	r3, r5
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800208e:	d124      	bne.n	80020da <HAL_I2C_IsDeviceReady+0xc2>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002090:	2120      	movs	r1, #32
 8002092:	4620      	mov	r0, r4
 8002094:	f7ff fcc6 	bl	8001a24 <I2C_WaitOnFlagUntilTimeout>
 8002098:	b1a8      	cbz	r0, 80020c6 <HAL_I2C_IsDeviceReady+0xae>
    return HAL_ERROR;
 800209a:	2001      	movs	r0, #1
 800209c:	e01a      	b.n	80020d4 <HAL_I2C_IsDeviceReady+0xbc>
        if (Timeout != HAL_MAX_DELAY)
 800209e:	1c6b      	adds	r3, r5, #1
 80020a0:	d0e6      	beq.n	8002070 <HAL_I2C_IsDeviceReady+0x58>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80020a2:	f7ff fa87 	bl	80015b4 <HAL_GetTick>
 80020a6:	1bc0      	subs	r0, r0, r7
 80020a8:	4285      	cmp	r5, r0
 80020aa:	d301      	bcc.n	80020b0 <HAL_I2C_IsDeviceReady+0x98>
 80020ac:	2d00      	cmp	r5, #0
 80020ae:	d1df      	bne.n	8002070 <HAL_I2C_IsDeviceReady+0x58>
    hi2c->State = HAL_I2C_STATE_READY;
 80020b0:	2320      	movs	r3, #32
 80020b2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80020b8:	f043 0320 	orr.w	r3, r3, #32
 80020bc:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 80020be:	2300      	movs	r3, #0
 80020c0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80020c4:	e7e9      	b.n	800209a <HAL_I2C_IsDeviceReady+0x82>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020c6:	6822      	ldr	r2, [r4, #0]
 80020c8:	2320      	movs	r3, #32
 80020ca:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 80020cc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 80020d0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80020d4:	b004      	add	sp, #16
 80020d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80020da:	2200      	movs	r2, #0
 80020dc:	2120      	movs	r1, #32
 80020de:	4620      	mov	r0, r4
 80020e0:	f7ff fca0 	bl	8001a24 <I2C_WaitOnFlagUntilTimeout>
 80020e4:	4602      	mov	r2, r0
 80020e6:	2800      	cmp	r0, #0
 80020e8:	d1d7      	bne.n	800209a <HAL_I2C_IsDeviceReady+0x82>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020ea:	6823      	ldr	r3, [r4, #0]
 80020ec:	2110      	movs	r1, #16
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020ee:	f04f 0a20 	mov.w	sl, #32
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020f2:	61d9      	str	r1, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020f4:	f8c3 a01c 	str.w	sl, [r3, #28]
      if (I2C_Trials == Trials)
 80020f8:	9903      	ldr	r1, [sp, #12]
 80020fa:	4541      	cmp	r1, r8
 80020fc:	d10e      	bne.n	800211c <HAL_I2C_IsDeviceReady+0x104>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80020fe:	6859      	ldr	r1, [r3, #4]
 8002100:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002104:	6059      	str	r1, [r3, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002106:	4620      	mov	r0, r4
 8002108:	9700      	str	r7, [sp, #0]
 800210a:	462b      	mov	r3, r5
 800210c:	4651      	mov	r1, sl
 800210e:	f7ff fc89 	bl	8001a24 <I2C_WaitOnFlagUntilTimeout>
 8002112:	2800      	cmp	r0, #0
 8002114:	d1c1      	bne.n	800209a <HAL_I2C_IsDeviceReady+0x82>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002116:	6823      	ldr	r3, [r4, #0]
 8002118:	f8c3 a01c 	str.w	sl, [r3, #28]
      I2C_Trials++;
 800211c:	9b03      	ldr	r3, [sp, #12]
 800211e:	3301      	adds	r3, #1
 8002120:	9303      	str	r3, [sp, #12]
    while (I2C_Trials < Trials);
 8002122:	9b03      	ldr	r3, [sp, #12]
 8002124:	4598      	cmp	r8, r3
 8002126:	d896      	bhi.n	8002056 <HAL_I2C_IsDeviceReady+0x3e>
 8002128:	e7c2      	b.n	80020b0 <HAL_I2C_IsDeviceReady+0x98>
    return HAL_BUSY;
 800212a:	2002      	movs	r0, #2
 800212c:	e7d2      	b.n	80020d4 <HAL_I2C_IsDeviceReady+0xbc>

0800212e <HAL_I2C_GetState>:
  return hi2c->State;
 800212e:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8002132:	4770      	bx	lr

08002134 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002134:	4b02      	ldr	r3, [pc, #8]	; (8002140 <HAL_PWREx_GetVoltageRange+0xc>)
 8002136:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002138:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	40007000 	.word	0x40007000

08002144 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002144:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002146:	4d1e      	ldr	r5, [pc, #120]	; (80021c0 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8002148:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800214a:	00da      	lsls	r2, r3, #3
{
 800214c:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800214e:	d518      	bpl.n	8002182 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002150:	f7ff fff0 	bl	8002134 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002154:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002158:	d123      	bne.n	80021a2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800215a:	2c80      	cmp	r4, #128	; 0x80
 800215c:	d929      	bls.n	80021b2 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800215e:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002160:	bf8c      	ite	hi
 8002162:	2002      	movhi	r0, #2
 8002164:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002166:	4a17      	ldr	r2, [pc, #92]	; (80021c4 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8002168:	6813      	ldr	r3, [r2, #0]
 800216a:	f023 0307 	bic.w	r3, r3, #7
 800216e:	4303      	orrs	r3, r0
 8002170:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002172:	6813      	ldr	r3, [r2, #0]
 8002174:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8002178:	1a18      	subs	r0, r3, r0
 800217a:	bf18      	it	ne
 800217c:	2001      	movne	r0, #1
 800217e:	b003      	add	sp, #12
 8002180:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8002182:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002188:	65ab      	str	r3, [r5, #88]	; 0x58
 800218a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800218c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002190:	9301      	str	r3, [sp, #4]
 8002192:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002194:	f7ff ffce 	bl	8002134 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002198:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800219a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800219e:	65ab      	str	r3, [r5, #88]	; 0x58
 80021a0:	e7d8      	b.n	8002154 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80021a2:	2c80      	cmp	r4, #128	; 0x80
 80021a4:	d807      	bhi.n	80021b6 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80021a6:	d008      	beq.n	80021ba <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80021a8:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80021ac:	4258      	negs	r0, r3
 80021ae:	4158      	adcs	r0, r3
 80021b0:	e7d9      	b.n	8002166 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021b2:	2000      	movs	r0, #0
 80021b4:	e7d7      	b.n	8002166 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80021b6:	2003      	movs	r0, #3
 80021b8:	e7d5      	b.n	8002166 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80021ba:	2002      	movs	r0, #2
 80021bc:	e7d3      	b.n	8002166 <RCC_SetFlashLatencyFromMSIRange+0x22>
 80021be:	bf00      	nop
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40022000 	.word	0x40022000

080021c8 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021c8:	4b25      	ldr	r3, [pc, #148]	; (8002260 <HAL_RCC_GetSysClockFreq+0x98>)
 80021ca:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021cc:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021ce:	f012 020c 	ands.w	r2, r2, #12
 80021d2:	d005      	beq.n	80021e0 <HAL_RCC_GetSysClockFreq+0x18>
 80021d4:	2a0c      	cmp	r2, #12
 80021d6:	d115      	bne.n	8002204 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021d8:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021dc:	2901      	cmp	r1, #1
 80021de:	d118      	bne.n	8002212 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021e0:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80021e2:	4820      	ldr	r0, [pc, #128]	; (8002264 <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021e4:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021e6:	bf55      	itete	pl
 80021e8:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021ec:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021ee:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021f2:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 80021f6:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021fa:	b382      	cbz	r2, 800225e <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021fc:	2a0c      	cmp	r2, #12
 80021fe:	d009      	beq.n	8002214 <HAL_RCC_GetSysClockFreq+0x4c>
 8002200:	2000      	movs	r0, #0
  return sysclockfreq;
 8002202:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002204:	2a04      	cmp	r2, #4
 8002206:	d029      	beq.n	800225c <HAL_RCC_GetSysClockFreq+0x94>
 8002208:	2a08      	cmp	r2, #8
 800220a:	4817      	ldr	r0, [pc, #92]	; (8002268 <HAL_RCC_GetSysClockFreq+0xa0>)
 800220c:	bf18      	it	ne
 800220e:	2000      	movne	r0, #0
 8002210:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002212:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002214:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002216:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002218:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800221c:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 8002220:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002222:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 8002226:	d005      	beq.n	8002234 <HAL_RCC_GetSysClockFreq+0x6c>
 8002228:	2903      	cmp	r1, #3
 800222a:	d012      	beq.n	8002252 <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800222c:	68d9      	ldr	r1, [r3, #12]
 800222e:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8002232:	e003      	b.n	800223c <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002234:	68d9      	ldr	r1, [r3, #12]
 8002236:	480d      	ldr	r0, [pc, #52]	; (800226c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002238:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800223c:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800223e:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002242:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8002246:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002248:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800224a:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800224c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002250:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002252:	68d9      	ldr	r1, [r3, #12]
 8002254:	4804      	ldr	r0, [pc, #16]	; (8002268 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002256:	f3c1 2106 	ubfx	r1, r1, #8, #7
 800225a:	e7ef      	b.n	800223c <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 800225c:	4803      	ldr	r0, [pc, #12]	; (800226c <HAL_RCC_GetSysClockFreq+0xa4>)
}
 800225e:	4770      	bx	lr
 8002260:	40021000 	.word	0x40021000
 8002264:	08004ac4 	.word	0x08004ac4
 8002268:	007a1200 	.word	0x007a1200
 800226c:	00f42400 	.word	0x00f42400

08002270 <HAL_RCC_OscConfig>:
{
 8002270:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8002274:	4605      	mov	r5, r0
 8002276:	b908      	cbnz	r0, 800227c <HAL_RCC_OscConfig+0xc>
      return HAL_ERROR;
 8002278:	2001      	movs	r0, #1
 800227a:	e046      	b.n	800230a <HAL_RCC_OscConfig+0x9a>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800227c:	4ca8      	ldr	r4, [pc, #672]	; (8002520 <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800227e:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002280:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002282:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002284:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002286:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800228a:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800228e:	d572      	bpl.n	8002376 <HAL_RCC_OscConfig+0x106>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002290:	b11e      	cbz	r6, 800229a <HAL_RCC_OscConfig+0x2a>
 8002292:	2e0c      	cmp	r6, #12
 8002294:	d151      	bne.n	800233a <HAL_RCC_OscConfig+0xca>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002296:	2f01      	cmp	r7, #1
 8002298:	d14f      	bne.n	800233a <HAL_RCC_OscConfig+0xca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800229a:	6823      	ldr	r3, [r4, #0]
 800229c:	0799      	lsls	r1, r3, #30
 800229e:	d502      	bpl.n	80022a6 <HAL_RCC_OscConfig+0x36>
 80022a0:	69ab      	ldr	r3, [r5, #24]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0e8      	beq.n	8002278 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022a6:	6823      	ldr	r3, [r4, #0]
 80022a8:	6a28      	ldr	r0, [r5, #32]
 80022aa:	071a      	lsls	r2, r3, #28
 80022ac:	bf56      	itet	pl
 80022ae:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 80022b2:	6823      	ldrmi	r3, [r4, #0]
 80022b4:	091b      	lsrpl	r3, r3, #4
 80022b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022ba:	4283      	cmp	r3, r0
 80022bc:	d228      	bcs.n	8002310 <HAL_RCC_OscConfig+0xa0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022be:	f7ff ff41 	bl	8002144 <RCC_SetFlashLatencyFromMSIRange>
 80022c2:	2800      	cmp	r0, #0
 80022c4:	d1d8      	bne.n	8002278 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022c6:	6823      	ldr	r3, [r4, #0]
 80022c8:	f043 0308 	orr.w	r3, r3, #8
 80022cc:	6023      	str	r3, [r4, #0]
 80022ce:	6823      	ldr	r3, [r4, #0]
 80022d0:	6a2a      	ldr	r2, [r5, #32]
 80022d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022d6:	4313      	orrs	r3, r2
 80022d8:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022da:	6863      	ldr	r3, [r4, #4]
 80022dc:	69ea      	ldr	r2, [r5, #28]
 80022de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80022e6:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022e8:	f7ff ff6e 	bl	80021c8 <HAL_RCC_GetSysClockFreq>
 80022ec:	68a3      	ldr	r3, [r4, #8]
 80022ee:	4a8d      	ldr	r2, [pc, #564]	; (8002524 <HAL_RCC_OscConfig+0x2b4>)
 80022f0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80022f4:	5cd3      	ldrb	r3, [r2, r3]
 80022f6:	f003 031f 	and.w	r3, r3, #31
 80022fa:	40d8      	lsrs	r0, r3
 80022fc:	4b8a      	ldr	r3, [pc, #552]	; (8002528 <HAL_RCC_OscConfig+0x2b8>)
 80022fe:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8002300:	200f      	movs	r0, #15
 8002302:	f7ff f927 	bl	8001554 <HAL_InitTick>
        if(status != HAL_OK)
 8002306:	2800      	cmp	r0, #0
 8002308:	d035      	beq.n	8002376 <HAL_RCC_OscConfig+0x106>
}
 800230a:	b003      	add	sp, #12
 800230c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002310:	6823      	ldr	r3, [r4, #0]
 8002312:	f043 0308 	orr.w	r3, r3, #8
 8002316:	6023      	str	r3, [r4, #0]
 8002318:	6823      	ldr	r3, [r4, #0]
 800231a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800231e:	4303      	orrs	r3, r0
 8002320:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002322:	6863      	ldr	r3, [r4, #4]
 8002324:	69ea      	ldr	r2, [r5, #28]
 8002326:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800232a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800232e:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002330:	f7ff ff08 	bl	8002144 <RCC_SetFlashLatencyFromMSIRange>
 8002334:	2800      	cmp	r0, #0
 8002336:	d0d7      	beq.n	80022e8 <HAL_RCC_OscConfig+0x78>
 8002338:	e79e      	b.n	8002278 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800233a:	69ab      	ldr	r3, [r5, #24]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d03a      	beq.n	80023b6 <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_MSI_ENABLE();
 8002340:	6823      	ldr	r3, [r4, #0]
 8002342:	f043 0301 	orr.w	r3, r3, #1
 8002346:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002348:	f7ff f934 	bl	80015b4 <HAL_GetTick>
 800234c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800234e:	6823      	ldr	r3, [r4, #0]
 8002350:	079b      	lsls	r3, r3, #30
 8002352:	d528      	bpl.n	80023a6 <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002354:	6823      	ldr	r3, [r4, #0]
 8002356:	f043 0308 	orr.w	r3, r3, #8
 800235a:	6023      	str	r3, [r4, #0]
 800235c:	6823      	ldr	r3, [r4, #0]
 800235e:	6a2a      	ldr	r2, [r5, #32]
 8002360:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002364:	4313      	orrs	r3, r2
 8002366:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002368:	6863      	ldr	r3, [r4, #4]
 800236a:	69ea      	ldr	r2, [r5, #28]
 800236c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002370:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002374:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002376:	682b      	ldr	r3, [r5, #0]
 8002378:	07d9      	lsls	r1, r3, #31
 800237a:	d42d      	bmi.n	80023d8 <HAL_RCC_OscConfig+0x168>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800237c:	682b      	ldr	r3, [r5, #0]
 800237e:	079a      	lsls	r2, r3, #30
 8002380:	d46b      	bmi.n	800245a <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002382:	682b      	ldr	r3, [r5, #0]
 8002384:	0719      	lsls	r1, r3, #28
 8002386:	f100 80a0 	bmi.w	80024ca <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800238a:	682b      	ldr	r3, [r5, #0]
 800238c:	075a      	lsls	r2, r3, #29
 800238e:	f100 80cd 	bmi.w	800252c <HAL_RCC_OscConfig+0x2bc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002392:	682b      	ldr	r3, [r5, #0]
 8002394:	069a      	lsls	r2, r3, #26
 8002396:	f100 8136 	bmi.w	8002606 <HAL_RCC_OscConfig+0x396>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800239a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800239c:	2b00      	cmp	r3, #0
 800239e:	f040 815c 	bne.w	800265a <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 80023a2:	2000      	movs	r0, #0
 80023a4:	e7b1      	b.n	800230a <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023a6:	f7ff f905 	bl	80015b4 <HAL_GetTick>
 80023aa:	eba0 0008 	sub.w	r0, r0, r8
 80023ae:	2802      	cmp	r0, #2
 80023b0:	d9cd      	bls.n	800234e <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
 80023b2:	2003      	movs	r0, #3
 80023b4:	e7a9      	b.n	800230a <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_MSI_DISABLE();
 80023b6:	6823      	ldr	r3, [r4, #0]
 80023b8:	f023 0301 	bic.w	r3, r3, #1
 80023bc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80023be:	f7ff f8f9 	bl	80015b4 <HAL_GetTick>
 80023c2:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023c4:	6823      	ldr	r3, [r4, #0]
 80023c6:	0798      	lsls	r0, r3, #30
 80023c8:	d5d5      	bpl.n	8002376 <HAL_RCC_OscConfig+0x106>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023ca:	f7ff f8f3 	bl	80015b4 <HAL_GetTick>
 80023ce:	eba0 0008 	sub.w	r0, r0, r8
 80023d2:	2802      	cmp	r0, #2
 80023d4:	d9f6      	bls.n	80023c4 <HAL_RCC_OscConfig+0x154>
 80023d6:	e7ec      	b.n	80023b2 <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80023d8:	2e08      	cmp	r6, #8
 80023da:	d003      	beq.n	80023e4 <HAL_RCC_OscConfig+0x174>
 80023dc:	2e0c      	cmp	r6, #12
 80023de:	d108      	bne.n	80023f2 <HAL_RCC_OscConfig+0x182>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 80023e0:	2f03      	cmp	r7, #3
 80023e2:	d106      	bne.n	80023f2 <HAL_RCC_OscConfig+0x182>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e4:	6823      	ldr	r3, [r4, #0]
 80023e6:	039b      	lsls	r3, r3, #14
 80023e8:	d5c8      	bpl.n	800237c <HAL_RCC_OscConfig+0x10c>
 80023ea:	686b      	ldr	r3, [r5, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1c5      	bne.n	800237c <HAL_RCC_OscConfig+0x10c>
 80023f0:	e742      	b.n	8002278 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023f2:	686b      	ldr	r3, [r5, #4]
 80023f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f8:	d110      	bne.n	800241c <HAL_RCC_OscConfig+0x1ac>
 80023fa:	6823      	ldr	r3, [r4, #0]
 80023fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002400:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002402:	f7ff f8d7 	bl	80015b4 <HAL_GetTick>
 8002406:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002408:	6823      	ldr	r3, [r4, #0]
 800240a:	0398      	lsls	r0, r3, #14
 800240c:	d4b6      	bmi.n	800237c <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800240e:	f7ff f8d1 	bl	80015b4 <HAL_GetTick>
 8002412:	eba0 0008 	sub.w	r0, r0, r8
 8002416:	2864      	cmp	r0, #100	; 0x64
 8002418:	d9f6      	bls.n	8002408 <HAL_RCC_OscConfig+0x198>
 800241a:	e7ca      	b.n	80023b2 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800241c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002420:	d104      	bne.n	800242c <HAL_RCC_OscConfig+0x1bc>
 8002422:	6823      	ldr	r3, [r4, #0]
 8002424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002428:	6023      	str	r3, [r4, #0]
 800242a:	e7e6      	b.n	80023fa <HAL_RCC_OscConfig+0x18a>
 800242c:	6822      	ldr	r2, [r4, #0]
 800242e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002432:	6022      	str	r2, [r4, #0]
 8002434:	6822      	ldr	r2, [r4, #0]
 8002436:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800243a:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1e0      	bne.n	8002402 <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 8002440:	f7ff f8b8 	bl	80015b4 <HAL_GetTick>
 8002444:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002446:	6823      	ldr	r3, [r4, #0]
 8002448:	0399      	lsls	r1, r3, #14
 800244a:	d597      	bpl.n	800237c <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800244c:	f7ff f8b2 	bl	80015b4 <HAL_GetTick>
 8002450:	eba0 0008 	sub.w	r0, r0, r8
 8002454:	2864      	cmp	r0, #100	; 0x64
 8002456:	d9f6      	bls.n	8002446 <HAL_RCC_OscConfig+0x1d6>
 8002458:	e7ab      	b.n	80023b2 <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800245a:	2e04      	cmp	r6, #4
 800245c:	d003      	beq.n	8002466 <HAL_RCC_OscConfig+0x1f6>
 800245e:	2e0c      	cmp	r6, #12
 8002460:	d110      	bne.n	8002484 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8002462:	2f02      	cmp	r7, #2
 8002464:	d10e      	bne.n	8002484 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002466:	6823      	ldr	r3, [r4, #0]
 8002468:	055a      	lsls	r2, r3, #21
 800246a:	d503      	bpl.n	8002474 <HAL_RCC_OscConfig+0x204>
 800246c:	68eb      	ldr	r3, [r5, #12]
 800246e:	2b00      	cmp	r3, #0
 8002470:	f43f af02 	beq.w	8002278 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002474:	6863      	ldr	r3, [r4, #4]
 8002476:	692a      	ldr	r2, [r5, #16]
 8002478:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800247c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002480:	6063      	str	r3, [r4, #4]
 8002482:	e77e      	b.n	8002382 <HAL_RCC_OscConfig+0x112>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002484:	68eb      	ldr	r3, [r5, #12]
 8002486:	b17b      	cbz	r3, 80024a8 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8002488:	6823      	ldr	r3, [r4, #0]
 800248a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002490:	f7ff f890 	bl	80015b4 <HAL_GetTick>
 8002494:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002496:	6823      	ldr	r3, [r4, #0]
 8002498:	055b      	lsls	r3, r3, #21
 800249a:	d4eb      	bmi.n	8002474 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800249c:	f7ff f88a 	bl	80015b4 <HAL_GetTick>
 80024a0:	1bc0      	subs	r0, r0, r7
 80024a2:	2802      	cmp	r0, #2
 80024a4:	d9f7      	bls.n	8002496 <HAL_RCC_OscConfig+0x226>
 80024a6:	e784      	b.n	80023b2 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_DISABLE();
 80024a8:	6823      	ldr	r3, [r4, #0]
 80024aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024ae:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80024b0:	f7ff f880 	bl	80015b4 <HAL_GetTick>
 80024b4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024b6:	6823      	ldr	r3, [r4, #0]
 80024b8:	0558      	lsls	r0, r3, #21
 80024ba:	f57f af62 	bpl.w	8002382 <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024be:	f7ff f879 	bl	80015b4 <HAL_GetTick>
 80024c2:	1bc0      	subs	r0, r0, r7
 80024c4:	2802      	cmp	r0, #2
 80024c6:	d9f6      	bls.n	80024b6 <HAL_RCC_OscConfig+0x246>
 80024c8:	e773      	b.n	80023b2 <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024ca:	696b      	ldr	r3, [r5, #20]
 80024cc:	b19b      	cbz	r3, 80024f6 <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 80024ce:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80024da:	f7ff f86b 	bl	80015b4 <HAL_GetTick>
 80024de:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024e0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80024e4:	079b      	lsls	r3, r3, #30
 80024e6:	f53f af50 	bmi.w	800238a <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ea:	f7ff f863 	bl	80015b4 <HAL_GetTick>
 80024ee:	1bc0      	subs	r0, r0, r7
 80024f0:	2802      	cmp	r0, #2
 80024f2:	d9f5      	bls.n	80024e0 <HAL_RCC_OscConfig+0x270>
 80024f4:	e75d      	b.n	80023b2 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_LSI_DISABLE();
 80024f6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80024fa:	f023 0301 	bic.w	r3, r3, #1
 80024fe:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002502:	f7ff f857 	bl	80015b4 <HAL_GetTick>
 8002506:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002508:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800250c:	0798      	lsls	r0, r3, #30
 800250e:	f57f af3c 	bpl.w	800238a <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002512:	f7ff f84f 	bl	80015b4 <HAL_GetTick>
 8002516:	1bc0      	subs	r0, r0, r7
 8002518:	2802      	cmp	r0, #2
 800251a:	d9f5      	bls.n	8002508 <HAL_RCC_OscConfig+0x298>
 800251c:	e749      	b.n	80023b2 <HAL_RCC_OscConfig+0x142>
 800251e:	bf00      	nop
 8002520:	40021000 	.word	0x40021000
 8002524:	08004af4 	.word	0x08004af4
 8002528:	200000c8 	.word	0x200000c8
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800252c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800252e:	00d9      	lsls	r1, r3, #3
 8002530:	d429      	bmi.n	8002586 <HAL_RCC_OscConfig+0x316>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002532:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002538:	65a3      	str	r3, [r4, #88]	; 0x58
 800253a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800253c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002540:	9301      	str	r3, [sp, #4]
 8002542:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002544:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002548:	4f71      	ldr	r7, [pc, #452]	; (8002710 <HAL_RCC_OscConfig+0x4a0>)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	05da      	lsls	r2, r3, #23
 800254e:	d51d      	bpl.n	800258c <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002550:	68ab      	ldr	r3, [r5, #8]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d12b      	bne.n	80025ae <HAL_RCC_OscConfig+0x33e>
 8002556:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800255a:	f043 0301 	orr.w	r3, r3, #1
 800255e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002562:	f7ff f827 	bl	80015b4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002566:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800256a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800256c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002570:	0798      	lsls	r0, r3, #30
 8002572:	d542      	bpl.n	80025fa <HAL_RCC_OscConfig+0x38a>
    if(pwrclkchanged == SET)
 8002574:	f1b8 0f00 	cmp.w	r8, #0
 8002578:	f43f af0b 	beq.w	8002392 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_PWR_CLK_DISABLE();
 800257c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800257e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002582:	65a3      	str	r3, [r4, #88]	; 0x58
 8002584:	e705      	b.n	8002392 <HAL_RCC_OscConfig+0x122>
    FlagStatus       pwrclkchanged = RESET;
 8002586:	f04f 0800 	mov.w	r8, #0
 800258a:	e7dd      	b.n	8002548 <HAL_RCC_OscConfig+0x2d8>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002592:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002594:	f7ff f80e 	bl	80015b4 <HAL_GetTick>
 8002598:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	05db      	lsls	r3, r3, #23
 800259e:	d4d7      	bmi.n	8002550 <HAL_RCC_OscConfig+0x2e0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a0:	f7ff f808 	bl	80015b4 <HAL_GetTick>
 80025a4:	eba0 0009 	sub.w	r0, r0, r9
 80025a8:	2802      	cmp	r0, #2
 80025aa:	d9f6      	bls.n	800259a <HAL_RCC_OscConfig+0x32a>
 80025ac:	e701      	b.n	80023b2 <HAL_RCC_OscConfig+0x142>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025ae:	2b05      	cmp	r3, #5
 80025b0:	d106      	bne.n	80025c0 <HAL_RCC_OscConfig+0x350>
 80025b2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80025b6:	f043 0304 	orr.w	r3, r3, #4
 80025ba:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80025be:	e7ca      	b.n	8002556 <HAL_RCC_OscConfig+0x2e6>
 80025c0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80025c4:	f022 0201 	bic.w	r2, r2, #1
 80025c8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80025cc:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80025d0:	f022 0204 	bic.w	r2, r2, #4
 80025d4:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1c2      	bne.n	8002562 <HAL_RCC_OscConfig+0x2f2>
      tickstart = HAL_GetTick();
 80025dc:	f7fe ffea 	bl	80015b4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e0:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80025e4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025e6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80025ea:	0799      	lsls	r1, r3, #30
 80025ec:	d5c2      	bpl.n	8002574 <HAL_RCC_OscConfig+0x304>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ee:	f7fe ffe1 	bl	80015b4 <HAL_GetTick>
 80025f2:	1bc0      	subs	r0, r0, r7
 80025f4:	4548      	cmp	r0, r9
 80025f6:	d9f6      	bls.n	80025e6 <HAL_RCC_OscConfig+0x376>
 80025f8:	e6db      	b.n	80023b2 <HAL_RCC_OscConfig+0x142>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025fa:	f7fe ffdb 	bl	80015b4 <HAL_GetTick>
 80025fe:	1bc0      	subs	r0, r0, r7
 8002600:	4548      	cmp	r0, r9
 8002602:	d9b3      	bls.n	800256c <HAL_RCC_OscConfig+0x2fc>
 8002604:	e6d5      	b.n	80023b2 <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002606:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002608:	b19b      	cbz	r3, 8002632 <HAL_RCC_OscConfig+0x3c2>
      __HAL_RCC_HSI48_ENABLE();
 800260a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002616:	f7fe ffcd 	bl	80015b4 <HAL_GetTick>
 800261a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800261c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8002620:	079b      	lsls	r3, r3, #30
 8002622:	f53f aeba 	bmi.w	800239a <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002626:	f7fe ffc5 	bl	80015b4 <HAL_GetTick>
 800262a:	1bc0      	subs	r0, r0, r7
 800262c:	2802      	cmp	r0, #2
 800262e:	d9f5      	bls.n	800261c <HAL_RCC_OscConfig+0x3ac>
 8002630:	e6bf      	b.n	80023b2 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSI48_DISABLE();
 8002632:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8002636:	f023 0301 	bic.w	r3, r3, #1
 800263a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 800263e:	f7fe ffb9 	bl	80015b4 <HAL_GetTick>
 8002642:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002644:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8002648:	0798      	lsls	r0, r3, #30
 800264a:	f57f aea6 	bpl.w	800239a <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800264e:	f7fe ffb1 	bl	80015b4 <HAL_GetTick>
 8002652:	1bc0      	subs	r0, r0, r7
 8002654:	2802      	cmp	r0, #2
 8002656:	d9f5      	bls.n	8002644 <HAL_RCC_OscConfig+0x3d4>
 8002658:	e6ab      	b.n	80023b2 <HAL_RCC_OscConfig+0x142>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800265a:	2e0c      	cmp	r6, #12
 800265c:	f43f ae0c 	beq.w	8002278 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002660:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8002662:	6823      	ldr	r3, [r4, #0]
 8002664:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002668:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800266a:	d136      	bne.n	80026da <HAL_RCC_OscConfig+0x46a>
        tickstart = HAL_GetTick();
 800266c:	f7fe ffa2 	bl	80015b4 <HAL_GetTick>
 8002670:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002672:	6823      	ldr	r3, [r4, #0]
 8002674:	0199      	lsls	r1, r3, #6
 8002676:	d42a      	bmi.n	80026ce <HAL_RCC_OscConfig+0x45e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002678:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800267a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800267c:	06db      	lsls	r3, r3, #27
 800267e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002682:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002684:	4313      	orrs	r3, r2
 8002686:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002688:	3a01      	subs	r2, #1
 800268a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800268e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002690:	0852      	lsrs	r2, r2, #1
 8002692:	3a01      	subs	r2, #1
 8002694:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8002698:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800269a:	0852      	lsrs	r2, r2, #1
 800269c:	3a01      	subs	r2, #1
 800269e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80026a2:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80026a4:	6823      	ldr	r3, [r4, #0]
 80026a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026aa:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026ac:	68e3      	ldr	r3, [r4, #12]
 80026ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026b2:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80026b4:	f7fe ff7e 	bl	80015b4 <HAL_GetTick>
 80026b8:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ba:	6823      	ldr	r3, [r4, #0]
 80026bc:	019a      	lsls	r2, r3, #6
 80026be:	f53f ae70 	bmi.w	80023a2 <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c2:	f7fe ff77 	bl	80015b4 <HAL_GetTick>
 80026c6:	1b40      	subs	r0, r0, r5
 80026c8:	2802      	cmp	r0, #2
 80026ca:	d9f6      	bls.n	80026ba <HAL_RCC_OscConfig+0x44a>
 80026cc:	e671      	b.n	80023b2 <HAL_RCC_OscConfig+0x142>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ce:	f7fe ff71 	bl	80015b4 <HAL_GetTick>
 80026d2:	1b80      	subs	r0, r0, r6
 80026d4:	2802      	cmp	r0, #2
 80026d6:	d9cc      	bls.n	8002672 <HAL_RCC_OscConfig+0x402>
 80026d8:	e66b      	b.n	80023b2 <HAL_RCC_OscConfig+0x142>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80026da:	6823      	ldr	r3, [r4, #0]
 80026dc:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80026e0:	bf02      	ittt	eq
 80026e2:	68e3      	ldreq	r3, [r4, #12]
 80026e4:	f023 0303 	biceq.w	r3, r3, #3
 80026e8:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80026ea:	68e3      	ldr	r3, [r4, #12]
 80026ec:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80026f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026f4:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80026f6:	f7fe ff5d 	bl	80015b4 <HAL_GetTick>
 80026fa:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026fc:	6823      	ldr	r3, [r4, #0]
 80026fe:	019b      	lsls	r3, r3, #6
 8002700:	f57f ae4f 	bpl.w	80023a2 <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002704:	f7fe ff56 	bl	80015b4 <HAL_GetTick>
 8002708:	1b40      	subs	r0, r0, r5
 800270a:	2802      	cmp	r0, #2
 800270c:	d9f6      	bls.n	80026fc <HAL_RCC_OscConfig+0x48c>
 800270e:	e650      	b.n	80023b2 <HAL_RCC_OscConfig+0x142>
 8002710:	40007000 	.word	0x40007000

08002714 <HAL_RCC_ClockConfig>:
{
 8002714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002718:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 800271a:	4604      	mov	r4, r0
 800271c:	b910      	cbnz	r0, 8002724 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800271e:	2001      	movs	r0, #1
 8002720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002724:	4a40      	ldr	r2, [pc, #256]	; (8002828 <HAL_RCC_ClockConfig+0x114>)
 8002726:	6813      	ldr	r3, [r2, #0]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	428b      	cmp	r3, r1
 800272e:	d329      	bcc.n	8002784 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002730:	6823      	ldr	r3, [r4, #0]
 8002732:	07d9      	lsls	r1, r3, #31
 8002734:	d431      	bmi.n	800279a <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002736:	6821      	ldr	r1, [r4, #0]
 8002738:	078a      	lsls	r2, r1, #30
 800273a:	d45b      	bmi.n	80027f4 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800273c:	4a3a      	ldr	r2, [pc, #232]	; (8002828 <HAL_RCC_ClockConfig+0x114>)
 800273e:	6813      	ldr	r3, [r2, #0]
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	429e      	cmp	r6, r3
 8002746:	d35d      	bcc.n	8002804 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002748:	f011 0f04 	tst.w	r1, #4
 800274c:	4d37      	ldr	r5, [pc, #220]	; (800282c <HAL_RCC_ClockConfig+0x118>)
 800274e:	d164      	bne.n	800281a <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002750:	070b      	lsls	r3, r1, #28
 8002752:	d506      	bpl.n	8002762 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002754:	68ab      	ldr	r3, [r5, #8]
 8002756:	6922      	ldr	r2, [r4, #16]
 8002758:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800275c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002760:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002762:	f7ff fd31 	bl	80021c8 <HAL_RCC_GetSysClockFreq>
 8002766:	68ab      	ldr	r3, [r5, #8]
 8002768:	4a31      	ldr	r2, [pc, #196]	; (8002830 <HAL_RCC_ClockConfig+0x11c>)
 800276a:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 800276e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002772:	5cd3      	ldrb	r3, [r2, r3]
 8002774:	f003 031f 	and.w	r3, r3, #31
 8002778:	40d8      	lsrs	r0, r3
 800277a:	4b2e      	ldr	r3, [pc, #184]	; (8002834 <HAL_RCC_ClockConfig+0x120>)
 800277c:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 800277e:	200f      	movs	r0, #15
 8002780:	f7fe bee8 	b.w	8001554 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002784:	6813      	ldr	r3, [r2, #0]
 8002786:	f023 0307 	bic.w	r3, r3, #7
 800278a:	430b      	orrs	r3, r1
 800278c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800278e:	6813      	ldr	r3, [r2, #0]
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	4299      	cmp	r1, r3
 8002796:	d1c2      	bne.n	800271e <HAL_RCC_ClockConfig+0xa>
 8002798:	e7ca      	b.n	8002730 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800279a:	6862      	ldr	r2, [r4, #4]
 800279c:	4d23      	ldr	r5, [pc, #140]	; (800282c <HAL_RCC_ClockConfig+0x118>)
 800279e:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027a0:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027a2:	d11b      	bne.n	80027dc <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027a4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027a8:	d0b9      	beq.n	800271e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027aa:	68ab      	ldr	r3, [r5, #8]
 80027ac:	f023 0303 	bic.w	r3, r3, #3
 80027b0:	4313      	orrs	r3, r2
 80027b2:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 80027b4:	f7fe fefe 	bl	80015b4 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80027bc:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027be:	68ab      	ldr	r3, [r5, #8]
 80027c0:	6862      	ldr	r2, [r4, #4]
 80027c2:	f003 030c 	and.w	r3, r3, #12
 80027c6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80027ca:	d0b4      	beq.n	8002736 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027cc:	f7fe fef2 	bl	80015b4 <HAL_GetTick>
 80027d0:	1bc0      	subs	r0, r0, r7
 80027d2:	4540      	cmp	r0, r8
 80027d4:	d9f3      	bls.n	80027be <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 80027d6:	2003      	movs	r0, #3
}
 80027d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027dc:	2a02      	cmp	r2, #2
 80027de:	d102      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027e0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80027e4:	e7e0      	b.n	80027a8 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027e6:	b912      	cbnz	r2, 80027ee <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027e8:	f013 0f02 	tst.w	r3, #2
 80027ec:	e7dc      	b.n	80027a8 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027ee:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80027f2:	e7d9      	b.n	80027a8 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f4:	4a0d      	ldr	r2, [pc, #52]	; (800282c <HAL_RCC_ClockConfig+0x118>)
 80027f6:	68a0      	ldr	r0, [r4, #8]
 80027f8:	6893      	ldr	r3, [r2, #8]
 80027fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027fe:	4303      	orrs	r3, r0
 8002800:	6093      	str	r3, [r2, #8]
 8002802:	e79b      	b.n	800273c <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002804:	6813      	ldr	r3, [r2, #0]
 8002806:	f023 0307 	bic.w	r3, r3, #7
 800280a:	4333      	orrs	r3, r6
 800280c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800280e:	6813      	ldr	r3, [r2, #0]
 8002810:	f003 0307 	and.w	r3, r3, #7
 8002814:	429e      	cmp	r6, r3
 8002816:	d182      	bne.n	800271e <HAL_RCC_ClockConfig+0xa>
 8002818:	e796      	b.n	8002748 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800281a:	68ab      	ldr	r3, [r5, #8]
 800281c:	68e2      	ldr	r2, [r4, #12]
 800281e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002822:	4313      	orrs	r3, r2
 8002824:	60ab      	str	r3, [r5, #8]
 8002826:	e793      	b.n	8002750 <HAL_RCC_ClockConfig+0x3c>
 8002828:	40022000 	.word	0x40022000
 800282c:	40021000 	.word	0x40021000
 8002830:	08004af4 	.word	0x08004af4
 8002834:	200000c8 	.word	0x200000c8

08002838 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002838:	4b05      	ldr	r3, [pc, #20]	; (8002850 <HAL_RCC_GetPCLK1Freq+0x18>)
 800283a:	4a06      	ldr	r2, [pc, #24]	; (8002854 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002842:	5cd3      	ldrb	r3, [r2, r3]
 8002844:	4a04      	ldr	r2, [pc, #16]	; (8002858 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002846:	6810      	ldr	r0, [r2, #0]
 8002848:	f003 031f 	and.w	r3, r3, #31
}
 800284c:	40d8      	lsrs	r0, r3
 800284e:	4770      	bx	lr
 8002850:	40021000 	.word	0x40021000
 8002854:	08004b04 	.word	0x08004b04
 8002858:	200000c8 	.word	0x200000c8

0800285c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800285c:	4b05      	ldr	r3, [pc, #20]	; (8002874 <HAL_RCC_GetPCLK2Freq+0x18>)
 800285e:	4a06      	ldr	r2, [pc, #24]	; (8002878 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002866:	5cd3      	ldrb	r3, [r2, r3]
 8002868:	4a04      	ldr	r2, [pc, #16]	; (800287c <HAL_RCC_GetPCLK2Freq+0x20>)
 800286a:	6810      	ldr	r0, [r2, #0]
 800286c:	f003 031f 	and.w	r3, r3, #31
}
 8002870:	40d8      	lsrs	r0, r3
 8002872:	4770      	bx	lr
 8002874:	40021000 	.word	0x40021000
 8002878:	08004b04 	.word	0x08004b04
 800287c:	200000c8 	.word	0x200000c8

08002880 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002882:	4b44      	ldr	r3, [pc, #272]	; (8002994 <RCCEx_PLLSAI1_Config+0x114>)
 8002884:	68da      	ldr	r2, [r3, #12]
 8002886:	f012 0f03 	tst.w	r2, #3
{
 800288a:	4605      	mov	r5, r0
 800288c:	460e      	mov	r6, r1
 800288e:	461c      	mov	r4, r3
 8002890:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002892:	d039      	beq.n	8002908 <RCCEx_PLLSAI1_Config+0x88>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	f002 0203 	and.w	r2, r2, #3
 800289a:	4282      	cmp	r2, r0
 800289c:	d14b      	bne.n	8002936 <RCCEx_PLLSAI1_Config+0xb6>
       ||
 800289e:	2a00      	cmp	r2, #0
 80028a0:	d049      	beq.n	8002936 <RCCEx_PLLSAI1_Config+0xb6>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80028a2:	68db      	ldr	r3, [r3, #12]
       ||
 80028a4:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80028a6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80028aa:	3301      	adds	r3, #1
       ||
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d142      	bne.n	8002936 <RCCEx_PLLSAI1_Config+0xb6>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80028b0:	6823      	ldr	r3, [r4, #0]
 80028b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028b6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028b8:	f7fe fe7c 	bl	80015b4 <HAL_GetTick>
 80028bc:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028be:	6823      	ldr	r3, [r4, #0]
 80028c0:	011a      	lsls	r2, r3, #4
 80028c2:	d441      	bmi.n	8002948 <RCCEx_PLLSAI1_Config+0xc8>
 80028c4:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028c6:	2e00      	cmp	r6, #0
 80028c8:	d045      	beq.n	8002956 <RCCEx_PLLSAI1_Config+0xd6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028ca:	2e01      	cmp	r6, #1
 80028cc:	d14f      	bne.n	800296e <RCCEx_PLLSAI1_Config+0xee>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028ce:	6922      	ldr	r2, [r4, #16]
 80028d0:	6928      	ldr	r0, [r5, #16]
 80028d2:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80028d6:	0840      	lsrs	r0, r0, #1
 80028d8:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80028dc:	3801      	subs	r0, #1
 80028de:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80028e2:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 80028e6:	6122      	str	r2, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80028e8:	6823      	ldr	r3, [r4, #0]
 80028ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028ee:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f0:	f7fe fe60 	bl	80015b4 <HAL_GetTick>
 80028f4:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028f6:	6823      	ldr	r3, [r4, #0]
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	d545      	bpl.n	8002988 <RCCEx_PLLSAI1_Config+0x108>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80028fc:	6923      	ldr	r3, [r4, #16]
 80028fe:	69aa      	ldr	r2, [r5, #24]
 8002900:	4313      	orrs	r3, r2
 8002902:	6123      	str	r3, [r4, #16]
 8002904:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8002906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8002908:	2802      	cmp	r0, #2
 800290a:	d010      	beq.n	800292e <RCCEx_PLLSAI1_Config+0xae>
 800290c:	2803      	cmp	r0, #3
 800290e:	d014      	beq.n	800293a <RCCEx_PLLSAI1_Config+0xba>
 8002910:	2801      	cmp	r0, #1
 8002912:	d110      	bne.n	8002936 <RCCEx_PLLSAI1_Config+0xb6>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	079f      	lsls	r7, r3, #30
 8002918:	d5f5      	bpl.n	8002906 <RCCEx_PLLSAI1_Config+0x86>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800291a:	68e3      	ldr	r3, [r4, #12]
 800291c:	686a      	ldr	r2, [r5, #4]
 800291e:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8002922:	3a01      	subs	r2, #1
 8002924:	4318      	orrs	r0, r3
 8002926:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800292a:	60e0      	str	r0, [r4, #12]
 800292c:	e7c0      	b.n	80028b0 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002934:	d1f1      	bne.n	800291a <RCCEx_PLLSAI1_Config+0x9a>
 8002936:	2001      	movs	r0, #1
 8002938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	0391      	lsls	r1, r2, #14
 800293e:	d4ec      	bmi.n	800291a <RCCEx_PLLSAI1_Config+0x9a>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002946:	e7f5      	b.n	8002934 <RCCEx_PLLSAI1_Config+0xb4>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002948:	f7fe fe34 	bl	80015b4 <HAL_GetTick>
 800294c:	1bc0      	subs	r0, r0, r7
 800294e:	2802      	cmp	r0, #2
 8002950:	d9b5      	bls.n	80028be <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8002952:	2003      	movs	r0, #3
 8002954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002956:	6922      	ldr	r2, [r4, #16]
 8002958:	68e9      	ldr	r1, [r5, #12]
 800295a:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 800295e:	06c9      	lsls	r1, r1, #27
 8002960:	ea41 2307 	orr.w	r3, r1, r7, lsl #8
 8002964:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002968:	4313      	orrs	r3, r2
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800296a:	6123      	str	r3, [r4, #16]
 800296c:	e7bc      	b.n	80028e8 <RCCEx_PLLSAI1_Config+0x68>
 800296e:	6923      	ldr	r3, [r4, #16]
 8002970:	6968      	ldr	r0, [r5, #20]
 8002972:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002976:	0840      	lsrs	r0, r0, #1
 8002978:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800297c:	3801      	subs	r0, #1
 800297e:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8002982:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8002986:	e7f0      	b.n	800296a <RCCEx_PLLSAI1_Config+0xea>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002988:	f7fe fe14 	bl	80015b4 <HAL_GetTick>
 800298c:	1b80      	subs	r0, r0, r6
 800298e:	2802      	cmp	r0, #2
 8002990:	d9b1      	bls.n	80028f6 <RCCEx_PLLSAI1_Config+0x76>
 8002992:	e7de      	b.n	8002952 <RCCEx_PLLSAI1_Config+0xd2>
 8002994:	40021000 	.word	0x40021000

08002998 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800299a:	4b3c      	ldr	r3, [pc, #240]	; (8002a8c <RCCEx_PLLSAI2_Config+0xf4>)
 800299c:	68da      	ldr	r2, [r3, #12]
 800299e:	f012 0f03 	tst.w	r2, #3
{
 80029a2:	4605      	mov	r5, r0
 80029a4:	460e      	mov	r6, r1
 80029a6:	461c      	mov	r4, r3
 80029a8:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029aa:	d027      	beq.n	80029fc <RCCEx_PLLSAI2_Config+0x64>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	f002 0203 	and.w	r2, r2, #3
 80029b2:	4282      	cmp	r2, r0
 80029b4:	d139      	bne.n	8002a2a <RCCEx_PLLSAI2_Config+0x92>
       ||
 80029b6:	2a00      	cmp	r2, #0
 80029b8:	d037      	beq.n	8002a2a <RCCEx_PLLSAI2_Config+0x92>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80029ba:	68db      	ldr	r3, [r3, #12]
       ||
 80029bc:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80029be:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80029c2:	3301      	adds	r3, #1
       ||
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d130      	bne.n	8002a2a <RCCEx_PLLSAI2_Config+0x92>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80029c8:	6823      	ldr	r3, [r4, #0]
 80029ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ce:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029d0:	f7fe fdf0 	bl	80015b4 <HAL_GetTick>
 80029d4:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80029d6:	6823      	ldr	r3, [r4, #0]
 80029d8:	009a      	lsls	r2, r3, #2
 80029da:	d42f      	bmi.n	8002a3c <RCCEx_PLLSAI2_Config+0xa4>
 80029dc:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029de:	2e00      	cmp	r6, #0
 80029e0:	d033      	beq.n	8002a4a <RCCEx_PLLSAI2_Config+0xb2>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029e2:	6963      	ldr	r3, [r4, #20]
 80029e4:	6929      	ldr	r1, [r5, #16]
 80029e6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029ea:	0849      	lsrs	r1, r1, #1
 80029ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029f0:	3901      	subs	r1, #1
 80029f2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80029f6:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80029fa:	e030      	b.n	8002a5e <RCCEx_PLLSAI2_Config+0xc6>
    switch(PllSai2->PLLSAI2Source)
 80029fc:	2802      	cmp	r0, #2
 80029fe:	d010      	beq.n	8002a22 <RCCEx_PLLSAI2_Config+0x8a>
 8002a00:	2803      	cmp	r0, #3
 8002a02:	d014      	beq.n	8002a2e <RCCEx_PLLSAI2_Config+0x96>
 8002a04:	2801      	cmp	r0, #1
 8002a06:	d110      	bne.n	8002a2a <RCCEx_PLLSAI2_Config+0x92>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	079f      	lsls	r7, r3, #30
 8002a0c:	d537      	bpl.n	8002a7e <RCCEx_PLLSAI2_Config+0xe6>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a0e:	68e3      	ldr	r3, [r4, #12]
 8002a10:	686a      	ldr	r2, [r5, #4]
 8002a12:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8002a16:	3a01      	subs	r2, #1
 8002a18:	4318      	orrs	r0, r3
 8002a1a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8002a1e:	60e0      	str	r0, [r4, #12]
 8002a20:	e7d2      	b.n	80029c8 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a28:	d1f1      	bne.n	8002a0e <RCCEx_PLLSAI2_Config+0x76>
 8002a2a:	2001      	movs	r0, #1
 8002a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	0391      	lsls	r1, r2, #14
 8002a32:	d4ec      	bmi.n	8002a0e <RCCEx_PLLSAI2_Config+0x76>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002a3a:	e7f5      	b.n	8002a28 <RCCEx_PLLSAI2_Config+0x90>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a3c:	f7fe fdba 	bl	80015b4 <HAL_GetTick>
 8002a40:	1bc0      	subs	r0, r0, r7
 8002a42:	2802      	cmp	r0, #2
 8002a44:	d9c7      	bls.n	80029d6 <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8002a46:	2003      	movs	r0, #3
 8002a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a4a:	68ea      	ldr	r2, [r5, #12]
 8002a4c:	6961      	ldr	r1, [r4, #20]
 8002a4e:	06d2      	lsls	r2, r2, #27
 8002a50:	ea42 2300 	orr.w	r3, r2, r0, lsl #8
 8002a54:	f021 4278 	bic.w	r2, r1, #4160749568	; 0xf8000000
 8002a58:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002a5c:	4313      	orrs	r3, r2
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a5e:	6163      	str	r3, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002a60:	6823      	ldr	r3, [r4, #0]
 8002a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a66:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a68:	f7fe fda4 	bl	80015b4 <HAL_GetTick>
 8002a6c:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a6e:	6823      	ldr	r3, [r4, #0]
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	d505      	bpl.n	8002a80 <RCCEx_PLLSAI2_Config+0xe8>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002a74:	6963      	ldr	r3, [r4, #20]
 8002a76:	696a      	ldr	r2, [r5, #20]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	6163      	str	r3, [r4, #20]
 8002a7c:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8002a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a80:	f7fe fd98 	bl	80015b4 <HAL_GetTick>
 8002a84:	1b80      	subs	r0, r0, r6
 8002a86:	2802      	cmp	r0, #2
 8002a88:	d9f1      	bls.n	8002a6e <RCCEx_PLLSAI2_Config+0xd6>
 8002a8a:	e7dc      	b.n	8002a46 <RCCEx_PLLSAI2_Config+0xae>
 8002a8c:	40021000 	.word	0x40021000

08002a90 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002a90:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a94:	6806      	ldr	r6, [r0, #0]
 8002a96:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8002a9a:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a9c:	d024      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002a9e:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8002aa0:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8002aa4:	d02c      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8002aa6:	d802      	bhi.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002aa8:	b1c1      	cbz	r1, 8002adc <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 8002aaa:	2601      	movs	r6, #1
 8002aac:	e01c      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002aae:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002ab2:	d00d      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002ab4:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8002ab8:	d1f7      	bne.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002aba:	4a4d      	ldr	r2, [pc, #308]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002abc:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002abe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002ac2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002ac6:	430b      	orrs	r3, r1
 8002ac8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002acc:	2600      	movs	r6, #0
 8002ace:	e00b      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ad0:	4a47      	ldr	r2, [pc, #284]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad2:	68d3      	ldr	r3, [r2, #12]
 8002ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad8:	60d3      	str	r3, [r2, #12]
      break;
 8002ada:	e7ee      	b.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002adc:	3004      	adds	r0, #4
 8002ade:	f7ff fecf 	bl	8002880 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ae2:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002ae4:	2800      	cmp	r0, #0
 8002ae6:	d0e8      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002ae8:	6823      	ldr	r3, [r4, #0]
 8002aea:	04d8      	lsls	r0, r3, #19
 8002aec:	d506      	bpl.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002aee:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002af0:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8002af4:	d074      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8002af6:	d808      	bhi.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002af8:	b1a9      	cbz	r1, 8002b26 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 8002afa:	2601      	movs	r6, #1
 8002afc:	4635      	mov	r5, r6
 8002afe:	e021      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b00:	2100      	movs	r1, #0
 8002b02:	3020      	adds	r0, #32
 8002b04:	f7ff ff48 	bl	8002998 <RCCEx_PLLSAI2_Config>
 8002b08:	e7eb      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002b0a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8002b0e:	d004      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8002b10:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8002b14:	d1f1      	bne.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002b16:	4635      	mov	r5, r6
 8002b18:	e009      	b.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b1a:	4a35      	ldr	r2, [pc, #212]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b1c:	68d3      	ldr	r3, [r2, #12]
 8002b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b22:	60d3      	str	r3, [r2, #12]
 8002b24:	e7f7      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b26:	1d20      	adds	r0, r4, #4
 8002b28:	f7ff feaa 	bl	8002880 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b2c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002b2e:	2d00      	cmp	r5, #0
 8002b30:	d15c      	bne.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b32:	4a2f      	ldr	r2, [pc, #188]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b34:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002b36:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002b3a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002b3e:	430b      	orrs	r3, r1
 8002b40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b44:	6823      	ldr	r3, [r4, #0]
 8002b46:	0399      	lsls	r1, r3, #14
 8002b48:	f140 815b 	bpl.w	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x372>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b4c:	4f28      	ldr	r7, [pc, #160]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b50:	00da      	lsls	r2, r3, #3
 8002b52:	f140 8182 	bpl.w	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
    FlagStatus       pwrclkchanged = RESET;
 8002b56:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b5a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8002b5e:	f8d9 3000 	ldr.w	r3, [r9]
 8002b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b66:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8002b6a:	f7fe fd23 	bl	80015b4 <HAL_GetTick>
 8002b6e:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b70:	f8d9 3000 	ldr.w	r3, [r9]
 8002b74:	05db      	lsls	r3, r3, #23
 8002b76:	d53f      	bpl.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 8002b78:	2d00      	cmp	r5, #0
 8002b7a:	d144      	bne.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b80:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002b84:	d015      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x122>
 8002b86:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d011      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b92:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002b96:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002b9a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b9e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ba6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002baa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8002bae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002bb2:	07dd      	lsls	r5, r3, #31
 8002bb4:	d509      	bpl.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 8002bb6:	f7fe fcfd 	bl	80015b4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bba:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002bbe:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bc4:	0798      	lsls	r0, r3, #30
 8002bc6:	f140 8115 	bpl.w	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x364>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bce:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8002bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002bdc:	4635      	mov	r5, r6
 8002bde:	e012      	b.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002be0:	2100      	movs	r1, #0
 8002be2:	f104 0020 	add.w	r0, r4, #32
 8002be6:	f7ff fed7 	bl	8002998 <RCCEx_PLLSAI2_Config>
 8002bea:	e79f      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8002bec:	462e      	mov	r6, r5
 8002bee:	e7a9      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf8:	f7fe fcdc 	bl	80015b4 <HAL_GetTick>
 8002bfc:	eba0 000a 	sub.w	r0, r0, sl
 8002c00:	2802      	cmp	r0, #2
 8002c02:	d9b5      	bls.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 8002c04:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8002c06:	f1b8 0f00 	cmp.w	r8, #0
 8002c0a:	d003      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c12:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c14:	6823      	ldr	r3, [r4, #0]
 8002c16:	07d9      	lsls	r1, r3, #31
 8002c18:	d508      	bpl.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c1a:	4996      	ldr	r1, [pc, #600]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c1c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002c1e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002c22:	f022 0203 	bic.w	r2, r2, #3
 8002c26:	4302      	orrs	r2, r0
 8002c28:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c2c:	079a      	lsls	r2, r3, #30
 8002c2e:	d508      	bpl.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c30:	4990      	ldr	r1, [pc, #576]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c32:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002c34:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002c38:	f022 020c 	bic.w	r2, r2, #12
 8002c3c:	4302      	orrs	r2, r0
 8002c3e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c42:	075f      	lsls	r7, r3, #29
 8002c44:	d508      	bpl.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c46:	498b      	ldr	r1, [pc, #556]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c48:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002c4a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002c4e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002c52:	4302      	orrs	r2, r0
 8002c54:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c58:	071e      	lsls	r6, r3, #28
 8002c5a:	d508      	bpl.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c5c:	4985      	ldr	r1, [pc, #532]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c5e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002c60:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002c64:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002c68:	4302      	orrs	r2, r0
 8002c6a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c6e:	06d8      	lsls	r0, r3, #27
 8002c70:	d508      	bpl.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c72:	4980      	ldr	r1, [pc, #512]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c74:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002c76:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002c7a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002c7e:	4302      	orrs	r2, r0
 8002c80:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c84:	0699      	lsls	r1, r3, #26
 8002c86:	d508      	bpl.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c88:	497a      	ldr	r1, [pc, #488]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c8a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002c8c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002c90:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002c94:	4302      	orrs	r2, r0
 8002c96:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c9a:	059a      	lsls	r2, r3, #22
 8002c9c:	d508      	bpl.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c9e:	4975      	ldr	r1, [pc, #468]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ca0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002ca2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002ca6:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002caa:	4302      	orrs	r2, r0
 8002cac:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002cb0:	055f      	lsls	r7, r3, #21
 8002cb2:	d508      	bpl.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cb4:	496f      	ldr	r1, [pc, #444]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cb6:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002cb8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002cbc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002cc0:	4302      	orrs	r2, r0
 8002cc2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cc6:	065e      	lsls	r6, r3, #25
 8002cc8:	d508      	bpl.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cca:	496a      	ldr	r1, [pc, #424]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ccc:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002cce:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002cd2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002cd6:	4302      	orrs	r2, r0
 8002cd8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cdc:	0618      	lsls	r0, r3, #24
 8002cde:	d508      	bpl.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ce0:	4964      	ldr	r1, [pc, #400]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ce2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002ce4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002ce8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002cec:	4302      	orrs	r2, r0
 8002cee:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cf2:	05d9      	lsls	r1, r3, #23
 8002cf4:	d508      	bpl.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cf6:	495f      	ldr	r1, [pc, #380]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002cfa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002cfe:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002d02:	4302      	orrs	r2, r0
 8002d04:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d08:	02da      	lsls	r2, r3, #11
 8002d0a:	d508      	bpl.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x28e>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d0c:	4959      	ldr	r1, [pc, #356]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d0e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002d10:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8002d14:	f022 0203 	bic.w	r2, r2, #3
 8002d18:	4302      	orrs	r2, r0
 8002d1a:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d1e:	049b      	lsls	r3, r3, #18
 8002d20:	d50f      	bpl.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d22:	4a54      	ldr	r2, [pc, #336]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d24:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002d26:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002d2a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002d2e:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d30:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d38:	d165      	bne.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x376>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d3a:	68d3      	ldr	r3, [r2, #12]
 8002d3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d40:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002d42:	6823      	ldr	r3, [r4, #0]
 8002d44:	031f      	lsls	r7, r3, #12
 8002d46:	d50f      	bpl.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d48:	4a4a      	ldr	r2, [pc, #296]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d4a:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002d4c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002d50:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002d54:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d56:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d5a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d5e:	d15d      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x38c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d60:	68d3      	ldr	r3, [r2, #12]
 8002d62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d66:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d68:	6823      	ldr	r3, [r4, #0]
 8002d6a:	035e      	lsls	r6, r3, #13
 8002d6c:	d50f      	bpl.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d6e:	4a41      	ldr	r2, [pc, #260]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d70:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8002d72:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002d76:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002d7a:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d7c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d84:	d155      	bne.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d86:	68d3      	ldr	r3, [r2, #12]
 8002d88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d8c:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d8e:	6823      	ldr	r3, [r4, #0]
 8002d90:	0458      	lsls	r0, r3, #17
 8002d92:	d512      	bpl.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x32a>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d94:	4937      	ldr	r1, [pc, #220]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d96:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8002d98:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002d9c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002da0:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002da2:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002daa:	d14d      	bne.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002dac:	2102      	movs	r1, #2
 8002dae:	1d20      	adds	r0, r4, #4
 8002db0:	f7ff fd66 	bl	8002880 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002db4:	2800      	cmp	r0, #0
 8002db6:	bf18      	it	ne
 8002db8:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002dba:	6822      	ldr	r2, [r4, #0]
 8002dbc:	0411      	lsls	r1, r2, #16
 8002dbe:	d509      	bpl.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002dc0:	492c      	ldr	r1, [pc, #176]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dc2:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8002dc6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002dca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002dce:	4303      	orrs	r3, r0
 8002dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002dd4:	03d3      	lsls	r3, r2, #15
 8002dd6:	d509      	bpl.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x35c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002dd8:	4a26      	ldr	r2, [pc, #152]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dda:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8002dde:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002de2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002de6:	430b      	orrs	r3, r1
 8002de8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8002dec:	4628      	mov	r0, r5
 8002dee:	b002      	add	sp, #8
 8002df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df4:	f7fe fbde 	bl	80015b4 <HAL_GetTick>
 8002df8:	1b40      	subs	r0, r0, r5
 8002dfa:	4548      	cmp	r0, r9
 8002dfc:	f67f aee0 	bls.w	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8002e00:	e700      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8002e02:	4635      	mov	r5, r6
 8002e04:	e706      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e06:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002e0a:	d19a      	bne.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	1d20      	adds	r0, r4, #4
 8002e10:	f7ff fd36 	bl	8002880 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002e14:	2800      	cmp	r0, #0
 8002e16:	bf18      	it	ne
 8002e18:	4605      	movne	r5, r0
 8002e1a:	e792      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e1c:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002e20:	d1a2      	bne.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e22:	2101      	movs	r1, #1
 8002e24:	1d20      	adds	r0, r4, #4
 8002e26:	f7ff fd2b 	bl	8002880 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002e2a:	2800      	cmp	r0, #0
 8002e2c:	bf18      	it	ne
 8002e2e:	4605      	movne	r5, r0
 8002e30:	e79a      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e32:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002e36:	d1aa      	bne.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e38:	2101      	movs	r1, #1
 8002e3a:	1d20      	adds	r0, r4, #4
 8002e3c:	f7ff fd20 	bl	8002880 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002e40:	2800      	cmp	r0, #0
 8002e42:	bf18      	it	ne
 8002e44:	4605      	movne	r5, r0
 8002e46:	e7a2      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002e48:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002e4c:	d1b5      	bne.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x32a>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002e4e:	2102      	movs	r1, #2
 8002e50:	f104 0020 	add.w	r0, r4, #32
 8002e54:	f7ff fda0 	bl	8002998 <RCCEx_PLLSAI2_Config>
 8002e58:	e7ac      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x324>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e60:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e68:	9301      	str	r3, [sp, #4]
 8002e6a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002e6c:	f04f 0801 	mov.w	r8, #1
 8002e70:	e673      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0xca>
 8002e72:	bf00      	nop
 8002e74:	40021000 	.word	0x40021000

08002e78 <HAL_UART_MspInit>:
 8002e78:	4770      	bx	lr
	...

08002e7c <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e7c:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e7e:	69c1      	ldr	r1, [r0, #28]
{
 8002e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e82:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e84:	6883      	ldr	r3, [r0, #8]
 8002e86:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e88:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e8a:	4303      	orrs	r3, r0
 8002e8c:	6960      	ldr	r0, [r4, #20]
 8002e8e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e90:	48af      	ldr	r0, [pc, #700]	; (8003150 <UART_SetConfig+0x2d4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e92:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e94:	4028      	ands	r0, r5
 8002e96:	4303      	orrs	r3, r0
 8002e98:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e9a:	6853      	ldr	r3, [r2, #4]
 8002e9c:	68e0      	ldr	r0, [r4, #12]
 8002e9e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ea2:	4303      	orrs	r3, r0
 8002ea4:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ea6:	4bab      	ldr	r3, [pc, #684]	; (8003154 <UART_SetConfig+0x2d8>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ea8:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002eaa:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002eac:	bf1c      	itt	ne
 8002eae:	6a23      	ldrne	r3, [r4, #32]
 8002eb0:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002eb2:	6893      	ldr	r3, [r2, #8]
 8002eb4:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002eb8:	4303      	orrs	r3, r0
 8002eba:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ebc:	4ba6      	ldr	r3, [pc, #664]	; (8003158 <UART_SetConfig+0x2dc>)
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d119      	bne.n	8002ef6 <UART_SetConfig+0x7a>
 8002ec2:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002ec6:	4aa5      	ldr	r2, [pc, #660]	; (800315c <UART_SetConfig+0x2e0>)
 8002ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ecc:	f003 0303 	and.w	r3, r3, #3
 8002ed0:	5cd3      	ldrb	r3, [r2, r3]
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ed2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002ed6:	f040 8151 	bne.w	800317c <UART_SetConfig+0x300>
  {
    switch (clocksource)
 8002eda:	2b08      	cmp	r3, #8
 8002edc:	f200 8091 	bhi.w	8003002 <UART_SetConfig+0x186>
 8002ee0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002ee4:	00cc011c 	.word	0x00cc011c
 8002ee8:	008f00fb 	.word	0x008f00fb
 8002eec:	008f0116 	.word	0x008f0116
 8002ef0:	008f008f 	.word	0x008f008f
 8002ef4:	0038      	.short	0x0038
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ef6:	4b9a      	ldr	r3, [pc, #616]	; (8003160 <UART_SetConfig+0x2e4>)
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d109      	bne.n	8002f10 <UART_SetConfig+0x94>
 8002efc:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8002f00:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002f04:	4b95      	ldr	r3, [pc, #596]	; (800315c <UART_SetConfig+0x2e0>)
 8002f06:	f002 020c 	and.w	r2, r2, #12
 8002f0a:	4413      	add	r3, r2
 8002f0c:	791b      	ldrb	r3, [r3, #4]
 8002f0e:	e7e0      	b.n	8002ed2 <UART_SetConfig+0x56>
 8002f10:	4b94      	ldr	r3, [pc, #592]	; (8003164 <UART_SetConfig+0x2e8>)
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d123      	bne.n	8002f5e <UART_SetConfig+0xe2>
 8002f16:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8002f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f22:	2b10      	cmp	r3, #16
 8002f24:	f000 80f1 	beq.w	800310a <UART_SetConfig+0x28e>
 8002f28:	d80b      	bhi.n	8002f42 <UART_SetConfig+0xc6>
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 80f3 	beq.w	8003116 <UART_SetConfig+0x29a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f30:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002f34:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002f38:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f3c:	f000 80f8 	beq.w	8003130 <UART_SetConfig+0x2b4>
 8002f40:	e0a8      	b.n	8003094 <UART_SetConfig+0x218>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f42:	2b20      	cmp	r3, #32
 8002f44:	f000 80c6 	beq.w	80030d4 <UART_SetConfig+0x258>
 8002f48:	2b30      	cmp	r3, #48	; 0x30
 8002f4a:	d1f1      	bne.n	8002f30 <UART_SetConfig+0xb4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f4c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002f50:	f040 80b8 	bne.w	80030c4 <UART_SetConfig+0x248>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002f54:	6860      	ldr	r0, [r4, #4]
 8002f56:	0843      	lsrs	r3, r0, #1
 8002f58:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002f5c:	e0c3      	b.n	80030e6 <UART_SetConfig+0x26a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f5e:	4b82      	ldr	r3, [pc, #520]	; (8003168 <UART_SetConfig+0x2ec>)
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d11e      	bne.n	8002fa2 <UART_SetConfig+0x126>
 8002f64:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8002f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f70:	2b40      	cmp	r3, #64	; 0x40
 8002f72:	f000 80bb 	beq.w	80030ec <UART_SetConfig+0x270>
 8002f76:	d80a      	bhi.n	8002f8e <UART_SetConfig+0x112>
 8002f78:	b97b      	cbnz	r3, 8002f9a <UART_SetConfig+0x11e>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f7a:	4b76      	ldr	r3, [pc, #472]	; (8003154 <UART_SetConfig+0x2d8>)
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	f040 80ca 	bne.w	8003116 <UART_SetConfig+0x29a>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002f82:	f7ff fc59 	bl	8002838 <HAL_RCC_GetPCLK1Freq>
        break;
 8002f86:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8002f88:	bbb0      	cbnz	r0, 8002ff8 <UART_SetConfig+0x17c>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	e03a      	b.n	8003004 <UART_SetConfig+0x188>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f8e:	2b80      	cmp	r3, #128	; 0x80
 8002f90:	f000 809d 	beq.w	80030ce <UART_SetConfig+0x252>
 8002f94:	2bc0      	cmp	r3, #192	; 0xc0
 8002f96:	f000 80b0 	beq.w	80030fa <UART_SetConfig+0x27e>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f9a:	4b6e      	ldr	r3, [pc, #440]	; (8003154 <UART_SetConfig+0x2d8>)
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d1c7      	bne.n	8002f30 <UART_SetConfig+0xb4>
 8002fa0:	e02f      	b.n	8003002 <UART_SetConfig+0x186>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fa2:	4b72      	ldr	r3, [pc, #456]	; (800316c <UART_SetConfig+0x2f0>)
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d111      	bne.n	8002fcc <UART_SetConfig+0x150>
 8002fa8:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8002fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb8:	f000 8098 	beq.w	80030ec <UART_SetConfig+0x270>
 8002fbc:	d9dc      	bls.n	8002f78 <UART_SetConfig+0xfc>
 8002fbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fc2:	f000 8084 	beq.w	80030ce <UART_SetConfig+0x252>
 8002fc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fca:	e7e4      	b.n	8002f96 <UART_SetConfig+0x11a>
 8002fcc:	4b61      	ldr	r3, [pc, #388]	; (8003154 <UART_SetConfig+0x2d8>)
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d1ae      	bne.n	8002f30 <UART_SetConfig+0xb4>
 8002fd2:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8002fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fda:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe2:	f000 8083 	beq.w	80030ec <UART_SetConfig+0x270>
 8002fe6:	d9c7      	bls.n	8002f78 <UART_SetConfig+0xfc>
 8002fe8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fec:	d06f      	beq.n	80030ce <UART_SetConfig+0x252>
 8002fee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ff2:	e7d0      	b.n	8002f96 <UART_SetConfig+0x11a>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002ff4:	485e      	ldr	r0, [pc, #376]	; (8003170 <UART_SetConfig+0x2f4>)
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ff6:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8002ff8:	6862      	ldr	r2, [r4, #4]
 8002ffa:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8002ffe:	4281      	cmp	r1, r0
 8003000:	d905      	bls.n	800300e <UART_SetConfig+0x192>
        ret = HAL_ERROR;
 8003002:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003004:	2300      	movs	r3, #0
 8003006:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8003008:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 800300a:	4610      	mov	r0, r2
 800300c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 800300e:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8003012:	d8f6      	bhi.n	8003002 <UART_SetConfig+0x186>
        switch (clocksource)
 8003014:	2b08      	cmp	r3, #8
 8003016:	d82e      	bhi.n	8003076 <UART_SetConfig+0x1fa>
 8003018:	e8df f003 	tbb	[pc, r3]
 800301c:	2d1c2d05 	.word	0x2d1c2d05
 8003020:	2d2d2d24 	.word	0x2d2d2d24
 8003024:	27          	.byte	0x27
 8003025:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003026:	f7ff fc07 	bl	8002838 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800302a:	6862      	ldr	r2, [r4, #4]
 800302c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003030:	0856      	lsrs	r6, r2, #1
 8003032:	2700      	movs	r7, #0
 8003034:	fbe1 6700 	umlal	r6, r7, r1, r0
 8003038:	2300      	movs	r3, #0
 800303a:	4630      	mov	r0, r6
 800303c:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800303e:	f7fd f92f 	bl	80002a0 <__aeabi_uldivmod>
            break;
 8003042:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003044:	4b4b      	ldr	r3, [pc, #300]	; (8003174 <UART_SetConfig+0x2f8>)
 8003046:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 800304a:	4299      	cmp	r1, r3
 800304c:	d8d9      	bhi.n	8003002 <UART_SetConfig+0x186>
          huart->Instance->BRR = usartdiv;
 800304e:	6823      	ldr	r3, [r4, #0]
 8003050:	60d8      	str	r0, [r3, #12]
 8003052:	e7d7      	b.n	8003004 <UART_SetConfig+0x188>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003054:	4848      	ldr	r0, [pc, #288]	; (8003178 <UART_SetConfig+0x2fc>)
 8003056:	0855      	lsrs	r5, r2, #1
 8003058:	2300      	movs	r3, #0
 800305a:	2100      	movs	r1, #0
 800305c:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800305e:	f141 0100 	adc.w	r1, r1, #0
 8003062:	e7ec      	b.n	800303e <UART_SetConfig+0x1c2>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003064:	f7ff f8b0 	bl	80021c8 <HAL_RCC_GetSysClockFreq>
 8003068:	e7df      	b.n	800302a <UART_SetConfig+0x1ae>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800306a:	0850      	lsrs	r0, r2, #1
 800306c:	2100      	movs	r1, #0
 800306e:	2300      	movs	r3, #0
 8003070:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8003074:	e7f3      	b.n	800305e <UART_SetConfig+0x1e2>
            ret = HAL_ERROR;
 8003076:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003078:	2000      	movs	r0, #0
 800307a:	e7e3      	b.n	8003044 <UART_SetConfig+0x1c8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800307c:	f7ff fbee 	bl	800285c <HAL_RCC_GetPCLK2Freq>
 8003080:	e04e      	b.n	8003120 <UART_SetConfig+0x2a4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003082:	f7ff fbd9 	bl	8002838 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003086:	6862      	ldr	r2, [r4, #4]
 8003088:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800308c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003090:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003092:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003094:	f1a3 0010 	sub.w	r0, r3, #16
 8003098:	f64f 71ef 	movw	r1, #65519	; 0xffef
 800309c:	4288      	cmp	r0, r1
 800309e:	d8b0      	bhi.n	8003002 <UART_SetConfig+0x186>
      huart->Instance->BRR = usartdiv;
 80030a0:	6821      	ldr	r1, [r4, #0]
 80030a2:	60cb      	str	r3, [r1, #12]
 80030a4:	e7ae      	b.n	8003004 <UART_SetConfig+0x188>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80030a6:	f7ff fbd9 	bl	800285c <HAL_RCC_GetPCLK2Freq>
 80030aa:	e7ec      	b.n	8003086 <UART_SetConfig+0x20a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80030ac:	6860      	ldr	r0, [r4, #4]
 80030ae:	0843      	lsrs	r3, r0, #1
 80030b0:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80030b4:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80030b8:	fbb3 f3f0 	udiv	r3, r3, r0
 80030bc:	e7e8      	b.n	8003090 <UART_SetConfig+0x214>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80030be:	f7ff f883 	bl	80021c8 <HAL_RCC_GetSysClockFreq>
 80030c2:	e7e0      	b.n	8003086 <UART_SetConfig+0x20a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80030c4:	6860      	ldr	r0, [r4, #4]
 80030c6:	0843      	lsrs	r3, r0, #1
 80030c8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80030cc:	e7f4      	b.n	80030b8 <UART_SetConfig+0x23c>
  if (UART_INSTANCE_LOWPOWER(huart))
 80030ce:	4b21      	ldr	r3, [pc, #132]	; (8003154 <UART_SetConfig+0x2d8>)
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d08f      	beq.n	8002ff4 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030d4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80030d8:	d1e8      	bne.n	80030ac <UART_SetConfig+0x230>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80030da:	6860      	ldr	r0, [r4, #4]
 80030dc:	0843      	lsrs	r3, r0, #1
 80030de:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80030e2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80030e6:	fbb3 f3f0 	udiv	r3, r3, r0
 80030ea:	e01f      	b.n	800312c <UART_SetConfig+0x2b0>
  if (UART_INSTANCE_LOWPOWER(huart))
 80030ec:	4b19      	ldr	r3, [pc, #100]	; (8003154 <UART_SetConfig+0x2d8>)
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d10b      	bne.n	800310a <UART_SetConfig+0x28e>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80030f2:	f7ff f869 	bl	80021c8 <HAL_RCC_GetSysClockFreq>
        break;
 80030f6:	2304      	movs	r3, #4
 80030f8:	e746      	b.n	8002f88 <UART_SetConfig+0x10c>
  if (UART_INSTANCE_LOWPOWER(huart))
 80030fa:	4b16      	ldr	r3, [pc, #88]	; (8003154 <UART_SetConfig+0x2d8>)
 80030fc:	429a      	cmp	r2, r3
 80030fe:	f47f af25 	bne.w	8002f4c <UART_SetConfig+0xd0>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003102:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 8003106:	2308      	movs	r3, #8
 8003108:	e776      	b.n	8002ff8 <UART_SetConfig+0x17c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800310a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800310e:	d1d6      	bne.n	80030be <UART_SetConfig+0x242>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003110:	f7ff f85a 	bl	80021c8 <HAL_RCC_GetSysClockFreq>
 8003114:	e004      	b.n	8003120 <UART_SetConfig+0x2a4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003116:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800311a:	d1b2      	bne.n	8003082 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800311c:	f7ff fb8c 	bl	8002838 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003120:	6861      	ldr	r1, [r4, #4]
 8003122:	084a      	lsrs	r2, r1, #1
 8003124:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8003128:	fbb3 f3f1 	udiv	r3, r3, r1
 800312c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800312e:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003130:	f1a3 0010 	sub.w	r0, r3, #16
 8003134:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003138:	4288      	cmp	r0, r1
 800313a:	f63f af62 	bhi.w	8003002 <UART_SetConfig+0x186>
      brrtemp = usartdiv & 0xFFF0U;
 800313e:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8003142:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003144:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8003148:	430b      	orrs	r3, r1
 800314a:	60c3      	str	r3, [r0, #12]
 800314c:	e75a      	b.n	8003004 <UART_SetConfig+0x188>
 800314e:	bf00      	nop
 8003150:	efff69f3 	.word	0xefff69f3
 8003154:	40008000 	.word	0x40008000
 8003158:	40013800 	.word	0x40013800
 800315c:	08004b0c 	.word	0x08004b0c
 8003160:	40004400 	.word	0x40004400
 8003164:	40004800 	.word	0x40004800
 8003168:	40004c00 	.word	0x40004c00
 800316c:	40005000 	.word	0x40005000
 8003170:	00f42400 	.word	0x00f42400
 8003174:	000ffcff 	.word	0x000ffcff
 8003178:	f4240000 	.word	0xf4240000
    switch (clocksource)
 800317c:	2b08      	cmp	r3, #8
 800317e:	f63f af40 	bhi.w	8003002 <UART_SetConfig+0x186>
 8003182:	a201      	add	r2, pc, #4	; (adr r2, 8003188 <UART_SetConfig+0x30c>)
 8003184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003188:	08003083 	.word	0x08003083
 800318c:	080030a7 	.word	0x080030a7
 8003190:	080030ad 	.word	0x080030ad
 8003194:	08003003 	.word	0x08003003
 8003198:	080030bf 	.word	0x080030bf
 800319c:	08003003 	.word	0x08003003
 80031a0:	08003003 	.word	0x08003003
 80031a4:	08003003 	.word	0x08003003
 80031a8:	080030c5 	.word	0x080030c5

080031ac <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80031ae:	07da      	lsls	r2, r3, #31
{
 80031b0:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031b2:	d506      	bpl.n	80031c2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031b4:	6801      	ldr	r1, [r0, #0]
 80031b6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80031b8:	684a      	ldr	r2, [r1, #4]
 80031ba:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80031be:	4322      	orrs	r2, r4
 80031c0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031c2:	079c      	lsls	r4, r3, #30
 80031c4:	d506      	bpl.n	80031d4 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031c6:	6801      	ldr	r1, [r0, #0]
 80031c8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80031ca:	684a      	ldr	r2, [r1, #4]
 80031cc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80031d0:	4322      	orrs	r2, r4
 80031d2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031d4:	0759      	lsls	r1, r3, #29
 80031d6:	d506      	bpl.n	80031e6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031d8:	6801      	ldr	r1, [r0, #0]
 80031da:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80031dc:	684a      	ldr	r2, [r1, #4]
 80031de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031e2:	4322      	orrs	r2, r4
 80031e4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031e6:	071a      	lsls	r2, r3, #28
 80031e8:	d506      	bpl.n	80031f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031ea:	6801      	ldr	r1, [r0, #0]
 80031ec:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80031ee:	684a      	ldr	r2, [r1, #4]
 80031f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031f4:	4322      	orrs	r2, r4
 80031f6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031f8:	06dc      	lsls	r4, r3, #27
 80031fa:	d506      	bpl.n	800320a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031fc:	6801      	ldr	r1, [r0, #0]
 80031fe:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003200:	688a      	ldr	r2, [r1, #8]
 8003202:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003206:	4322      	orrs	r2, r4
 8003208:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800320a:	0699      	lsls	r1, r3, #26
 800320c:	d506      	bpl.n	800321c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800320e:	6801      	ldr	r1, [r0, #0]
 8003210:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003212:	688a      	ldr	r2, [r1, #8]
 8003214:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003218:	4322      	orrs	r2, r4
 800321a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800321c:	065a      	lsls	r2, r3, #25
 800321e:	d50f      	bpl.n	8003240 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003220:	6801      	ldr	r1, [r0, #0]
 8003222:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003224:	684a      	ldr	r2, [r1, #4]
 8003226:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800322a:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800322c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003230:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003232:	d105      	bne.n	8003240 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003234:	684a      	ldr	r2, [r1, #4]
 8003236:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003238:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800323c:	4322      	orrs	r2, r4
 800323e:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003240:	061b      	lsls	r3, r3, #24
 8003242:	d506      	bpl.n	8003252 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003244:	6802      	ldr	r2, [r0, #0]
 8003246:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003248:	6853      	ldr	r3, [r2, #4]
 800324a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800324e:	430b      	orrs	r3, r1
 8003250:	6053      	str	r3, [r2, #4]
 8003252:	bd10      	pop	{r4, pc}

08003254 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003258:	9d06      	ldr	r5, [sp, #24]
 800325a:	4604      	mov	r4, r0
 800325c:	460f      	mov	r7, r1
 800325e:	4616      	mov	r6, r2
 8003260:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003262:	6821      	ldr	r1, [r4, #0]
 8003264:	69ca      	ldr	r2, [r1, #28]
 8003266:	ea37 0302 	bics.w	r3, r7, r2
 800326a:	bf0c      	ite	eq
 800326c:	2201      	moveq	r2, #1
 800326e:	2200      	movne	r2, #0
 8003270:	42b2      	cmp	r2, r6
 8003272:	d002      	beq.n	800327a <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003274:	2000      	movs	r0, #0
}
 8003276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800327a:	1c6b      	adds	r3, r5, #1
 800327c:	d0f2      	beq.n	8003264 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800327e:	b99d      	cbnz	r5, 80032a8 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003280:	6823      	ldr	r3, [r4, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003288:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	f022 0201 	bic.w	r2, r2, #1
 8003290:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003292:	2320      	movs	r3, #32
 8003294:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8003298:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 800329c:	2300      	movs	r3, #0
 800329e:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 80032a2:	2003      	movs	r0, #3
 80032a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032a8:	f7fe f984 	bl	80015b4 <HAL_GetTick>
 80032ac:	eba0 0008 	sub.w	r0, r0, r8
 80032b0:	4285      	cmp	r5, r0
 80032b2:	d2d6      	bcs.n	8003262 <UART_WaitOnFlagUntilTimeout+0xe>
 80032b4:	e7e4      	b.n	8003280 <UART_WaitOnFlagUntilTimeout+0x2c>

080032b6 <HAL_UART_Transmit>:
{
 80032b6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80032ba:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80032bc:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 80032c0:	2b20      	cmp	r3, #32
{
 80032c2:	4604      	mov	r4, r0
 80032c4:	460d      	mov	r5, r1
 80032c6:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80032c8:	d14a      	bne.n	8003360 <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 80032ca:	2900      	cmp	r1, #0
 80032cc:	d046      	beq.n	800335c <HAL_UART_Transmit+0xa6>
 80032ce:	2a00      	cmp	r2, #0
 80032d0:	d044      	beq.n	800335c <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 80032d2:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d042      	beq.n	8003360 <HAL_UART_Transmit+0xaa>
 80032da:	2301      	movs	r3, #1
 80032dc:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e0:	2300      	movs	r3, #0
 80032e2:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032e4:	2321      	movs	r3, #33	; 0x21
 80032e6:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 80032ea:	f7fe f963 	bl	80015b4 <HAL_GetTick>
    huart->TxXferSize  = Size;
 80032ee:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 80032f2:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80032f4:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80032f8:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032fc:	9700      	str	r7, [sp, #0]
    while (huart->TxXferCount > 0U)
 80032fe:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003300:	4633      	mov	r3, r6
    while (huart->TxXferCount > 0U)
 8003302:	b952      	cbnz	r2, 800331a <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003304:	2140      	movs	r1, #64	; 0x40
 8003306:	4620      	mov	r0, r4
 8003308:	f7ff ffa4 	bl	8003254 <UART_WaitOnFlagUntilTimeout>
 800330c:	b958      	cbnz	r0, 8003326 <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 800330e:	2320      	movs	r3, #32
 8003310:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 8003314:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8003318:	e006      	b.n	8003328 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800331a:	2200      	movs	r2, #0
 800331c:	2180      	movs	r1, #128	; 0x80
 800331e:	4620      	mov	r0, r4
 8003320:	f7ff ff98 	bl	8003254 <UART_WaitOnFlagUntilTimeout>
 8003324:	b118      	cbz	r0, 800332e <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 8003326:	2003      	movs	r0, #3
}
 8003328:	b002      	add	sp, #8
 800332a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800332e:	68a3      	ldr	r3, [r4, #8]
 8003330:	6822      	ldr	r2, [r4, #0]
 8003332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003336:	d10d      	bne.n	8003354 <HAL_UART_Transmit+0x9e>
 8003338:	6923      	ldr	r3, [r4, #16]
 800333a:	b95b      	cbnz	r3, 8003354 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800333c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003344:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8003346:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800334a:	3b01      	subs	r3, #1
 800334c:	b29b      	uxth	r3, r3
 800334e:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8003352:	e7d1      	b.n	80032f8 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8003354:	782b      	ldrb	r3, [r5, #0]
 8003356:	8513      	strh	r3, [r2, #40]	; 0x28
 8003358:	3501      	adds	r5, #1
 800335a:	e7f4      	b.n	8003346 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 800335c:	2001      	movs	r0, #1
 800335e:	e7e3      	b.n	8003328 <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 8003360:	2002      	movs	r0, #2
 8003362:	e7e1      	b.n	8003328 <HAL_UART_Transmit+0x72>

08003364 <HAL_UART_Receive>:
{
 8003364:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003368:	4698      	mov	r8, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 800336a:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 800336e:	2b20      	cmp	r3, #32
{
 8003370:	4604      	mov	r4, r0
 8003372:	460d      	mov	r5, r1
 8003374:	4616      	mov	r6, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8003376:	d160      	bne.n	800343a <HAL_UART_Receive+0xd6>
    if ((pData == NULL) || (Size == 0U))
 8003378:	2900      	cmp	r1, #0
 800337a:	d05c      	beq.n	8003436 <HAL_UART_Receive+0xd2>
 800337c:	2a00      	cmp	r2, #0
 800337e:	d05a      	beq.n	8003436 <HAL_UART_Receive+0xd2>
    __HAL_LOCK(huart);
 8003380:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8003384:	2b01      	cmp	r3, #1
 8003386:	d058      	beq.n	800343a <HAL_UART_Receive+0xd6>
 8003388:	2301      	movs	r3, #1
 800338a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800338e:	2300      	movs	r3, #0
 8003390:	6743      	str	r3, [r0, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003392:	2322      	movs	r3, #34	; 0x22
 8003394:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
    tickstart = HAL_GetTick();
 8003398:	f7fe f90c 	bl	80015b4 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 800339c:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize  = Size;
 800339e:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 80033a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80033a6:	4607      	mov	r7, r0
    huart->RxXferCount = Size;
 80033a8:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 80033ac:	d115      	bne.n	80033da <HAL_UART_Receive+0x76>
 80033ae:	6923      	ldr	r3, [r4, #16]
 80033b0:	b98b      	cbnz	r3, 80033d6 <HAL_UART_Receive+0x72>
 80033b2:	f240 13ff 	movw	r3, #511	; 0x1ff
 80033b6:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 80033ba:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
    while (huart->RxXferCount > 0U)
 80033be:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 80033c2:	b280      	uxth	r0, r0
 80033c4:	b9b8      	cbnz	r0, 80033f6 <HAL_UART_Receive+0x92>
    huart->RxState = HAL_UART_STATE_READY;
 80033c6:	2320      	movs	r3, #32
 80033c8:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
    __HAL_UNLOCK(huart);
 80033cc:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 80033d0:	b002      	add	sp, #8
 80033d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 80033d6:	23ff      	movs	r3, #255	; 0xff
 80033d8:	e7ed      	b.n	80033b6 <HAL_UART_Receive+0x52>
 80033da:	b923      	cbnz	r3, 80033e6 <HAL_UART_Receive+0x82>
 80033dc:	6923      	ldr	r3, [r4, #16]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0f9      	beq.n	80033d6 <HAL_UART_Receive+0x72>
 80033e2:	237f      	movs	r3, #127	; 0x7f
 80033e4:	e7e7      	b.n	80033b6 <HAL_UART_Receive+0x52>
 80033e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033ea:	d1e6      	bne.n	80033ba <HAL_UART_Receive+0x56>
 80033ec:	6923      	ldr	r3, [r4, #16]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0f7      	beq.n	80033e2 <HAL_UART_Receive+0x7e>
 80033f2:	233f      	movs	r3, #63	; 0x3f
 80033f4:	e7df      	b.n	80033b6 <HAL_UART_Receive+0x52>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80033f6:	f8cd 8000 	str.w	r8, [sp]
 80033fa:	463b      	mov	r3, r7
 80033fc:	2200      	movs	r2, #0
 80033fe:	2120      	movs	r1, #32
 8003400:	4620      	mov	r0, r4
 8003402:	f7ff ff27 	bl	8003254 <UART_WaitOnFlagUntilTimeout>
 8003406:	b9d0      	cbnz	r0, 800343e <HAL_UART_Receive+0xda>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003408:	68a3      	ldr	r3, [r4, #8]
 800340a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800340e:	6823      	ldr	r3, [r4, #0]
 8003410:	d10c      	bne.n	800342c <HAL_UART_Receive+0xc8>
 8003412:	6922      	ldr	r2, [r4, #16]
 8003414:	b952      	cbnz	r2, 800342c <HAL_UART_Receive+0xc8>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8003416:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003418:	4033      	ands	r3, r6
 800341a:	f825 3b02 	strh.w	r3, [r5], #2
      huart->RxXferCount--;
 800341e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8003422:	3b01      	subs	r3, #1
 8003424:	b29b      	uxth	r3, r3
 8003426:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800342a:	e7c8      	b.n	80033be <HAL_UART_Receive+0x5a>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800342c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800342e:	4033      	ands	r3, r6
 8003430:	702b      	strb	r3, [r5, #0]
 8003432:	3501      	adds	r5, #1
 8003434:	e7f3      	b.n	800341e <HAL_UART_Receive+0xba>
      return  HAL_ERROR;
 8003436:	2001      	movs	r0, #1
 8003438:	e7ca      	b.n	80033d0 <HAL_UART_Receive+0x6c>
    return HAL_BUSY;
 800343a:	2002      	movs	r0, #2
 800343c:	e7c8      	b.n	80033d0 <HAL_UART_Receive+0x6c>
        return HAL_TIMEOUT;
 800343e:	2003      	movs	r0, #3
 8003440:	e7c6      	b.n	80033d0 <HAL_UART_Receive+0x6c>

08003442 <UART_CheckIdleState>:
{
 8003442:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003444:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003446:	2600      	movs	r6, #0
 8003448:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 800344a:	f7fe f8b3 	bl	80015b4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800344e:	6823      	ldr	r3, [r4, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8003454:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003456:	d417      	bmi.n	8003488 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003458:	6823      	ldr	r3, [r4, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	075b      	lsls	r3, r3, #29
 800345e:	d50a      	bpl.n	8003476 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003460:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	2200      	movs	r2, #0
 8003468:	462b      	mov	r3, r5
 800346a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800346e:	4620      	mov	r0, r4
 8003470:	f7ff fef0 	bl	8003254 <UART_WaitOnFlagUntilTimeout>
 8003474:	b9a0      	cbnz	r0, 80034a0 <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 8003476:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8003478:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800347a:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 800347e:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8003482:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8003486:	e00c      	b.n	80034a2 <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003488:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	4632      	mov	r2, r6
 8003490:	4603      	mov	r3, r0
 8003492:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003496:	4620      	mov	r0, r4
 8003498:	f7ff fedc 	bl	8003254 <UART_WaitOnFlagUntilTimeout>
 800349c:	2800      	cmp	r0, #0
 800349e:	d0db      	beq.n	8003458 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80034a0:	2003      	movs	r0, #3
}
 80034a2:	b002      	add	sp, #8
 80034a4:	bd70      	pop	{r4, r5, r6, pc}

080034a6 <HAL_UART_Init>:
{
 80034a6:	b510      	push	{r4, lr}
  if (huart == NULL)
 80034a8:	4604      	mov	r4, r0
 80034aa:	b360      	cbz	r0, 8003506 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 80034ac:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 80034b0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80034b4:	b91b      	cbnz	r3, 80034be <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80034b6:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80034ba:	f7ff fcdd 	bl	8002e78 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80034be:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80034c0:	2324      	movs	r3, #36	; 0x24
 80034c2:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 80034c6:	6813      	ldr	r3, [r2, #0]
 80034c8:	f023 0301 	bic.w	r3, r3, #1
 80034cc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034ce:	4620      	mov	r0, r4
 80034d0:	f7ff fcd4 	bl	8002e7c <UART_SetConfig>
 80034d4:	2801      	cmp	r0, #1
 80034d6:	d016      	beq.n	8003506 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034da:	b113      	cbz	r3, 80034e2 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80034dc:	4620      	mov	r0, r4
 80034de:	f7ff fe65 	bl	80031ac <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034e2:	6823      	ldr	r3, [r4, #0]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034ec:	689a      	ldr	r2, [r3, #8]
 80034ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034f2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80034fa:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80034fc:	601a      	str	r2, [r3, #0]
}
 80034fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8003502:	f7ff bf9e 	b.w	8003442 <UART_CheckIdleState>
}
 8003506:	2001      	movs	r0, #1
 8003508:	bd10      	pop	{r4, pc}
	...

0800350c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800350c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003544 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003510:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003512:	e003      	b.n	800351c <LoopCopyDataInit>

08003514 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003514:	4b0c      	ldr	r3, [pc, #48]	; (8003548 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003516:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003518:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800351a:	3104      	adds	r1, #4

0800351c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800351c:	480b      	ldr	r0, [pc, #44]	; (800354c <LoopForever+0xa>)
	ldr	r3, =_edata
 800351e:	4b0c      	ldr	r3, [pc, #48]	; (8003550 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003520:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003522:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003524:	d3f6      	bcc.n	8003514 <CopyDataInit>
	ldr	r2, =_sbss
 8003526:	4a0b      	ldr	r2, [pc, #44]	; (8003554 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003528:	e002      	b.n	8003530 <LoopFillZerobss>

0800352a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800352a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800352c:	f842 3b04 	str.w	r3, [r2], #4

08003530 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003530:	4b09      	ldr	r3, [pc, #36]	; (8003558 <LoopForever+0x16>)
	cmp	r2, r3
 8003532:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003534:	d3f9      	bcc.n	800352a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003536:	f7fd ffe7 	bl	8001508 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800353a:	f000 f96b 	bl	8003814 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800353e:	f000 f865 	bl	800360c <main>

08003542 <LoopForever>:

LoopForever:
    b LoopForever
 8003542:	e7fe      	b.n	8003542 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003544:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8003548:	08004d60 	.word	0x08004d60
	ldr	r0, =_sdata
 800354c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003550:	20000358 	.word	0x20000358
	ldr	r2, =_sbss
 8003554:	20000358 	.word	0x20000358
	ldr	r3, = _ebss
 8003558:	200005d8 	.word	0x200005d8

0800355c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800355c:	e7fe      	b.n	800355c <ADC1_2_IRQHandler>

0800355e <uart_setup>:
}


void uart_setup(UART_HandleTypeDef *huart)
{
	huart->Init.BaudRate = 115200;
 800355e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003562:	6043      	str	r3, [r0, #4]
	huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart->Init.Mode = UART_MODE_TX_RX;
 8003564:	220c      	movs	r2, #12
	huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003566:	2300      	movs	r3, #0
 8003568:	6183      	str	r3, [r0, #24]
	huart->Init.Mode = UART_MODE_TX_RX;
 800356a:	6142      	str	r2, [r0, #20]
	huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800356c:	6203      	str	r3, [r0, #32]
	huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800356e:	61c3      	str	r3, [r0, #28]
	huart->Init.Parity = UART_PARITY_NONE;
 8003570:	6103      	str	r3, [r0, #16]
	huart->Init.StopBits = UART_STOPBITS_1;
 8003572:	60c3      	str	r3, [r0, #12]
	huart->Init.WordLength = UART_WORDLENGTH_8B;
 8003574:	6083      	str	r3, [r0, #8]
 8003576:	4770      	bx	lr

08003578 <send_string_confirmation>:
}

void send_string_confirmation()
{
 8003578:	b570      	push	{r4, r5, r6, lr}
	++cnt;					// Zwiekszanie licznika wiadomosci
 800357a:	4c0a      	ldr	r4, [pc, #40]	; (80035a4 <send_string_confirmation+0x2c>)
	size = sprintf(data_sent, "Liczba wyslanych wiadomosci: %d.\n\r", cnt); // Stworzenie wiadomosci do wyslania oraz przypisanie ilosci wysylanych znakow do zmiennej size.
 800357c:	4d0a      	ldr	r5, [pc, #40]	; (80035a8 <send_string_confirmation+0x30>)
	++cnt;					// Zwiekszanie licznika wiadomosci
 800357e:	8822      	ldrh	r2, [r4, #0]
	size = sprintf(data_sent, "Liczba wyslanych wiadomosci: %d.\n\r", cnt); // Stworzenie wiadomosci do wyslania oraz przypisanie ilosci wysylanych znakow do zmiennej size.
 8003580:	490a      	ldr	r1, [pc, #40]	; (80035ac <send_string_confirmation+0x34>)
	++cnt;					// Zwiekszanie licznika wiadomosci
 8003582:	3201      	adds	r2, #1
 8003584:	b292      	uxth	r2, r2
	size = sprintf(data_sent, "Liczba wyslanych wiadomosci: %d.\n\r", cnt); // Stworzenie wiadomosci do wyslania oraz przypisanie ilosci wysylanych znakow do zmiennej size.
 8003586:	4628      	mov	r0, r5
	++cnt;					// Zwiekszanie licznika wiadomosci
 8003588:	8022      	strh	r2, [r4, #0]
	size = sprintf(data_sent, "Liczba wyslanych wiadomosci: %d.\n\r", cnt); // Stworzenie wiadomosci do wyslania oraz przypisanie ilosci wysylanych znakow do zmiennej size.
 800358a:	f000 f967 	bl	800385c <siprintf>
 800358e:	b282      	uxth	r2, r0
 8003590:	8062      	strh	r2, [r4, #2]
	HAL_UART_Transmit(&huart,(uint8_t*)data_sent,size,2000);
 8003592:	4629      	mov	r1, r5
 8003594:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003598:	4805      	ldr	r0, [pc, #20]	; (80035b0 <send_string_confirmation+0x38>)
}
 800359a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_UART_Transmit(&huart,(uint8_t*)data_sent,size,2000);
 800359e:	f7ff be8a 	b.w	80032b6 <HAL_UART_Transmit>
 80035a2:	bf00      	nop
 80035a4:	200004b0 	.word	0x200004b0
 80035a8:	2000053c 	.word	0x2000053c
 80035ac:	08004b2c 	.word	0x08004b2c
 80035b0:	200004c4 	.word	0x200004c4

080035b4 <clear_table>:
	send_string("\r\n");
}

void clear_table(char *received_string)
{
	memset(received_string, 0, sizeof(*received_string)); // Uzupelnianie tabeli wartoscia 0 na miejsca okreslone w trzecim argumencie (np cala tabele)
 80035b4:	2300      	movs	r3, #0
 80035b6:	7003      	strb	r3, [r0, #0]
 80035b8:	4770      	bx	lr
	...

080035bc <send_string>:
}

void send_string(char *s)
{
 80035bc:	b510      	push	{r4, lr}
 80035be:	4604      	mov	r4, r0
	HAL_UART_Transmit(&huart, (uint8_t*)s, strlen(s), 2000);
 80035c0:	f7fc fe16 	bl	80001f0 <strlen>
 80035c4:	4621      	mov	r1, r4
 80035c6:	b282      	uxth	r2, r0
 80035c8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80035cc:	4802      	ldr	r0, [pc, #8]	; (80035d8 <send_string+0x1c>)
}
 80035ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Transmit(&huart, (uint8_t*)s, strlen(s), 2000);
 80035d2:	f7ff be70 	b.w	80032b6 <HAL_UART_Transmit>
 80035d6:	bf00      	nop
 80035d8:	200004c4 	.word	0x200004c4

080035dc <send_confirmation>:
{
 80035dc:	b510      	push	{r4, lr}
 80035de:	4604      	mov	r4, r0
	send_string("\r");
 80035e0:	4807      	ldr	r0, [pc, #28]	; (8003600 <send_confirmation+0x24>)
 80035e2:	f7ff ffeb 	bl	80035bc <send_string>
	send_string_confirmation();
 80035e6:	f7ff ffc7 	bl	8003578 <send_string_confirmation>
	send_string("Odebrano wiadomosc : ");
 80035ea:	4806      	ldr	r0, [pc, #24]	; (8003604 <send_confirmation+0x28>)
 80035ec:	f7ff ffe6 	bl	80035bc <send_string>
	send_string(received_string);
 80035f0:	4620      	mov	r0, r4
 80035f2:	f7ff ffe3 	bl	80035bc <send_string>
	send_string("\r\n");
 80035f6:	4804      	ldr	r0, [pc, #16]	; (8003608 <send_confirmation+0x2c>)
}
 80035f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	send_string("\r\n");
 80035fc:	f7ff bfde 	b.w	80035bc <send_string>
 8003600:	08004b86 	.word	0x08004b86
 8003604:	08004b4f 	.word	0x08004b4f
 8003608:	08004b65 	.word	0x08004b65

0800360c <main>:
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b098      	sub	sp, #96	; 0x60
	uint8_t counter = 0;
 8003610:	2500      	movs	r5, #0
 8003612:	f88d 5007 	strb.w	r5, [sp, #7]
  HAL_Init();
 8003616:	f7fd ffb5 	bl	8001584 <HAL_Init>
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800361a:	2310      	movs	r3, #16
 800361c:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800361e:	2360      	movs	r3, #96	; 0x60
 8003620:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003622:	2302      	movs	r3, #2
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003624:	2401      	movs	r4, #1
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8003626:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003628:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
 800362a:	2228      	movs	r2, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLR = 2;
 800362c:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 7;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800362e:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLP = 7;
 8003630:	2307      	movs	r3, #7
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003632:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003634:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003636:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003638:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 40;
 800363a:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 7;
 800363c:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800363e:	9516      	str	r5, [sp, #88]	; 0x58
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003640:	f7fe fe16 	bl	8002270 <HAL_RCC_OscConfig>
 8003644:	b100      	cbz	r0, 8003648 <main+0x3c>
 8003646:	e7fe      	b.n	8003646 <main+0x3a>
    while(1);
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8003648:	230f      	movs	r3, #15
 800364a:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800364c:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800364e:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;  
 8003650:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 8003652:	9006      	str	r0, [sp, #24]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003654:	4629      	mov	r1, r5
 8003656:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003658:	9303      	str	r3, [sp, #12]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800365a:	f7ff f85b 	bl	8002714 <HAL_RCC_ClockConfig>
 800365e:	4605      	mov	r5, r0
 8003660:	b100      	cbz	r0, 8003664 <main+0x58>
 8003662:	e7fe      	b.n	8003662 <main+0x56>
  BSP_LED_Init(LED1);
 8003664:	f7fd fc0a 	bl	8000e7c <BSP_LED_Init>
  BSP_LED_Init(LED2);  
 8003668:	4620      	mov	r0, r4
 800366a:	f7fd fc07 	bl	8000e7c <BSP_LED_Init>
  BSP_JOY_Init(JOY_MODE_EXTI);
 800366e:	4620      	mov	r0, r4
 8003670:	f7fd fc50 	bl	8000f14 <BSP_JOY_Init>
  uart_setup(&huart);
 8003674:	484b      	ldr	r0, [pc, #300]	; (80037a4 <main+0x198>)
	  HAL_UART_Transmit(&huart, (uint8_t *)debug_1, strlen(debug_1), 500);
 8003676:	4f4c      	ldr	r7, [pc, #304]	; (80037a8 <main+0x19c>)
 8003678:	4c4a      	ldr	r4, [pc, #296]	; (80037a4 <main+0x198>)
  uart_setup(&huart);
 800367a:	f7ff ff70 	bl	800355e <uart_setup>
  BSP_COM_Init(COM1, &huart);
 800367e:	4949      	ldr	r1, [pc, #292]	; (80037a4 <main+0x198>)
 8003680:	4628      	mov	r0, r5
 8003682:	f7fd fcc5 	bl	8001010 <BSP_COM_Init>
  HAL_UART_Transmit(&huart, (uint8_t*)&welcome_string, strlen(welcome_string), 500);
 8003686:	4849      	ldr	r0, [pc, #292]	; (80037ac <main+0x1a0>)
 8003688:	f7fc fdb2 	bl	80001f0 <strlen>
 800368c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003690:	b282      	uxth	r2, r0
 8003692:	4946      	ldr	r1, [pc, #280]	; (80037ac <main+0x1a0>)
 8003694:	4843      	ldr	r0, [pc, #268]	; (80037a4 <main+0x198>)
 8003696:	f7ff fe0e 	bl	80032b6 <HAL_UART_Transmit>
  send_string("\r\n");
 800369a:	4845      	ldr	r0, [pc, #276]	; (80037b0 <main+0x1a4>)
 800369c:	f7ff ff8e 	bl	80035bc <send_string>
	  BSP_LED_Toggle(LED1);
 80036a0:	2000      	movs	r0, #0
 80036a2:	f7fd fc27 	bl	8000ef4 <BSP_LED_Toggle>
	  HAL_Delay(100);
 80036a6:	2064      	movs	r0, #100	; 0x64
 80036a8:	f7fd ff8a 	bl	80015c0 <HAL_Delay>
	  HAL_UART_Transmit(&huart, (uint8_t *)debug_1, strlen(debug_1), 500);
 80036ac:	4638      	mov	r0, r7
 80036ae:	f7fc fd9f 	bl	80001f0 <strlen>
 80036b2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80036b6:	b282      	uxth	r2, r0
 80036b8:	4639      	mov	r1, r7
 80036ba:	4620      	mov	r0, r4
 80036bc:	f7ff fdfb 	bl	80032b6 <HAL_UART_Transmit>
	  send_string("\r\n");
 80036c0:	483b      	ldr	r0, [pc, #236]	; (80037b0 <main+0x1a4>)
    	  status_uart = HAL_UART_Receive(&huart, (uint8_t *)&received_string[counter], 1, 100);
 80036c2:	4e3c      	ldr	r6, [pc, #240]	; (80037b4 <main+0x1a8>)
	  send_string("\r\n");
 80036c4:	f7ff ff7a 	bl	80035bc <send_string>
    	  BSP_LED_Toggle(LED2);
 80036c8:	2001      	movs	r0, #1
 80036ca:	f7fd fc13 	bl	8000ef4 <BSP_LED_Toggle>
    	  HAL_UART_Transmit(&huart, &counter, 1, 200);
 80036ce:	23c8      	movs	r3, #200	; 0xc8
 80036d0:	2201      	movs	r2, #1
 80036d2:	f10d 0107 	add.w	r1, sp, #7
 80036d6:	4620      	mov	r0, r4
 80036d8:	f7ff fded 	bl	80032b6 <HAL_UART_Transmit>
    	  status_uart = HAL_UART_Receive(&huart, (uint8_t *)&received_string[counter], 1, 100);
 80036dc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80036e0:	2364      	movs	r3, #100	; 0x64
 80036e2:	2201      	movs	r2, #1
 80036e4:	4431      	add	r1, r6
 80036e6:	4620      	mov	r0, r4
 80036e8:	f7ff fe3c 	bl	8003364 <HAL_UART_Receive>
 80036ec:	4b32      	ldr	r3, [pc, #200]	; (80037b8 <main+0x1ac>)
 80036ee:	4605      	mov	r5, r0
 80036f0:	7018      	strb	r0, [r3, #0]
    	  if(status_uart == HAL_OK)
 80036f2:	2800      	cmp	r0, #0
 80036f4:	d1e8      	bne.n	80036c8 <main+0xbc>
    		HAL_UART_Transmit(&huart, (uint8_t *)&received_string[counter], 1, 500); // ECHO tego co wpisuje
 80036f6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80036fa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80036fe:	2201      	movs	r2, #1
 8003700:	4431      	add	r1, r6
 8003702:	4620      	mov	r0, r4
 8003704:	f7ff fdd7 	bl	80032b6 <HAL_UART_Transmit>
    		send_string("\r\n");
 8003708:	4829      	ldr	r0, [pc, #164]	; (80037b0 <main+0x1a4>)
 800370a:	f7ff ff57 	bl	80035bc <send_string>
    		if ((received_string[counter] >= '0' && received_string[counter] <= '9') || received_string[counter] == '\r')
 800370e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003712:	5cf2      	ldrb	r2, [r6, r3]
 8003714:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8003718:	2909      	cmp	r1, #9
 800371a:	d929      	bls.n	8003770 <main+0x164>
 800371c:	2a0d      	cmp	r2, #13
 800371e:	d130      	bne.n	8003782 <main+0x176>
    				HAL_UART_Transmit(&huart, (uint8_t *)debug_3, strlen(debug_3), 500);
 8003720:	4826      	ldr	r0, [pc, #152]	; (80037bc <main+0x1b0>)
 8003722:	f7fc fd65 	bl	80001f0 <strlen>
 8003726:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800372a:	b282      	uxth	r2, r0
 800372c:	4923      	ldr	r1, [pc, #140]	; (80037bc <main+0x1b0>)
 800372e:	4620      	mov	r0, r4
 8003730:	f7ff fdc1 	bl	80032b6 <HAL_UART_Transmit>
					send_confirmation(received_string);
 8003734:	481f      	ldr	r0, [pc, #124]	; (80037b4 <main+0x1a8>)
 8003736:	f7ff ff51 	bl	80035dc <send_confirmation>
					sscanf(received_string,"%d", &values); // %d oznacza, ze bedzie tu wartosc mieszczaca sie w zakresie int32
 800373a:	aa02      	add	r2, sp, #8
 800373c:	4920      	ldr	r1, [pc, #128]	; (80037c0 <main+0x1b4>)
 800373e:	481d      	ldr	r0, [pc, #116]	; (80037b4 <main+0x1a8>)
 8003740:	f000 f8b0 	bl	80038a4 <siscanf>
					sprintf(data_calculated, "Liczba przemnozona x2: %d.\n\r", 2 * values);
 8003744:	9a02      	ldr	r2, [sp, #8]
 8003746:	491f      	ldr	r1, [pc, #124]	; (80037c4 <main+0x1b8>)
 8003748:	0052      	lsls	r2, r2, #1
 800374a:	a807      	add	r0, sp, #28
 800374c:	f000 f886 	bl	800385c <siprintf>
					HAL_UART_Transmit(&huart, data_calculated, strlen(data_calculated), 2000);
 8003750:	a807      	add	r0, sp, #28
 8003752:	f7fc fd4d 	bl	80001f0 <strlen>
 8003756:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800375a:	b282      	uxth	r2, r0
 800375c:	a907      	add	r1, sp, #28
 800375e:	4620      	mov	r0, r4
 8003760:	f7ff fda9 	bl	80032b6 <HAL_UART_Transmit>
					clear_table(received_string);
 8003764:	4813      	ldr	r0, [pc, #76]	; (80037b4 <main+0x1a8>)
 8003766:	f7ff ff25 	bl	80035b4 <clear_table>
					counter = 0;
 800376a:	f88d 5007 	strb.w	r5, [sp, #7]
 800376e:	e797      	b.n	80036a0 <main+0x94>
    				counter = (counter + 1) % sizeof(received_string);
 8003770:	3301      	adds	r3, #1
 8003772:	2132      	movs	r1, #50	; 0x32
 8003774:	fbb3 f2f1 	udiv	r2, r3, r1
 8003778:	fb01 3312 	mls	r3, r1, r2, r3
 800377c:	f88d 3007 	strb.w	r3, [sp, #7]
    			if (received_string[counter] == '\r')
 8003780:	e7a2      	b.n	80036c8 <main+0xbc>
    			HAL_UART_Transmit(&huart, (uint8_t *)&only_digits, strlen(only_digits),500); // Infromacja o przyjomowaniu jedynie liczb
 8003782:	4811      	ldr	r0, [pc, #68]	; (80037c8 <main+0x1bc>)
 8003784:	f7fc fd34 	bl	80001f0 <strlen>
 8003788:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800378c:	b282      	uxth	r2, r0
 800378e:	490e      	ldr	r1, [pc, #56]	; (80037c8 <main+0x1bc>)
 8003790:	4620      	mov	r0, r4
 8003792:	f7ff fd90 	bl	80032b6 <HAL_UART_Transmit>
    			send_string("\r\n");
 8003796:	4806      	ldr	r0, [pc, #24]	; (80037b0 <main+0x1a4>)
 8003798:	f7ff ff10 	bl	80035bc <send_string>
    			counter = 0;
 800379c:	f88d 5007 	strb.w	r5, [sp, #7]
 80037a0:	e792      	b.n	80036c8 <main+0xbc>
 80037a2:	bf00      	nop
 80037a4:	200004c4 	.word	0x200004c4
 80037a8:	2000010e 	.word	0x2000010e
 80037ac:	200000cc 	.word	0x200000cc
 80037b0:	08004b65 	.word	0x08004b65
 80037b4:	200005a1 	.word	0x200005a1
 80037b8:	2000056e 	.word	0x2000056e
 80037bc:	20000120 	.word	0x20000120
 80037c0:	08004b68 	.word	0x08004b68
 80037c4:	08004b6b 	.word	0x08004b6b
 80037c8:	20000131 	.word	0x20000131

080037cc <NMI_Handler>:
 80037cc:	4770      	bx	lr

080037ce <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80037ce:	e7fe      	b.n	80037ce <HardFault_Handler>

080037d0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80037d0:	e7fe      	b.n	80037d0 <MemManage_Handler>

080037d2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80037d2:	e7fe      	b.n	80037d2 <BusFault_Handler>

080037d4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80037d4:	e7fe      	b.n	80037d4 <UsageFault_Handler>

080037d6 <SVC_Handler>:
 80037d6:	4770      	bx	lr

080037d8 <DebugMon_Handler>:
 80037d8:	4770      	bx	lr

080037da <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80037da:	4770      	bx	lr

080037dc <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 80037dc:	f7fd bee2 	b.w	80015a4 <HAL_IncTick>

080037e0 <EXTI9_5_IRQHandler>:
  * @brief  This function handles EXTI9_5 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI9_5_IRQHandler (void)
{
 80037e0:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(UP_JOY_PIN);    /* Joystick Up push-button PI.08   */
 80037e2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80037e6:	f7fe f8e9 	bl	80019bc <HAL_GPIO_EXTI_IRQHandler>
  
  HAL_GPIO_EXTI_IRQHandler(LEFT_JOY_PIN);  /* Joystick Left push-button PI.09 */  
 80037ea:	f44f 7000 	mov.w	r0, #512	; 0x200
}
 80037ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(LEFT_JOY_PIN);  /* Joystick Left push-button PI.09 */  
 80037f2:	f7fe b8e3 	b.w	80019bc <HAL_GPIO_EXTI_IRQHandler>

080037f6 <EXTI15_10_IRQHandler>:
  * @brief  This function handles EXTI15_10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler (void)
{
 80037f6:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(DOWN_JOY_PIN);  /* Joystick Down push-button PI.10  */
 80037f8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80037fc:	f7fe f8de 	bl	80019bc <HAL_GPIO_EXTI_IRQHandler>
  
  HAL_GPIO_EXTI_IRQHandler(RIGHT_JOY_PIN); /* Joystick Right push-button PF.11 */   
 8003800:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003804:	f7fe f8da 	bl	80019bc <HAL_GPIO_EXTI_IRQHandler>
  
  HAL_GPIO_EXTI_IRQHandler(SEL_JOY_PIN);   /* Joystick Sel push-button PC.13   */ 
 8003808:	f44f 5000 	mov.w	r0, #8192	; 0x2000
}
 800380c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(SEL_JOY_PIN);   /* Joystick Sel push-button PC.13   */ 
 8003810:	f7fe b8d4 	b.w	80019bc <HAL_GPIO_EXTI_IRQHandler>

08003814 <__libc_init_array>:
 8003814:	b570      	push	{r4, r5, r6, lr}
 8003816:	4e0d      	ldr	r6, [pc, #52]	; (800384c <__libc_init_array+0x38>)
 8003818:	4c0d      	ldr	r4, [pc, #52]	; (8003850 <__libc_init_array+0x3c>)
 800381a:	1ba4      	subs	r4, r4, r6
 800381c:	10a4      	asrs	r4, r4, #2
 800381e:	2500      	movs	r5, #0
 8003820:	42a5      	cmp	r5, r4
 8003822:	d109      	bne.n	8003838 <__libc_init_array+0x24>
 8003824:	4e0b      	ldr	r6, [pc, #44]	; (8003854 <__libc_init_array+0x40>)
 8003826:	4c0c      	ldr	r4, [pc, #48]	; (8003858 <__libc_init_array+0x44>)
 8003828:	f001 f932 	bl	8004a90 <_init>
 800382c:	1ba4      	subs	r4, r4, r6
 800382e:	10a4      	asrs	r4, r4, #2
 8003830:	2500      	movs	r5, #0
 8003832:	42a5      	cmp	r5, r4
 8003834:	d105      	bne.n	8003842 <__libc_init_array+0x2e>
 8003836:	bd70      	pop	{r4, r5, r6, pc}
 8003838:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800383c:	4798      	blx	r3
 800383e:	3501      	adds	r5, #1
 8003840:	e7ee      	b.n	8003820 <__libc_init_array+0xc>
 8003842:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003846:	4798      	blx	r3
 8003848:	3501      	adds	r5, #1
 800384a:	e7f2      	b.n	8003832 <__libc_init_array+0x1e>
 800384c:	08004d50 	.word	0x08004d50
 8003850:	08004d50 	.word	0x08004d50
 8003854:	08004d50 	.word	0x08004d50
 8003858:	08004d54 	.word	0x08004d54

0800385c <siprintf>:
 800385c:	b40e      	push	{r1, r2, r3}
 800385e:	b500      	push	{lr}
 8003860:	b09c      	sub	sp, #112	; 0x70
 8003862:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003866:	ab1d      	add	r3, sp, #116	; 0x74
 8003868:	f8ad 1014 	strh.w	r1, [sp, #20]
 800386c:	9002      	str	r0, [sp, #8]
 800386e:	9006      	str	r0, [sp, #24]
 8003870:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003874:	480a      	ldr	r0, [pc, #40]	; (80038a0 <siprintf+0x44>)
 8003876:	9104      	str	r1, [sp, #16]
 8003878:	9107      	str	r1, [sp, #28]
 800387a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800387e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003882:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003886:	6800      	ldr	r0, [r0, #0]
 8003888:	9301      	str	r3, [sp, #4]
 800388a:	a902      	add	r1, sp, #8
 800388c:	f000 f892 	bl	80039b4 <_svfiprintf_r>
 8003890:	9b02      	ldr	r3, [sp, #8]
 8003892:	2200      	movs	r2, #0
 8003894:	701a      	strb	r2, [r3, #0]
 8003896:	b01c      	add	sp, #112	; 0x70
 8003898:	f85d eb04 	ldr.w	lr, [sp], #4
 800389c:	b003      	add	sp, #12
 800389e:	4770      	bx	lr
 80038a0:	20000188 	.word	0x20000188

080038a4 <siscanf>:
 80038a4:	b40e      	push	{r1, r2, r3}
 80038a6:	b530      	push	{r4, r5, lr}
 80038a8:	b09c      	sub	sp, #112	; 0x70
 80038aa:	ac1f      	add	r4, sp, #124	; 0x7c
 80038ac:	f44f 7201 	mov.w	r2, #516	; 0x204
 80038b0:	f854 5b04 	ldr.w	r5, [r4], #4
 80038b4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80038b8:	9002      	str	r0, [sp, #8]
 80038ba:	9006      	str	r0, [sp, #24]
 80038bc:	f7fc fc98 	bl	80001f0 <strlen>
 80038c0:	4b0b      	ldr	r3, [pc, #44]	; (80038f0 <siscanf+0x4c>)
 80038c2:	9003      	str	r0, [sp, #12]
 80038c4:	9007      	str	r0, [sp, #28]
 80038c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80038c8:	480a      	ldr	r0, [pc, #40]	; (80038f4 <siscanf+0x50>)
 80038ca:	9401      	str	r4, [sp, #4]
 80038cc:	2300      	movs	r3, #0
 80038ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80038d0:	9314      	str	r3, [sp, #80]	; 0x50
 80038d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038d6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80038da:	462a      	mov	r2, r5
 80038dc:	4623      	mov	r3, r4
 80038de:	a902      	add	r1, sp, #8
 80038e0:	6800      	ldr	r0, [r0, #0]
 80038e2:	f000 f9b5 	bl	8003c50 <__ssvfiscanf_r>
 80038e6:	b01c      	add	sp, #112	; 0x70
 80038e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038ec:	b003      	add	sp, #12
 80038ee:	4770      	bx	lr
 80038f0:	080038f9 	.word	0x080038f9
 80038f4:	20000188 	.word	0x20000188

080038f8 <__seofread>:
 80038f8:	2000      	movs	r0, #0
 80038fa:	4770      	bx	lr

080038fc <__ssputs_r>:
 80038fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003900:	688e      	ldr	r6, [r1, #8]
 8003902:	429e      	cmp	r6, r3
 8003904:	4682      	mov	sl, r0
 8003906:	460c      	mov	r4, r1
 8003908:	4691      	mov	r9, r2
 800390a:	4698      	mov	r8, r3
 800390c:	d835      	bhi.n	800397a <__ssputs_r+0x7e>
 800390e:	898a      	ldrh	r2, [r1, #12]
 8003910:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003914:	d031      	beq.n	800397a <__ssputs_r+0x7e>
 8003916:	6825      	ldr	r5, [r4, #0]
 8003918:	6909      	ldr	r1, [r1, #16]
 800391a:	1a6f      	subs	r7, r5, r1
 800391c:	6965      	ldr	r5, [r4, #20]
 800391e:	2302      	movs	r3, #2
 8003920:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003924:	fb95 f5f3 	sdiv	r5, r5, r3
 8003928:	f108 0301 	add.w	r3, r8, #1
 800392c:	443b      	add	r3, r7
 800392e:	429d      	cmp	r5, r3
 8003930:	bf38      	it	cc
 8003932:	461d      	movcc	r5, r3
 8003934:	0553      	lsls	r3, r2, #21
 8003936:	d531      	bpl.n	800399c <__ssputs_r+0xa0>
 8003938:	4629      	mov	r1, r5
 800393a:	f000 ffef 	bl	800491c <_malloc_r>
 800393e:	4606      	mov	r6, r0
 8003940:	b950      	cbnz	r0, 8003958 <__ssputs_r+0x5c>
 8003942:	230c      	movs	r3, #12
 8003944:	f8ca 3000 	str.w	r3, [sl]
 8003948:	89a3      	ldrh	r3, [r4, #12]
 800394a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800394e:	81a3      	strh	r3, [r4, #12]
 8003950:	f04f 30ff 	mov.w	r0, #4294967295
 8003954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003958:	463a      	mov	r2, r7
 800395a:	6921      	ldr	r1, [r4, #16]
 800395c:	f000 ff6a 	bl	8004834 <memcpy>
 8003960:	89a3      	ldrh	r3, [r4, #12]
 8003962:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800396a:	81a3      	strh	r3, [r4, #12]
 800396c:	6126      	str	r6, [r4, #16]
 800396e:	6165      	str	r5, [r4, #20]
 8003970:	443e      	add	r6, r7
 8003972:	1bed      	subs	r5, r5, r7
 8003974:	6026      	str	r6, [r4, #0]
 8003976:	60a5      	str	r5, [r4, #8]
 8003978:	4646      	mov	r6, r8
 800397a:	4546      	cmp	r6, r8
 800397c:	bf28      	it	cs
 800397e:	4646      	movcs	r6, r8
 8003980:	4632      	mov	r2, r6
 8003982:	4649      	mov	r1, r9
 8003984:	6820      	ldr	r0, [r4, #0]
 8003986:	f000 ff60 	bl	800484a <memmove>
 800398a:	68a3      	ldr	r3, [r4, #8]
 800398c:	1b9b      	subs	r3, r3, r6
 800398e:	60a3      	str	r3, [r4, #8]
 8003990:	6823      	ldr	r3, [r4, #0]
 8003992:	441e      	add	r6, r3
 8003994:	6026      	str	r6, [r4, #0]
 8003996:	2000      	movs	r0, #0
 8003998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800399c:	462a      	mov	r2, r5
 800399e:	f001 f81b 	bl	80049d8 <_realloc_r>
 80039a2:	4606      	mov	r6, r0
 80039a4:	2800      	cmp	r0, #0
 80039a6:	d1e1      	bne.n	800396c <__ssputs_r+0x70>
 80039a8:	6921      	ldr	r1, [r4, #16]
 80039aa:	4650      	mov	r0, sl
 80039ac:	f000 ff68 	bl	8004880 <_free_r>
 80039b0:	e7c7      	b.n	8003942 <__ssputs_r+0x46>
	...

080039b4 <_svfiprintf_r>:
 80039b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039b8:	b09d      	sub	sp, #116	; 0x74
 80039ba:	4680      	mov	r8, r0
 80039bc:	9303      	str	r3, [sp, #12]
 80039be:	898b      	ldrh	r3, [r1, #12]
 80039c0:	061c      	lsls	r4, r3, #24
 80039c2:	460d      	mov	r5, r1
 80039c4:	4616      	mov	r6, r2
 80039c6:	d50f      	bpl.n	80039e8 <_svfiprintf_r+0x34>
 80039c8:	690b      	ldr	r3, [r1, #16]
 80039ca:	b96b      	cbnz	r3, 80039e8 <_svfiprintf_r+0x34>
 80039cc:	2140      	movs	r1, #64	; 0x40
 80039ce:	f000 ffa5 	bl	800491c <_malloc_r>
 80039d2:	6028      	str	r0, [r5, #0]
 80039d4:	6128      	str	r0, [r5, #16]
 80039d6:	b928      	cbnz	r0, 80039e4 <_svfiprintf_r+0x30>
 80039d8:	230c      	movs	r3, #12
 80039da:	f8c8 3000 	str.w	r3, [r8]
 80039de:	f04f 30ff 	mov.w	r0, #4294967295
 80039e2:	e0c5      	b.n	8003b70 <_svfiprintf_r+0x1bc>
 80039e4:	2340      	movs	r3, #64	; 0x40
 80039e6:	616b      	str	r3, [r5, #20]
 80039e8:	2300      	movs	r3, #0
 80039ea:	9309      	str	r3, [sp, #36]	; 0x24
 80039ec:	2320      	movs	r3, #32
 80039ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039f2:	2330      	movs	r3, #48	; 0x30
 80039f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039f8:	f04f 0b01 	mov.w	fp, #1
 80039fc:	4637      	mov	r7, r6
 80039fe:	463c      	mov	r4, r7
 8003a00:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d13c      	bne.n	8003a82 <_svfiprintf_r+0xce>
 8003a08:	ebb7 0a06 	subs.w	sl, r7, r6
 8003a0c:	d00b      	beq.n	8003a26 <_svfiprintf_r+0x72>
 8003a0e:	4653      	mov	r3, sl
 8003a10:	4632      	mov	r2, r6
 8003a12:	4629      	mov	r1, r5
 8003a14:	4640      	mov	r0, r8
 8003a16:	f7ff ff71 	bl	80038fc <__ssputs_r>
 8003a1a:	3001      	adds	r0, #1
 8003a1c:	f000 80a3 	beq.w	8003b66 <_svfiprintf_r+0x1b2>
 8003a20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a22:	4453      	add	r3, sl
 8003a24:	9309      	str	r3, [sp, #36]	; 0x24
 8003a26:	783b      	ldrb	r3, [r7, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 809c 	beq.w	8003b66 <_svfiprintf_r+0x1b2>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	f04f 32ff 	mov.w	r2, #4294967295
 8003a34:	9304      	str	r3, [sp, #16]
 8003a36:	9307      	str	r3, [sp, #28]
 8003a38:	9205      	str	r2, [sp, #20]
 8003a3a:	9306      	str	r3, [sp, #24]
 8003a3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a40:	931a      	str	r3, [sp, #104]	; 0x68
 8003a42:	2205      	movs	r2, #5
 8003a44:	7821      	ldrb	r1, [r4, #0]
 8003a46:	4850      	ldr	r0, [pc, #320]	; (8003b88 <_svfiprintf_r+0x1d4>)
 8003a48:	f7fc fbda 	bl	8000200 <memchr>
 8003a4c:	1c67      	adds	r7, r4, #1
 8003a4e:	9b04      	ldr	r3, [sp, #16]
 8003a50:	b9d8      	cbnz	r0, 8003a8a <_svfiprintf_r+0xd6>
 8003a52:	06d9      	lsls	r1, r3, #27
 8003a54:	bf44      	itt	mi
 8003a56:	2220      	movmi	r2, #32
 8003a58:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003a5c:	071a      	lsls	r2, r3, #28
 8003a5e:	bf44      	itt	mi
 8003a60:	222b      	movmi	r2, #43	; 0x2b
 8003a62:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003a66:	7822      	ldrb	r2, [r4, #0]
 8003a68:	2a2a      	cmp	r2, #42	; 0x2a
 8003a6a:	d016      	beq.n	8003a9a <_svfiprintf_r+0xe6>
 8003a6c:	9a07      	ldr	r2, [sp, #28]
 8003a6e:	2100      	movs	r1, #0
 8003a70:	200a      	movs	r0, #10
 8003a72:	4627      	mov	r7, r4
 8003a74:	3401      	adds	r4, #1
 8003a76:	783b      	ldrb	r3, [r7, #0]
 8003a78:	3b30      	subs	r3, #48	; 0x30
 8003a7a:	2b09      	cmp	r3, #9
 8003a7c:	d951      	bls.n	8003b22 <_svfiprintf_r+0x16e>
 8003a7e:	b1c9      	cbz	r1, 8003ab4 <_svfiprintf_r+0x100>
 8003a80:	e011      	b.n	8003aa6 <_svfiprintf_r+0xf2>
 8003a82:	2b25      	cmp	r3, #37	; 0x25
 8003a84:	d0c0      	beq.n	8003a08 <_svfiprintf_r+0x54>
 8003a86:	4627      	mov	r7, r4
 8003a88:	e7b9      	b.n	80039fe <_svfiprintf_r+0x4a>
 8003a8a:	4a3f      	ldr	r2, [pc, #252]	; (8003b88 <_svfiprintf_r+0x1d4>)
 8003a8c:	1a80      	subs	r0, r0, r2
 8003a8e:	fa0b f000 	lsl.w	r0, fp, r0
 8003a92:	4318      	orrs	r0, r3
 8003a94:	9004      	str	r0, [sp, #16]
 8003a96:	463c      	mov	r4, r7
 8003a98:	e7d3      	b.n	8003a42 <_svfiprintf_r+0x8e>
 8003a9a:	9a03      	ldr	r2, [sp, #12]
 8003a9c:	1d11      	adds	r1, r2, #4
 8003a9e:	6812      	ldr	r2, [r2, #0]
 8003aa0:	9103      	str	r1, [sp, #12]
 8003aa2:	2a00      	cmp	r2, #0
 8003aa4:	db01      	blt.n	8003aaa <_svfiprintf_r+0xf6>
 8003aa6:	9207      	str	r2, [sp, #28]
 8003aa8:	e004      	b.n	8003ab4 <_svfiprintf_r+0x100>
 8003aaa:	4252      	negs	r2, r2
 8003aac:	f043 0302 	orr.w	r3, r3, #2
 8003ab0:	9207      	str	r2, [sp, #28]
 8003ab2:	9304      	str	r3, [sp, #16]
 8003ab4:	783b      	ldrb	r3, [r7, #0]
 8003ab6:	2b2e      	cmp	r3, #46	; 0x2e
 8003ab8:	d10e      	bne.n	8003ad8 <_svfiprintf_r+0x124>
 8003aba:	787b      	ldrb	r3, [r7, #1]
 8003abc:	2b2a      	cmp	r3, #42	; 0x2a
 8003abe:	f107 0101 	add.w	r1, r7, #1
 8003ac2:	d132      	bne.n	8003b2a <_svfiprintf_r+0x176>
 8003ac4:	9b03      	ldr	r3, [sp, #12]
 8003ac6:	1d1a      	adds	r2, r3, #4
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	9203      	str	r2, [sp, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	bfb8      	it	lt
 8003ad0:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ad4:	3702      	adds	r7, #2
 8003ad6:	9305      	str	r3, [sp, #20]
 8003ad8:	4c2c      	ldr	r4, [pc, #176]	; (8003b8c <_svfiprintf_r+0x1d8>)
 8003ada:	7839      	ldrb	r1, [r7, #0]
 8003adc:	2203      	movs	r2, #3
 8003ade:	4620      	mov	r0, r4
 8003ae0:	f7fc fb8e 	bl	8000200 <memchr>
 8003ae4:	b138      	cbz	r0, 8003af6 <_svfiprintf_r+0x142>
 8003ae6:	2340      	movs	r3, #64	; 0x40
 8003ae8:	1b00      	subs	r0, r0, r4
 8003aea:	fa03 f000 	lsl.w	r0, r3, r0
 8003aee:	9b04      	ldr	r3, [sp, #16]
 8003af0:	4303      	orrs	r3, r0
 8003af2:	9304      	str	r3, [sp, #16]
 8003af4:	3701      	adds	r7, #1
 8003af6:	7839      	ldrb	r1, [r7, #0]
 8003af8:	4825      	ldr	r0, [pc, #148]	; (8003b90 <_svfiprintf_r+0x1dc>)
 8003afa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003afe:	2206      	movs	r2, #6
 8003b00:	1c7e      	adds	r6, r7, #1
 8003b02:	f7fc fb7d 	bl	8000200 <memchr>
 8003b06:	2800      	cmp	r0, #0
 8003b08:	d035      	beq.n	8003b76 <_svfiprintf_r+0x1c2>
 8003b0a:	4b22      	ldr	r3, [pc, #136]	; (8003b94 <_svfiprintf_r+0x1e0>)
 8003b0c:	b9fb      	cbnz	r3, 8003b4e <_svfiprintf_r+0x19a>
 8003b0e:	9b03      	ldr	r3, [sp, #12]
 8003b10:	3307      	adds	r3, #7
 8003b12:	f023 0307 	bic.w	r3, r3, #7
 8003b16:	3308      	adds	r3, #8
 8003b18:	9303      	str	r3, [sp, #12]
 8003b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b1c:	444b      	add	r3, r9
 8003b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8003b20:	e76c      	b.n	80039fc <_svfiprintf_r+0x48>
 8003b22:	fb00 3202 	mla	r2, r0, r2, r3
 8003b26:	2101      	movs	r1, #1
 8003b28:	e7a3      	b.n	8003a72 <_svfiprintf_r+0xbe>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	9305      	str	r3, [sp, #20]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	240a      	movs	r4, #10
 8003b32:	460f      	mov	r7, r1
 8003b34:	3101      	adds	r1, #1
 8003b36:	783a      	ldrb	r2, [r7, #0]
 8003b38:	3a30      	subs	r2, #48	; 0x30
 8003b3a:	2a09      	cmp	r2, #9
 8003b3c:	d903      	bls.n	8003b46 <_svfiprintf_r+0x192>
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0ca      	beq.n	8003ad8 <_svfiprintf_r+0x124>
 8003b42:	9005      	str	r0, [sp, #20]
 8003b44:	e7c8      	b.n	8003ad8 <_svfiprintf_r+0x124>
 8003b46:	fb04 2000 	mla	r0, r4, r0, r2
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e7f1      	b.n	8003b32 <_svfiprintf_r+0x17e>
 8003b4e:	ab03      	add	r3, sp, #12
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	462a      	mov	r2, r5
 8003b54:	4b10      	ldr	r3, [pc, #64]	; (8003b98 <_svfiprintf_r+0x1e4>)
 8003b56:	a904      	add	r1, sp, #16
 8003b58:	4640      	mov	r0, r8
 8003b5a:	f3af 8000 	nop.w
 8003b5e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003b62:	4681      	mov	r9, r0
 8003b64:	d1d9      	bne.n	8003b1a <_svfiprintf_r+0x166>
 8003b66:	89ab      	ldrh	r3, [r5, #12]
 8003b68:	065b      	lsls	r3, r3, #25
 8003b6a:	f53f af38 	bmi.w	80039de <_svfiprintf_r+0x2a>
 8003b6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b70:	b01d      	add	sp, #116	; 0x74
 8003b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b76:	ab03      	add	r3, sp, #12
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	462a      	mov	r2, r5
 8003b7c:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <_svfiprintf_r+0x1e4>)
 8003b7e:	a904      	add	r1, sp, #16
 8003b80:	4640      	mov	r0, r8
 8003b82:	f000 fa2f 	bl	8003fe4 <_printf_i>
 8003b86:	e7ea      	b.n	8003b5e <_svfiprintf_r+0x1aa>
 8003b88:	08004b88 	.word	0x08004b88
 8003b8c:	08004b8e 	.word	0x08004b8e
 8003b90:	08004b92 	.word	0x08004b92
 8003b94:	00000000 	.word	0x00000000
 8003b98:	080038fd 	.word	0x080038fd

08003b9c <_sungetc_r>:
 8003b9c:	b538      	push	{r3, r4, r5, lr}
 8003b9e:	1c4b      	adds	r3, r1, #1
 8003ba0:	4614      	mov	r4, r2
 8003ba2:	d103      	bne.n	8003bac <_sungetc_r+0x10>
 8003ba4:	f04f 35ff 	mov.w	r5, #4294967295
 8003ba8:	4628      	mov	r0, r5
 8003baa:	bd38      	pop	{r3, r4, r5, pc}
 8003bac:	8993      	ldrh	r3, [r2, #12]
 8003bae:	f023 0320 	bic.w	r3, r3, #32
 8003bb2:	8193      	strh	r3, [r2, #12]
 8003bb4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003bb6:	6852      	ldr	r2, [r2, #4]
 8003bb8:	b2cd      	uxtb	r5, r1
 8003bba:	b18b      	cbz	r3, 8003be0 <_sungetc_r+0x44>
 8003bbc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	da08      	bge.n	8003bd4 <_sungetc_r+0x38>
 8003bc2:	6823      	ldr	r3, [r4, #0]
 8003bc4:	1e5a      	subs	r2, r3, #1
 8003bc6:	6022      	str	r2, [r4, #0]
 8003bc8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003bcc:	6863      	ldr	r3, [r4, #4]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	6063      	str	r3, [r4, #4]
 8003bd2:	e7e9      	b.n	8003ba8 <_sungetc_r+0xc>
 8003bd4:	4621      	mov	r1, r4
 8003bd6:	f000 fdcf 	bl	8004778 <__submore>
 8003bda:	2800      	cmp	r0, #0
 8003bdc:	d0f1      	beq.n	8003bc2 <_sungetc_r+0x26>
 8003bde:	e7e1      	b.n	8003ba4 <_sungetc_r+0x8>
 8003be0:	6921      	ldr	r1, [r4, #16]
 8003be2:	6823      	ldr	r3, [r4, #0]
 8003be4:	b151      	cbz	r1, 8003bfc <_sungetc_r+0x60>
 8003be6:	4299      	cmp	r1, r3
 8003be8:	d208      	bcs.n	8003bfc <_sungetc_r+0x60>
 8003bea:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8003bee:	428d      	cmp	r5, r1
 8003bf0:	d104      	bne.n	8003bfc <_sungetc_r+0x60>
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	3201      	adds	r2, #1
 8003bf6:	6023      	str	r3, [r4, #0]
 8003bf8:	6062      	str	r2, [r4, #4]
 8003bfa:	e7d5      	b.n	8003ba8 <_sungetc_r+0xc>
 8003bfc:	63e3      	str	r3, [r4, #60]	; 0x3c
 8003bfe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c02:	6363      	str	r3, [r4, #52]	; 0x34
 8003c04:	2303      	movs	r3, #3
 8003c06:	63a3      	str	r3, [r4, #56]	; 0x38
 8003c08:	4623      	mov	r3, r4
 8003c0a:	6422      	str	r2, [r4, #64]	; 0x40
 8003c0c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003c10:	6023      	str	r3, [r4, #0]
 8003c12:	2301      	movs	r3, #1
 8003c14:	e7dc      	b.n	8003bd0 <_sungetc_r+0x34>

08003c16 <__ssrefill_r>:
 8003c16:	b510      	push	{r4, lr}
 8003c18:	460c      	mov	r4, r1
 8003c1a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003c1c:	b169      	cbz	r1, 8003c3a <__ssrefill_r+0x24>
 8003c1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c22:	4299      	cmp	r1, r3
 8003c24:	d001      	beq.n	8003c2a <__ssrefill_r+0x14>
 8003c26:	f000 fe2b 	bl	8004880 <_free_r>
 8003c2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c2c:	6063      	str	r3, [r4, #4]
 8003c2e:	2000      	movs	r0, #0
 8003c30:	6360      	str	r0, [r4, #52]	; 0x34
 8003c32:	b113      	cbz	r3, 8003c3a <__ssrefill_r+0x24>
 8003c34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003c36:	6023      	str	r3, [r4, #0]
 8003c38:	bd10      	pop	{r4, pc}
 8003c3a:	6923      	ldr	r3, [r4, #16]
 8003c3c:	6023      	str	r3, [r4, #0]
 8003c3e:	2300      	movs	r3, #0
 8003c40:	6063      	str	r3, [r4, #4]
 8003c42:	89a3      	ldrh	r3, [r4, #12]
 8003c44:	f043 0320 	orr.w	r3, r3, #32
 8003c48:	81a3      	strh	r3, [r4, #12]
 8003c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c4e:	bd10      	pop	{r4, pc}

08003c50 <__ssvfiscanf_r>:
 8003c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c54:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 8003c58:	f10d 080c 	add.w	r8, sp, #12
 8003c5c:	9301      	str	r3, [sp, #4]
 8003c5e:	2300      	movs	r3, #0
 8003c60:	9346      	str	r3, [sp, #280]	; 0x118
 8003c62:	9347      	str	r3, [sp, #284]	; 0x11c
 8003c64:	4ba0      	ldr	r3, [pc, #640]	; (8003ee8 <__ssvfiscanf_r+0x298>)
 8003c66:	93a2      	str	r3, [sp, #648]	; 0x288
 8003c68:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8003ef0 <__ssvfiscanf_r+0x2a0>
 8003c6c:	4b9f      	ldr	r3, [pc, #636]	; (8003eec <__ssvfiscanf_r+0x29c>)
 8003c6e:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 8003c72:	4606      	mov	r6, r0
 8003c74:	460c      	mov	r4, r1
 8003c76:	93a3      	str	r3, [sp, #652]	; 0x28c
 8003c78:	4692      	mov	sl, r2
 8003c7a:	270a      	movs	r7, #10
 8003c7c:	f89a 3000 	ldrb.w	r3, [sl]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 812f 	beq.w	8003ee4 <__ssvfiscanf_r+0x294>
 8003c86:	f000 fdb5 	bl	80047f4 <__locale_ctype_ptr>
 8003c8a:	f89a b000 	ldrb.w	fp, [sl]
 8003c8e:	4458      	add	r0, fp
 8003c90:	7843      	ldrb	r3, [r0, #1]
 8003c92:	f013 0308 	ands.w	r3, r3, #8
 8003c96:	d143      	bne.n	8003d20 <__ssvfiscanf_r+0xd0>
 8003c98:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8003c9c:	f10a 0501 	add.w	r5, sl, #1
 8003ca0:	f040 8099 	bne.w	8003dd6 <__ssvfiscanf_r+0x186>
 8003ca4:	9345      	str	r3, [sp, #276]	; 0x114
 8003ca6:	9343      	str	r3, [sp, #268]	; 0x10c
 8003ca8:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8003cac:	2b2a      	cmp	r3, #42	; 0x2a
 8003cae:	d103      	bne.n	8003cb8 <__ssvfiscanf_r+0x68>
 8003cb0:	2310      	movs	r3, #16
 8003cb2:	9343      	str	r3, [sp, #268]	; 0x10c
 8003cb4:	f10a 0502 	add.w	r5, sl, #2
 8003cb8:	7829      	ldrb	r1, [r5, #0]
 8003cba:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8003cbe:	2a09      	cmp	r2, #9
 8003cc0:	46aa      	mov	sl, r5
 8003cc2:	f105 0501 	add.w	r5, r5, #1
 8003cc6:	d941      	bls.n	8003d4c <__ssvfiscanf_r+0xfc>
 8003cc8:	2203      	movs	r2, #3
 8003cca:	4889      	ldr	r0, [pc, #548]	; (8003ef0 <__ssvfiscanf_r+0x2a0>)
 8003ccc:	f7fc fa98 	bl	8000200 <memchr>
 8003cd0:	b138      	cbz	r0, 8003ce2 <__ssvfiscanf_r+0x92>
 8003cd2:	eba0 0309 	sub.w	r3, r0, r9
 8003cd6:	2001      	movs	r0, #1
 8003cd8:	4098      	lsls	r0, r3
 8003cda:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003cdc:	4318      	orrs	r0, r3
 8003cde:	9043      	str	r0, [sp, #268]	; 0x10c
 8003ce0:	46aa      	mov	sl, r5
 8003ce2:	f89a 3000 	ldrb.w	r3, [sl]
 8003ce6:	2b67      	cmp	r3, #103	; 0x67
 8003ce8:	f10a 0501 	add.w	r5, sl, #1
 8003cec:	d84a      	bhi.n	8003d84 <__ssvfiscanf_r+0x134>
 8003cee:	2b65      	cmp	r3, #101	; 0x65
 8003cf0:	f080 80b7 	bcs.w	8003e62 <__ssvfiscanf_r+0x212>
 8003cf4:	2b47      	cmp	r3, #71	; 0x47
 8003cf6:	d82f      	bhi.n	8003d58 <__ssvfiscanf_r+0x108>
 8003cf8:	2b45      	cmp	r3, #69	; 0x45
 8003cfa:	f080 80b2 	bcs.w	8003e62 <__ssvfiscanf_r+0x212>
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 8082 	beq.w	8003e08 <__ssvfiscanf_r+0x1b8>
 8003d04:	2b25      	cmp	r3, #37	; 0x25
 8003d06:	d066      	beq.n	8003dd6 <__ssvfiscanf_r+0x186>
 8003d08:	2303      	movs	r3, #3
 8003d0a:	9349      	str	r3, [sp, #292]	; 0x124
 8003d0c:	9744      	str	r7, [sp, #272]	; 0x110
 8003d0e:	e045      	b.n	8003d9c <__ssvfiscanf_r+0x14c>
 8003d10:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8003d12:	3101      	adds	r1, #1
 8003d14:	9147      	str	r1, [sp, #284]	; 0x11c
 8003d16:	6861      	ldr	r1, [r4, #4]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	3901      	subs	r1, #1
 8003d1c:	6061      	str	r1, [r4, #4]
 8003d1e:	6023      	str	r3, [r4, #0]
 8003d20:	6863      	ldr	r3, [r4, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	dd0b      	ble.n	8003d3e <__ssvfiscanf_r+0xee>
 8003d26:	f000 fd65 	bl	80047f4 <__locale_ctype_ptr>
 8003d2a:	6823      	ldr	r3, [r4, #0]
 8003d2c:	7819      	ldrb	r1, [r3, #0]
 8003d2e:	4408      	add	r0, r1
 8003d30:	7841      	ldrb	r1, [r0, #1]
 8003d32:	070d      	lsls	r5, r1, #28
 8003d34:	d4ec      	bmi.n	8003d10 <__ssvfiscanf_r+0xc0>
 8003d36:	f10a 0501 	add.w	r5, sl, #1
 8003d3a:	46aa      	mov	sl, r5
 8003d3c:	e79e      	b.n	8003c7c <__ssvfiscanf_r+0x2c>
 8003d3e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8003d40:	4621      	mov	r1, r4
 8003d42:	4630      	mov	r0, r6
 8003d44:	4798      	blx	r3
 8003d46:	2800      	cmp	r0, #0
 8003d48:	d0ed      	beq.n	8003d26 <__ssvfiscanf_r+0xd6>
 8003d4a:	e7f4      	b.n	8003d36 <__ssvfiscanf_r+0xe6>
 8003d4c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8003d4e:	fb07 1303 	mla	r3, r7, r3, r1
 8003d52:	3b30      	subs	r3, #48	; 0x30
 8003d54:	9345      	str	r3, [sp, #276]	; 0x114
 8003d56:	e7af      	b.n	8003cb8 <__ssvfiscanf_r+0x68>
 8003d58:	2b5b      	cmp	r3, #91	; 0x5b
 8003d5a:	d061      	beq.n	8003e20 <__ssvfiscanf_r+0x1d0>
 8003d5c:	d80c      	bhi.n	8003d78 <__ssvfiscanf_r+0x128>
 8003d5e:	2b58      	cmp	r3, #88	; 0x58
 8003d60:	d1d2      	bne.n	8003d08 <__ssvfiscanf_r+0xb8>
 8003d62:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8003d64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d68:	9243      	str	r2, [sp, #268]	; 0x10c
 8003d6a:	2210      	movs	r2, #16
 8003d6c:	9244      	str	r2, [sp, #272]	; 0x110
 8003d6e:	2b6f      	cmp	r3, #111	; 0x6f
 8003d70:	bfb4      	ite	lt
 8003d72:	2303      	movlt	r3, #3
 8003d74:	2304      	movge	r3, #4
 8003d76:	e010      	b.n	8003d9a <__ssvfiscanf_r+0x14a>
 8003d78:	2b63      	cmp	r3, #99	; 0x63
 8003d7a:	d05c      	beq.n	8003e36 <__ssvfiscanf_r+0x1e6>
 8003d7c:	2b64      	cmp	r3, #100	; 0x64
 8003d7e:	d1c3      	bne.n	8003d08 <__ssvfiscanf_r+0xb8>
 8003d80:	9744      	str	r7, [sp, #272]	; 0x110
 8003d82:	e7f4      	b.n	8003d6e <__ssvfiscanf_r+0x11e>
 8003d84:	2b70      	cmp	r3, #112	; 0x70
 8003d86:	d042      	beq.n	8003e0e <__ssvfiscanf_r+0x1be>
 8003d88:	d81d      	bhi.n	8003dc6 <__ssvfiscanf_r+0x176>
 8003d8a:	2b6e      	cmp	r3, #110	; 0x6e
 8003d8c:	d059      	beq.n	8003e42 <__ssvfiscanf_r+0x1f2>
 8003d8e:	d843      	bhi.n	8003e18 <__ssvfiscanf_r+0x1c8>
 8003d90:	2b69      	cmp	r3, #105	; 0x69
 8003d92:	d1b9      	bne.n	8003d08 <__ssvfiscanf_r+0xb8>
 8003d94:	2300      	movs	r3, #0
 8003d96:	9344      	str	r3, [sp, #272]	; 0x110
 8003d98:	2303      	movs	r3, #3
 8003d9a:	9349      	str	r3, [sp, #292]	; 0x124
 8003d9c:	6863      	ldr	r3, [r4, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	dd61      	ble.n	8003e66 <__ssvfiscanf_r+0x216>
 8003da2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003da4:	0659      	lsls	r1, r3, #25
 8003da6:	d56f      	bpl.n	8003e88 <__ssvfiscanf_r+0x238>
 8003da8:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	dc7c      	bgt.n	8003ea8 <__ssvfiscanf_r+0x258>
 8003dae:	ab01      	add	r3, sp, #4
 8003db0:	4622      	mov	r2, r4
 8003db2:	a943      	add	r1, sp, #268	; 0x10c
 8003db4:	4630      	mov	r0, r6
 8003db6:	f000 fa35 	bl	8004224 <_scanf_chars>
 8003dba:	2801      	cmp	r0, #1
 8003dbc:	f000 8092 	beq.w	8003ee4 <__ssvfiscanf_r+0x294>
 8003dc0:	2802      	cmp	r0, #2
 8003dc2:	d1ba      	bne.n	8003d3a <__ssvfiscanf_r+0xea>
 8003dc4:	e01d      	b.n	8003e02 <__ssvfiscanf_r+0x1b2>
 8003dc6:	2b75      	cmp	r3, #117	; 0x75
 8003dc8:	d0da      	beq.n	8003d80 <__ssvfiscanf_r+0x130>
 8003dca:	2b78      	cmp	r3, #120	; 0x78
 8003dcc:	d0c9      	beq.n	8003d62 <__ssvfiscanf_r+0x112>
 8003dce:	2b73      	cmp	r3, #115	; 0x73
 8003dd0:	d19a      	bne.n	8003d08 <__ssvfiscanf_r+0xb8>
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	e7e1      	b.n	8003d9a <__ssvfiscanf_r+0x14a>
 8003dd6:	6863      	ldr	r3, [r4, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	dd0c      	ble.n	8003df6 <__ssvfiscanf_r+0x1a6>
 8003ddc:	6823      	ldr	r3, [r4, #0]
 8003dde:	781a      	ldrb	r2, [r3, #0]
 8003de0:	4593      	cmp	fp, r2
 8003de2:	d17f      	bne.n	8003ee4 <__ssvfiscanf_r+0x294>
 8003de4:	3301      	adds	r3, #1
 8003de6:	6862      	ldr	r2, [r4, #4]
 8003de8:	6023      	str	r3, [r4, #0]
 8003dea:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003dec:	3a01      	subs	r2, #1
 8003dee:	3301      	adds	r3, #1
 8003df0:	6062      	str	r2, [r4, #4]
 8003df2:	9347      	str	r3, [sp, #284]	; 0x11c
 8003df4:	e7a1      	b.n	8003d3a <__ssvfiscanf_r+0xea>
 8003df6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8003df8:	4621      	mov	r1, r4
 8003dfa:	4630      	mov	r0, r6
 8003dfc:	4798      	blx	r3
 8003dfe:	2800      	cmp	r0, #0
 8003e00:	d0ec      	beq.n	8003ddc <__ssvfiscanf_r+0x18c>
 8003e02:	9846      	ldr	r0, [sp, #280]	; 0x118
 8003e04:	2800      	cmp	r0, #0
 8003e06:	d163      	bne.n	8003ed0 <__ssvfiscanf_r+0x280>
 8003e08:	f04f 30ff 	mov.w	r0, #4294967295
 8003e0c:	e066      	b.n	8003edc <__ssvfiscanf_r+0x28c>
 8003e0e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8003e10:	f042 0220 	orr.w	r2, r2, #32
 8003e14:	9243      	str	r2, [sp, #268]	; 0x10c
 8003e16:	e7a4      	b.n	8003d62 <__ssvfiscanf_r+0x112>
 8003e18:	2308      	movs	r3, #8
 8003e1a:	9344      	str	r3, [sp, #272]	; 0x110
 8003e1c:	2304      	movs	r3, #4
 8003e1e:	e7bc      	b.n	8003d9a <__ssvfiscanf_r+0x14a>
 8003e20:	4629      	mov	r1, r5
 8003e22:	4640      	mov	r0, r8
 8003e24:	f000 fb56 	bl	80044d4 <__sccl>
 8003e28:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003e2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e2e:	9343      	str	r3, [sp, #268]	; 0x10c
 8003e30:	4605      	mov	r5, r0
 8003e32:	2301      	movs	r3, #1
 8003e34:	e7b1      	b.n	8003d9a <__ssvfiscanf_r+0x14a>
 8003e36:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e3c:	9343      	str	r3, [sp, #268]	; 0x10c
 8003e3e:	2300      	movs	r3, #0
 8003e40:	e7ab      	b.n	8003d9a <__ssvfiscanf_r+0x14a>
 8003e42:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8003e44:	06d0      	lsls	r0, r2, #27
 8003e46:	f53f af78 	bmi.w	8003d3a <__ssvfiscanf_r+0xea>
 8003e4a:	f012 0f01 	tst.w	r2, #1
 8003e4e:	9a01      	ldr	r2, [sp, #4]
 8003e50:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003e52:	f102 0104 	add.w	r1, r2, #4
 8003e56:	9101      	str	r1, [sp, #4]
 8003e58:	6812      	ldr	r2, [r2, #0]
 8003e5a:	bf14      	ite	ne
 8003e5c:	8013      	strhne	r3, [r2, #0]
 8003e5e:	6013      	streq	r3, [r2, #0]
 8003e60:	e76b      	b.n	8003d3a <__ssvfiscanf_r+0xea>
 8003e62:	2305      	movs	r3, #5
 8003e64:	e799      	b.n	8003d9a <__ssvfiscanf_r+0x14a>
 8003e66:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8003e68:	4621      	mov	r1, r4
 8003e6a:	4630      	mov	r0, r6
 8003e6c:	4798      	blx	r3
 8003e6e:	2800      	cmp	r0, #0
 8003e70:	d097      	beq.n	8003da2 <__ssvfiscanf_r+0x152>
 8003e72:	e7c6      	b.n	8003e02 <__ssvfiscanf_r+0x1b2>
 8003e74:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8003e76:	3201      	adds	r2, #1
 8003e78:	9247      	str	r2, [sp, #284]	; 0x11c
 8003e7a:	6862      	ldr	r2, [r4, #4]
 8003e7c:	3a01      	subs	r2, #1
 8003e7e:	2a00      	cmp	r2, #0
 8003e80:	6062      	str	r2, [r4, #4]
 8003e82:	dd0a      	ble.n	8003e9a <__ssvfiscanf_r+0x24a>
 8003e84:	3301      	adds	r3, #1
 8003e86:	6023      	str	r3, [r4, #0]
 8003e88:	f000 fcb4 	bl	80047f4 <__locale_ctype_ptr>
 8003e8c:	6823      	ldr	r3, [r4, #0]
 8003e8e:	781a      	ldrb	r2, [r3, #0]
 8003e90:	4410      	add	r0, r2
 8003e92:	7842      	ldrb	r2, [r0, #1]
 8003e94:	0712      	lsls	r2, r2, #28
 8003e96:	d4ed      	bmi.n	8003e74 <__ssvfiscanf_r+0x224>
 8003e98:	e786      	b.n	8003da8 <__ssvfiscanf_r+0x158>
 8003e9a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8003e9c:	4621      	mov	r1, r4
 8003e9e:	4630      	mov	r0, r6
 8003ea0:	4798      	blx	r3
 8003ea2:	2800      	cmp	r0, #0
 8003ea4:	d0f0      	beq.n	8003e88 <__ssvfiscanf_r+0x238>
 8003ea6:	e7ac      	b.n	8003e02 <__ssvfiscanf_r+0x1b2>
 8003ea8:	2b04      	cmp	r3, #4
 8003eaa:	dc06      	bgt.n	8003eba <__ssvfiscanf_r+0x26a>
 8003eac:	ab01      	add	r3, sp, #4
 8003eae:	4622      	mov	r2, r4
 8003eb0:	a943      	add	r1, sp, #268	; 0x10c
 8003eb2:	4630      	mov	r0, r6
 8003eb4:	f000 fa1a 	bl	80042ec <_scanf_i>
 8003eb8:	e77f      	b.n	8003dba <__ssvfiscanf_r+0x16a>
 8003eba:	4b0e      	ldr	r3, [pc, #56]	; (8003ef4 <__ssvfiscanf_r+0x2a4>)
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f43f af3c 	beq.w	8003d3a <__ssvfiscanf_r+0xea>
 8003ec2:	ab01      	add	r3, sp, #4
 8003ec4:	4622      	mov	r2, r4
 8003ec6:	a943      	add	r1, sp, #268	; 0x10c
 8003ec8:	4630      	mov	r0, r6
 8003eca:	f3af 8000 	nop.w
 8003ece:	e774      	b.n	8003dba <__ssvfiscanf_r+0x16a>
 8003ed0:	89a3      	ldrh	r3, [r4, #12]
 8003ed2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003ed6:	bf18      	it	ne
 8003ed8:	f04f 30ff 	movne.w	r0, #4294967295
 8003edc:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 8003ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ee4:	9846      	ldr	r0, [sp, #280]	; 0x118
 8003ee6:	e7f9      	b.n	8003edc <__ssvfiscanf_r+0x28c>
 8003ee8:	08003b9d 	.word	0x08003b9d
 8003eec:	08003c17 	.word	0x08003c17
 8003ef0:	08004b8e 	.word	0x08004b8e
 8003ef4:	00000000 	.word	0x00000000

08003ef8 <_printf_common>:
 8003ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003efc:	4691      	mov	r9, r2
 8003efe:	461f      	mov	r7, r3
 8003f00:	688a      	ldr	r2, [r1, #8]
 8003f02:	690b      	ldr	r3, [r1, #16]
 8003f04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	bfb8      	it	lt
 8003f0c:	4613      	movlt	r3, r2
 8003f0e:	f8c9 3000 	str.w	r3, [r9]
 8003f12:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f16:	4606      	mov	r6, r0
 8003f18:	460c      	mov	r4, r1
 8003f1a:	b112      	cbz	r2, 8003f22 <_printf_common+0x2a>
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	f8c9 3000 	str.w	r3, [r9]
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	0699      	lsls	r1, r3, #26
 8003f26:	bf42      	ittt	mi
 8003f28:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003f2c:	3302      	addmi	r3, #2
 8003f2e:	f8c9 3000 	strmi.w	r3, [r9]
 8003f32:	6825      	ldr	r5, [r4, #0]
 8003f34:	f015 0506 	ands.w	r5, r5, #6
 8003f38:	d107      	bne.n	8003f4a <_printf_common+0x52>
 8003f3a:	f104 0a19 	add.w	sl, r4, #25
 8003f3e:	68e3      	ldr	r3, [r4, #12]
 8003f40:	f8d9 2000 	ldr.w	r2, [r9]
 8003f44:	1a9b      	subs	r3, r3, r2
 8003f46:	429d      	cmp	r5, r3
 8003f48:	db29      	blt.n	8003f9e <_printf_common+0xa6>
 8003f4a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003f4e:	6822      	ldr	r2, [r4, #0]
 8003f50:	3300      	adds	r3, #0
 8003f52:	bf18      	it	ne
 8003f54:	2301      	movne	r3, #1
 8003f56:	0692      	lsls	r2, r2, #26
 8003f58:	d42e      	bmi.n	8003fb8 <_printf_common+0xc0>
 8003f5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f5e:	4639      	mov	r1, r7
 8003f60:	4630      	mov	r0, r6
 8003f62:	47c0      	blx	r8
 8003f64:	3001      	adds	r0, #1
 8003f66:	d021      	beq.n	8003fac <_printf_common+0xb4>
 8003f68:	6823      	ldr	r3, [r4, #0]
 8003f6a:	68e5      	ldr	r5, [r4, #12]
 8003f6c:	f8d9 2000 	ldr.w	r2, [r9]
 8003f70:	f003 0306 	and.w	r3, r3, #6
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	bf08      	it	eq
 8003f78:	1aad      	subeq	r5, r5, r2
 8003f7a:	68a3      	ldr	r3, [r4, #8]
 8003f7c:	6922      	ldr	r2, [r4, #16]
 8003f7e:	bf0c      	ite	eq
 8003f80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f84:	2500      	movne	r5, #0
 8003f86:	4293      	cmp	r3, r2
 8003f88:	bfc4      	itt	gt
 8003f8a:	1a9b      	subgt	r3, r3, r2
 8003f8c:	18ed      	addgt	r5, r5, r3
 8003f8e:	f04f 0900 	mov.w	r9, #0
 8003f92:	341a      	adds	r4, #26
 8003f94:	454d      	cmp	r5, r9
 8003f96:	d11b      	bne.n	8003fd0 <_printf_common+0xd8>
 8003f98:	2000      	movs	r0, #0
 8003f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	4652      	mov	r2, sl
 8003fa2:	4639      	mov	r1, r7
 8003fa4:	4630      	mov	r0, r6
 8003fa6:	47c0      	blx	r8
 8003fa8:	3001      	adds	r0, #1
 8003faa:	d103      	bne.n	8003fb4 <_printf_common+0xbc>
 8003fac:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fb4:	3501      	adds	r5, #1
 8003fb6:	e7c2      	b.n	8003f3e <_printf_common+0x46>
 8003fb8:	18e1      	adds	r1, r4, r3
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	2030      	movs	r0, #48	; 0x30
 8003fbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fc2:	4422      	add	r2, r4
 8003fc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fcc:	3302      	adds	r3, #2
 8003fce:	e7c4      	b.n	8003f5a <_printf_common+0x62>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	4622      	mov	r2, r4
 8003fd4:	4639      	mov	r1, r7
 8003fd6:	4630      	mov	r0, r6
 8003fd8:	47c0      	blx	r8
 8003fda:	3001      	adds	r0, #1
 8003fdc:	d0e6      	beq.n	8003fac <_printf_common+0xb4>
 8003fde:	f109 0901 	add.w	r9, r9, #1
 8003fe2:	e7d7      	b.n	8003f94 <_printf_common+0x9c>

08003fe4 <_printf_i>:
 8003fe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003fe8:	4617      	mov	r7, r2
 8003fea:	7e0a      	ldrb	r2, [r1, #24]
 8003fec:	b085      	sub	sp, #20
 8003fee:	2a6e      	cmp	r2, #110	; 0x6e
 8003ff0:	4698      	mov	r8, r3
 8003ff2:	4606      	mov	r6, r0
 8003ff4:	460c      	mov	r4, r1
 8003ff6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003ff8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003ffc:	f000 80bc 	beq.w	8004178 <_printf_i+0x194>
 8004000:	d81a      	bhi.n	8004038 <_printf_i+0x54>
 8004002:	2a63      	cmp	r2, #99	; 0x63
 8004004:	d02e      	beq.n	8004064 <_printf_i+0x80>
 8004006:	d80a      	bhi.n	800401e <_printf_i+0x3a>
 8004008:	2a00      	cmp	r2, #0
 800400a:	f000 80c8 	beq.w	800419e <_printf_i+0x1ba>
 800400e:	2a58      	cmp	r2, #88	; 0x58
 8004010:	f000 808a 	beq.w	8004128 <_printf_i+0x144>
 8004014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004018:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800401c:	e02a      	b.n	8004074 <_printf_i+0x90>
 800401e:	2a64      	cmp	r2, #100	; 0x64
 8004020:	d001      	beq.n	8004026 <_printf_i+0x42>
 8004022:	2a69      	cmp	r2, #105	; 0x69
 8004024:	d1f6      	bne.n	8004014 <_printf_i+0x30>
 8004026:	6821      	ldr	r1, [r4, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800402e:	d023      	beq.n	8004078 <_printf_i+0x94>
 8004030:	1d11      	adds	r1, r2, #4
 8004032:	6019      	str	r1, [r3, #0]
 8004034:	6813      	ldr	r3, [r2, #0]
 8004036:	e027      	b.n	8004088 <_printf_i+0xa4>
 8004038:	2a73      	cmp	r2, #115	; 0x73
 800403a:	f000 80b4 	beq.w	80041a6 <_printf_i+0x1c2>
 800403e:	d808      	bhi.n	8004052 <_printf_i+0x6e>
 8004040:	2a6f      	cmp	r2, #111	; 0x6f
 8004042:	d02a      	beq.n	800409a <_printf_i+0xb6>
 8004044:	2a70      	cmp	r2, #112	; 0x70
 8004046:	d1e5      	bne.n	8004014 <_printf_i+0x30>
 8004048:	680a      	ldr	r2, [r1, #0]
 800404a:	f042 0220 	orr.w	r2, r2, #32
 800404e:	600a      	str	r2, [r1, #0]
 8004050:	e003      	b.n	800405a <_printf_i+0x76>
 8004052:	2a75      	cmp	r2, #117	; 0x75
 8004054:	d021      	beq.n	800409a <_printf_i+0xb6>
 8004056:	2a78      	cmp	r2, #120	; 0x78
 8004058:	d1dc      	bne.n	8004014 <_printf_i+0x30>
 800405a:	2278      	movs	r2, #120	; 0x78
 800405c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004060:	496e      	ldr	r1, [pc, #440]	; (800421c <_printf_i+0x238>)
 8004062:	e064      	b.n	800412e <_printf_i+0x14a>
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800406a:	1d11      	adds	r1, r2, #4
 800406c:	6019      	str	r1, [r3, #0]
 800406e:	6813      	ldr	r3, [r2, #0]
 8004070:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004074:	2301      	movs	r3, #1
 8004076:	e0a3      	b.n	80041c0 <_printf_i+0x1dc>
 8004078:	f011 0f40 	tst.w	r1, #64	; 0x40
 800407c:	f102 0104 	add.w	r1, r2, #4
 8004080:	6019      	str	r1, [r3, #0]
 8004082:	d0d7      	beq.n	8004034 <_printf_i+0x50>
 8004084:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004088:	2b00      	cmp	r3, #0
 800408a:	da03      	bge.n	8004094 <_printf_i+0xb0>
 800408c:	222d      	movs	r2, #45	; 0x2d
 800408e:	425b      	negs	r3, r3
 8004090:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004094:	4962      	ldr	r1, [pc, #392]	; (8004220 <_printf_i+0x23c>)
 8004096:	220a      	movs	r2, #10
 8004098:	e017      	b.n	80040ca <_printf_i+0xe6>
 800409a:	6820      	ldr	r0, [r4, #0]
 800409c:	6819      	ldr	r1, [r3, #0]
 800409e:	f010 0f80 	tst.w	r0, #128	; 0x80
 80040a2:	d003      	beq.n	80040ac <_printf_i+0xc8>
 80040a4:	1d08      	adds	r0, r1, #4
 80040a6:	6018      	str	r0, [r3, #0]
 80040a8:	680b      	ldr	r3, [r1, #0]
 80040aa:	e006      	b.n	80040ba <_printf_i+0xd6>
 80040ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 80040b0:	f101 0004 	add.w	r0, r1, #4
 80040b4:	6018      	str	r0, [r3, #0]
 80040b6:	d0f7      	beq.n	80040a8 <_printf_i+0xc4>
 80040b8:	880b      	ldrh	r3, [r1, #0]
 80040ba:	4959      	ldr	r1, [pc, #356]	; (8004220 <_printf_i+0x23c>)
 80040bc:	2a6f      	cmp	r2, #111	; 0x6f
 80040be:	bf14      	ite	ne
 80040c0:	220a      	movne	r2, #10
 80040c2:	2208      	moveq	r2, #8
 80040c4:	2000      	movs	r0, #0
 80040c6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80040ca:	6865      	ldr	r5, [r4, #4]
 80040cc:	60a5      	str	r5, [r4, #8]
 80040ce:	2d00      	cmp	r5, #0
 80040d0:	f2c0 809c 	blt.w	800420c <_printf_i+0x228>
 80040d4:	6820      	ldr	r0, [r4, #0]
 80040d6:	f020 0004 	bic.w	r0, r0, #4
 80040da:	6020      	str	r0, [r4, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d13f      	bne.n	8004160 <_printf_i+0x17c>
 80040e0:	2d00      	cmp	r5, #0
 80040e2:	f040 8095 	bne.w	8004210 <_printf_i+0x22c>
 80040e6:	4675      	mov	r5, lr
 80040e8:	2a08      	cmp	r2, #8
 80040ea:	d10b      	bne.n	8004104 <_printf_i+0x120>
 80040ec:	6823      	ldr	r3, [r4, #0]
 80040ee:	07da      	lsls	r2, r3, #31
 80040f0:	d508      	bpl.n	8004104 <_printf_i+0x120>
 80040f2:	6923      	ldr	r3, [r4, #16]
 80040f4:	6862      	ldr	r2, [r4, #4]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	bfde      	ittt	le
 80040fa:	2330      	movle	r3, #48	; 0x30
 80040fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004100:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004104:	ebae 0305 	sub.w	r3, lr, r5
 8004108:	6123      	str	r3, [r4, #16]
 800410a:	f8cd 8000 	str.w	r8, [sp]
 800410e:	463b      	mov	r3, r7
 8004110:	aa03      	add	r2, sp, #12
 8004112:	4621      	mov	r1, r4
 8004114:	4630      	mov	r0, r6
 8004116:	f7ff feef 	bl	8003ef8 <_printf_common>
 800411a:	3001      	adds	r0, #1
 800411c:	d155      	bne.n	80041ca <_printf_i+0x1e6>
 800411e:	f04f 30ff 	mov.w	r0, #4294967295
 8004122:	b005      	add	sp, #20
 8004124:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004128:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800412c:	493c      	ldr	r1, [pc, #240]	; (8004220 <_printf_i+0x23c>)
 800412e:	6822      	ldr	r2, [r4, #0]
 8004130:	6818      	ldr	r0, [r3, #0]
 8004132:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004136:	f100 0504 	add.w	r5, r0, #4
 800413a:	601d      	str	r5, [r3, #0]
 800413c:	d001      	beq.n	8004142 <_printf_i+0x15e>
 800413e:	6803      	ldr	r3, [r0, #0]
 8004140:	e002      	b.n	8004148 <_printf_i+0x164>
 8004142:	0655      	lsls	r5, r2, #25
 8004144:	d5fb      	bpl.n	800413e <_printf_i+0x15a>
 8004146:	8803      	ldrh	r3, [r0, #0]
 8004148:	07d0      	lsls	r0, r2, #31
 800414a:	bf44      	itt	mi
 800414c:	f042 0220 	orrmi.w	r2, r2, #32
 8004150:	6022      	strmi	r2, [r4, #0]
 8004152:	b91b      	cbnz	r3, 800415c <_printf_i+0x178>
 8004154:	6822      	ldr	r2, [r4, #0]
 8004156:	f022 0220 	bic.w	r2, r2, #32
 800415a:	6022      	str	r2, [r4, #0]
 800415c:	2210      	movs	r2, #16
 800415e:	e7b1      	b.n	80040c4 <_printf_i+0xe0>
 8004160:	4675      	mov	r5, lr
 8004162:	fbb3 f0f2 	udiv	r0, r3, r2
 8004166:	fb02 3310 	mls	r3, r2, r0, r3
 800416a:	5ccb      	ldrb	r3, [r1, r3]
 800416c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004170:	4603      	mov	r3, r0
 8004172:	2800      	cmp	r0, #0
 8004174:	d1f5      	bne.n	8004162 <_printf_i+0x17e>
 8004176:	e7b7      	b.n	80040e8 <_printf_i+0x104>
 8004178:	6808      	ldr	r0, [r1, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	6949      	ldr	r1, [r1, #20]
 800417e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004182:	d004      	beq.n	800418e <_printf_i+0x1aa>
 8004184:	1d10      	adds	r0, r2, #4
 8004186:	6018      	str	r0, [r3, #0]
 8004188:	6813      	ldr	r3, [r2, #0]
 800418a:	6019      	str	r1, [r3, #0]
 800418c:	e007      	b.n	800419e <_printf_i+0x1ba>
 800418e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004192:	f102 0004 	add.w	r0, r2, #4
 8004196:	6018      	str	r0, [r3, #0]
 8004198:	6813      	ldr	r3, [r2, #0]
 800419a:	d0f6      	beq.n	800418a <_printf_i+0x1a6>
 800419c:	8019      	strh	r1, [r3, #0]
 800419e:	2300      	movs	r3, #0
 80041a0:	6123      	str	r3, [r4, #16]
 80041a2:	4675      	mov	r5, lr
 80041a4:	e7b1      	b.n	800410a <_printf_i+0x126>
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	1d11      	adds	r1, r2, #4
 80041aa:	6019      	str	r1, [r3, #0]
 80041ac:	6815      	ldr	r5, [r2, #0]
 80041ae:	6862      	ldr	r2, [r4, #4]
 80041b0:	2100      	movs	r1, #0
 80041b2:	4628      	mov	r0, r5
 80041b4:	f7fc f824 	bl	8000200 <memchr>
 80041b8:	b108      	cbz	r0, 80041be <_printf_i+0x1da>
 80041ba:	1b40      	subs	r0, r0, r5
 80041bc:	6060      	str	r0, [r4, #4]
 80041be:	6863      	ldr	r3, [r4, #4]
 80041c0:	6123      	str	r3, [r4, #16]
 80041c2:	2300      	movs	r3, #0
 80041c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041c8:	e79f      	b.n	800410a <_printf_i+0x126>
 80041ca:	6923      	ldr	r3, [r4, #16]
 80041cc:	462a      	mov	r2, r5
 80041ce:	4639      	mov	r1, r7
 80041d0:	4630      	mov	r0, r6
 80041d2:	47c0      	blx	r8
 80041d4:	3001      	adds	r0, #1
 80041d6:	d0a2      	beq.n	800411e <_printf_i+0x13a>
 80041d8:	6823      	ldr	r3, [r4, #0]
 80041da:	079b      	lsls	r3, r3, #30
 80041dc:	d507      	bpl.n	80041ee <_printf_i+0x20a>
 80041de:	2500      	movs	r5, #0
 80041e0:	f104 0919 	add.w	r9, r4, #25
 80041e4:	68e3      	ldr	r3, [r4, #12]
 80041e6:	9a03      	ldr	r2, [sp, #12]
 80041e8:	1a9b      	subs	r3, r3, r2
 80041ea:	429d      	cmp	r5, r3
 80041ec:	db05      	blt.n	80041fa <_printf_i+0x216>
 80041ee:	68e0      	ldr	r0, [r4, #12]
 80041f0:	9b03      	ldr	r3, [sp, #12]
 80041f2:	4298      	cmp	r0, r3
 80041f4:	bfb8      	it	lt
 80041f6:	4618      	movlt	r0, r3
 80041f8:	e793      	b.n	8004122 <_printf_i+0x13e>
 80041fa:	2301      	movs	r3, #1
 80041fc:	464a      	mov	r2, r9
 80041fe:	4639      	mov	r1, r7
 8004200:	4630      	mov	r0, r6
 8004202:	47c0      	blx	r8
 8004204:	3001      	adds	r0, #1
 8004206:	d08a      	beq.n	800411e <_printf_i+0x13a>
 8004208:	3501      	adds	r5, #1
 800420a:	e7eb      	b.n	80041e4 <_printf_i+0x200>
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1a7      	bne.n	8004160 <_printf_i+0x17c>
 8004210:	780b      	ldrb	r3, [r1, #0]
 8004212:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004216:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800421a:	e765      	b.n	80040e8 <_printf_i+0x104>
 800421c:	08004baa 	.word	0x08004baa
 8004220:	08004b99 	.word	0x08004b99

08004224 <_scanf_chars>:
 8004224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004228:	4615      	mov	r5, r2
 800422a:	688a      	ldr	r2, [r1, #8]
 800422c:	4680      	mov	r8, r0
 800422e:	460c      	mov	r4, r1
 8004230:	b932      	cbnz	r2, 8004240 <_scanf_chars+0x1c>
 8004232:	698a      	ldr	r2, [r1, #24]
 8004234:	2a00      	cmp	r2, #0
 8004236:	bf0c      	ite	eq
 8004238:	2201      	moveq	r2, #1
 800423a:	f04f 32ff 	movne.w	r2, #4294967295
 800423e:	608a      	str	r2, [r1, #8]
 8004240:	6822      	ldr	r2, [r4, #0]
 8004242:	06d1      	lsls	r1, r2, #27
 8004244:	bf5f      	itttt	pl
 8004246:	681a      	ldrpl	r2, [r3, #0]
 8004248:	1d11      	addpl	r1, r2, #4
 800424a:	6019      	strpl	r1, [r3, #0]
 800424c:	6817      	ldrpl	r7, [r2, #0]
 800424e:	2600      	movs	r6, #0
 8004250:	69a3      	ldr	r3, [r4, #24]
 8004252:	b1db      	cbz	r3, 800428c <_scanf_chars+0x68>
 8004254:	2b01      	cmp	r3, #1
 8004256:	d107      	bne.n	8004268 <_scanf_chars+0x44>
 8004258:	682b      	ldr	r3, [r5, #0]
 800425a:	6962      	ldr	r2, [r4, #20]
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	5cd3      	ldrb	r3, [r2, r3]
 8004260:	b9a3      	cbnz	r3, 800428c <_scanf_chars+0x68>
 8004262:	2e00      	cmp	r6, #0
 8004264:	d132      	bne.n	80042cc <_scanf_chars+0xa8>
 8004266:	e006      	b.n	8004276 <_scanf_chars+0x52>
 8004268:	2b02      	cmp	r3, #2
 800426a:	d007      	beq.n	800427c <_scanf_chars+0x58>
 800426c:	2e00      	cmp	r6, #0
 800426e:	d12d      	bne.n	80042cc <_scanf_chars+0xa8>
 8004270:	69a3      	ldr	r3, [r4, #24]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d12a      	bne.n	80042cc <_scanf_chars+0xa8>
 8004276:	2001      	movs	r0, #1
 8004278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800427c:	f000 faba 	bl	80047f4 <__locale_ctype_ptr>
 8004280:	682b      	ldr	r3, [r5, #0]
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	4418      	add	r0, r3
 8004286:	7843      	ldrb	r3, [r0, #1]
 8004288:	071b      	lsls	r3, r3, #28
 800428a:	d4ef      	bmi.n	800426c <_scanf_chars+0x48>
 800428c:	6823      	ldr	r3, [r4, #0]
 800428e:	06da      	lsls	r2, r3, #27
 8004290:	bf5e      	ittt	pl
 8004292:	682b      	ldrpl	r3, [r5, #0]
 8004294:	781b      	ldrbpl	r3, [r3, #0]
 8004296:	703b      	strbpl	r3, [r7, #0]
 8004298:	682a      	ldr	r2, [r5, #0]
 800429a:	686b      	ldr	r3, [r5, #4]
 800429c:	f102 0201 	add.w	r2, r2, #1
 80042a0:	602a      	str	r2, [r5, #0]
 80042a2:	68a2      	ldr	r2, [r4, #8]
 80042a4:	f103 33ff 	add.w	r3, r3, #4294967295
 80042a8:	f102 32ff 	add.w	r2, r2, #4294967295
 80042ac:	606b      	str	r3, [r5, #4]
 80042ae:	f106 0601 	add.w	r6, r6, #1
 80042b2:	bf58      	it	pl
 80042b4:	3701      	addpl	r7, #1
 80042b6:	60a2      	str	r2, [r4, #8]
 80042b8:	b142      	cbz	r2, 80042cc <_scanf_chars+0xa8>
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	dcc8      	bgt.n	8004250 <_scanf_chars+0x2c>
 80042be:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80042c2:	4629      	mov	r1, r5
 80042c4:	4640      	mov	r0, r8
 80042c6:	4798      	blx	r3
 80042c8:	2800      	cmp	r0, #0
 80042ca:	d0c1      	beq.n	8004250 <_scanf_chars+0x2c>
 80042cc:	6823      	ldr	r3, [r4, #0]
 80042ce:	f013 0310 	ands.w	r3, r3, #16
 80042d2:	d105      	bne.n	80042e0 <_scanf_chars+0xbc>
 80042d4:	68e2      	ldr	r2, [r4, #12]
 80042d6:	3201      	adds	r2, #1
 80042d8:	60e2      	str	r2, [r4, #12]
 80042da:	69a2      	ldr	r2, [r4, #24]
 80042dc:	b102      	cbz	r2, 80042e0 <_scanf_chars+0xbc>
 80042de:	703b      	strb	r3, [r7, #0]
 80042e0:	6923      	ldr	r3, [r4, #16]
 80042e2:	441e      	add	r6, r3
 80042e4:	6126      	str	r6, [r4, #16]
 80042e6:	2000      	movs	r0, #0
 80042e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080042ec <_scanf_i>:
 80042ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042f0:	469a      	mov	sl, r3
 80042f2:	4b74      	ldr	r3, [pc, #464]	; (80044c4 <_scanf_i+0x1d8>)
 80042f4:	460c      	mov	r4, r1
 80042f6:	4683      	mov	fp, r0
 80042f8:	4616      	mov	r6, r2
 80042fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80042fe:	b087      	sub	sp, #28
 8004300:	ab03      	add	r3, sp, #12
 8004302:	68a7      	ldr	r7, [r4, #8]
 8004304:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004308:	4b6f      	ldr	r3, [pc, #444]	; (80044c8 <_scanf_i+0x1dc>)
 800430a:	69a1      	ldr	r1, [r4, #24]
 800430c:	4a6f      	ldr	r2, [pc, #444]	; (80044cc <_scanf_i+0x1e0>)
 800430e:	2903      	cmp	r1, #3
 8004310:	bf18      	it	ne
 8004312:	461a      	movne	r2, r3
 8004314:	1e7b      	subs	r3, r7, #1
 8004316:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800431a:	bf84      	itt	hi
 800431c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004320:	60a3      	strhi	r3, [r4, #8]
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	9200      	str	r2, [sp, #0]
 8004326:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800432a:	bf88      	it	hi
 800432c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004330:	f104 091c 	add.w	r9, r4, #28
 8004334:	6023      	str	r3, [r4, #0]
 8004336:	bf8c      	ite	hi
 8004338:	197f      	addhi	r7, r7, r5
 800433a:	2700      	movls	r7, #0
 800433c:	464b      	mov	r3, r9
 800433e:	f04f 0800 	mov.w	r8, #0
 8004342:	9301      	str	r3, [sp, #4]
 8004344:	6831      	ldr	r1, [r6, #0]
 8004346:	ab03      	add	r3, sp, #12
 8004348:	2202      	movs	r2, #2
 800434a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800434e:	7809      	ldrb	r1, [r1, #0]
 8004350:	f7fb ff56 	bl	8000200 <memchr>
 8004354:	9b01      	ldr	r3, [sp, #4]
 8004356:	b328      	cbz	r0, 80043a4 <_scanf_i+0xb8>
 8004358:	f1b8 0f01 	cmp.w	r8, #1
 800435c:	d156      	bne.n	800440c <_scanf_i+0x120>
 800435e:	6862      	ldr	r2, [r4, #4]
 8004360:	b92a      	cbnz	r2, 800436e <_scanf_i+0x82>
 8004362:	2208      	movs	r2, #8
 8004364:	6062      	str	r2, [r4, #4]
 8004366:	6822      	ldr	r2, [r4, #0]
 8004368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800436c:	6022      	str	r2, [r4, #0]
 800436e:	6822      	ldr	r2, [r4, #0]
 8004370:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004374:	6022      	str	r2, [r4, #0]
 8004376:	68a2      	ldr	r2, [r4, #8]
 8004378:	1e51      	subs	r1, r2, #1
 800437a:	60a1      	str	r1, [r4, #8]
 800437c:	b192      	cbz	r2, 80043a4 <_scanf_i+0xb8>
 800437e:	6832      	ldr	r2, [r6, #0]
 8004380:	1c51      	adds	r1, r2, #1
 8004382:	6031      	str	r1, [r6, #0]
 8004384:	7812      	ldrb	r2, [r2, #0]
 8004386:	701a      	strb	r2, [r3, #0]
 8004388:	1c5d      	adds	r5, r3, #1
 800438a:	6873      	ldr	r3, [r6, #4]
 800438c:	3b01      	subs	r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	6073      	str	r3, [r6, #4]
 8004392:	dc06      	bgt.n	80043a2 <_scanf_i+0xb6>
 8004394:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004398:	4631      	mov	r1, r6
 800439a:	4658      	mov	r0, fp
 800439c:	4798      	blx	r3
 800439e:	2800      	cmp	r0, #0
 80043a0:	d176      	bne.n	8004490 <_scanf_i+0x1a4>
 80043a2:	462b      	mov	r3, r5
 80043a4:	f108 0801 	add.w	r8, r8, #1
 80043a8:	f1b8 0f03 	cmp.w	r8, #3
 80043ac:	d1c9      	bne.n	8004342 <_scanf_i+0x56>
 80043ae:	6862      	ldr	r2, [r4, #4]
 80043b0:	b90a      	cbnz	r2, 80043b6 <_scanf_i+0xca>
 80043b2:	220a      	movs	r2, #10
 80043b4:	6062      	str	r2, [r4, #4]
 80043b6:	6862      	ldr	r2, [r4, #4]
 80043b8:	4945      	ldr	r1, [pc, #276]	; (80044d0 <_scanf_i+0x1e4>)
 80043ba:	6960      	ldr	r0, [r4, #20]
 80043bc:	9301      	str	r3, [sp, #4]
 80043be:	1a89      	subs	r1, r1, r2
 80043c0:	f000 f888 	bl	80044d4 <__sccl>
 80043c4:	9b01      	ldr	r3, [sp, #4]
 80043c6:	f04f 0800 	mov.w	r8, #0
 80043ca:	461d      	mov	r5, r3
 80043cc:	68a3      	ldr	r3, [r4, #8]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d038      	beq.n	8004444 <_scanf_i+0x158>
 80043d2:	6831      	ldr	r1, [r6, #0]
 80043d4:	6960      	ldr	r0, [r4, #20]
 80043d6:	780a      	ldrb	r2, [r1, #0]
 80043d8:	5c80      	ldrb	r0, [r0, r2]
 80043da:	2800      	cmp	r0, #0
 80043dc:	d032      	beq.n	8004444 <_scanf_i+0x158>
 80043de:	2a30      	cmp	r2, #48	; 0x30
 80043e0:	6822      	ldr	r2, [r4, #0]
 80043e2:	d121      	bne.n	8004428 <_scanf_i+0x13c>
 80043e4:	0510      	lsls	r0, r2, #20
 80043e6:	d51f      	bpl.n	8004428 <_scanf_i+0x13c>
 80043e8:	f108 0801 	add.w	r8, r8, #1
 80043ec:	b117      	cbz	r7, 80043f4 <_scanf_i+0x108>
 80043ee:	3301      	adds	r3, #1
 80043f0:	3f01      	subs	r7, #1
 80043f2:	60a3      	str	r3, [r4, #8]
 80043f4:	6873      	ldr	r3, [r6, #4]
 80043f6:	3b01      	subs	r3, #1
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	6073      	str	r3, [r6, #4]
 80043fc:	dd1b      	ble.n	8004436 <_scanf_i+0x14a>
 80043fe:	6833      	ldr	r3, [r6, #0]
 8004400:	3301      	adds	r3, #1
 8004402:	6033      	str	r3, [r6, #0]
 8004404:	68a3      	ldr	r3, [r4, #8]
 8004406:	3b01      	subs	r3, #1
 8004408:	60a3      	str	r3, [r4, #8]
 800440a:	e7df      	b.n	80043cc <_scanf_i+0xe0>
 800440c:	f1b8 0f02 	cmp.w	r8, #2
 8004410:	d1b1      	bne.n	8004376 <_scanf_i+0x8a>
 8004412:	6822      	ldr	r2, [r4, #0]
 8004414:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8004418:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800441c:	d1c2      	bne.n	80043a4 <_scanf_i+0xb8>
 800441e:	2110      	movs	r1, #16
 8004420:	6061      	str	r1, [r4, #4]
 8004422:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004426:	e7a5      	b.n	8004374 <_scanf_i+0x88>
 8004428:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800442c:	6022      	str	r2, [r4, #0]
 800442e:	780b      	ldrb	r3, [r1, #0]
 8004430:	702b      	strb	r3, [r5, #0]
 8004432:	3501      	adds	r5, #1
 8004434:	e7de      	b.n	80043f4 <_scanf_i+0x108>
 8004436:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800443a:	4631      	mov	r1, r6
 800443c:	4658      	mov	r0, fp
 800443e:	4798      	blx	r3
 8004440:	2800      	cmp	r0, #0
 8004442:	d0df      	beq.n	8004404 <_scanf_i+0x118>
 8004444:	6823      	ldr	r3, [r4, #0]
 8004446:	05d9      	lsls	r1, r3, #23
 8004448:	d50c      	bpl.n	8004464 <_scanf_i+0x178>
 800444a:	454d      	cmp	r5, r9
 800444c:	d908      	bls.n	8004460 <_scanf_i+0x174>
 800444e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004452:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004456:	4632      	mov	r2, r6
 8004458:	4658      	mov	r0, fp
 800445a:	4798      	blx	r3
 800445c:	1e6f      	subs	r7, r5, #1
 800445e:	463d      	mov	r5, r7
 8004460:	454d      	cmp	r5, r9
 8004462:	d02c      	beq.n	80044be <_scanf_i+0x1d2>
 8004464:	6822      	ldr	r2, [r4, #0]
 8004466:	f012 0210 	ands.w	r2, r2, #16
 800446a:	d11e      	bne.n	80044aa <_scanf_i+0x1be>
 800446c:	702a      	strb	r2, [r5, #0]
 800446e:	6863      	ldr	r3, [r4, #4]
 8004470:	9e00      	ldr	r6, [sp, #0]
 8004472:	4649      	mov	r1, r9
 8004474:	4658      	mov	r0, fp
 8004476:	47b0      	blx	r6
 8004478:	6822      	ldr	r2, [r4, #0]
 800447a:	f8da 3000 	ldr.w	r3, [sl]
 800447e:	f012 0f20 	tst.w	r2, #32
 8004482:	d008      	beq.n	8004496 <_scanf_i+0x1aa>
 8004484:	1d1a      	adds	r2, r3, #4
 8004486:	f8ca 2000 	str.w	r2, [sl]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6018      	str	r0, [r3, #0]
 800448e:	e009      	b.n	80044a4 <_scanf_i+0x1b8>
 8004490:	f04f 0800 	mov.w	r8, #0
 8004494:	e7d6      	b.n	8004444 <_scanf_i+0x158>
 8004496:	07d2      	lsls	r2, r2, #31
 8004498:	d5f4      	bpl.n	8004484 <_scanf_i+0x198>
 800449a:	1d1a      	adds	r2, r3, #4
 800449c:	f8ca 2000 	str.w	r2, [sl]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	8018      	strh	r0, [r3, #0]
 80044a4:	68e3      	ldr	r3, [r4, #12]
 80044a6:	3301      	adds	r3, #1
 80044a8:	60e3      	str	r3, [r4, #12]
 80044aa:	eba5 0509 	sub.w	r5, r5, r9
 80044ae:	44a8      	add	r8, r5
 80044b0:	6925      	ldr	r5, [r4, #16]
 80044b2:	4445      	add	r5, r8
 80044b4:	6125      	str	r5, [r4, #16]
 80044b6:	2000      	movs	r0, #0
 80044b8:	b007      	add	sp, #28
 80044ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044be:	2001      	movs	r0, #1
 80044c0:	e7fa      	b.n	80044b8 <_scanf_i+0x1cc>
 80044c2:	bf00      	nop
 80044c4:	08004b20 	.word	0x08004b20
 80044c8:	08004755 	.word	0x08004755
 80044cc:	08004635 	.word	0x08004635
 80044d0:	08004bcb 	.word	0x08004bcb

080044d4 <__sccl>:
 80044d4:	b570      	push	{r4, r5, r6, lr}
 80044d6:	780b      	ldrb	r3, [r1, #0]
 80044d8:	2b5e      	cmp	r3, #94	; 0x5e
 80044da:	bf13      	iteet	ne
 80044dc:	1c4a      	addne	r2, r1, #1
 80044de:	1c8a      	addeq	r2, r1, #2
 80044e0:	784b      	ldrbeq	r3, [r1, #1]
 80044e2:	2100      	movne	r1, #0
 80044e4:	bf08      	it	eq
 80044e6:	2101      	moveq	r1, #1
 80044e8:	1e44      	subs	r4, r0, #1
 80044ea:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80044ee:	f804 1f01 	strb.w	r1, [r4, #1]!
 80044f2:	42a5      	cmp	r5, r4
 80044f4:	d1fb      	bne.n	80044ee <__sccl+0x1a>
 80044f6:	b913      	cbnz	r3, 80044fe <__sccl+0x2a>
 80044f8:	3a01      	subs	r2, #1
 80044fa:	4610      	mov	r0, r2
 80044fc:	bd70      	pop	{r4, r5, r6, pc}
 80044fe:	f081 0401 	eor.w	r4, r1, #1
 8004502:	54c4      	strb	r4, [r0, r3]
 8004504:	4611      	mov	r1, r2
 8004506:	780d      	ldrb	r5, [r1, #0]
 8004508:	2d2d      	cmp	r5, #45	; 0x2d
 800450a:	f101 0201 	add.w	r2, r1, #1
 800450e:	d006      	beq.n	800451e <__sccl+0x4a>
 8004510:	2d5d      	cmp	r5, #93	; 0x5d
 8004512:	d0f2      	beq.n	80044fa <__sccl+0x26>
 8004514:	b90d      	cbnz	r5, 800451a <__sccl+0x46>
 8004516:	460a      	mov	r2, r1
 8004518:	e7ef      	b.n	80044fa <__sccl+0x26>
 800451a:	462b      	mov	r3, r5
 800451c:	e7f1      	b.n	8004502 <__sccl+0x2e>
 800451e:	784e      	ldrb	r6, [r1, #1]
 8004520:	2e5d      	cmp	r6, #93	; 0x5d
 8004522:	d0fa      	beq.n	800451a <__sccl+0x46>
 8004524:	42b3      	cmp	r3, r6
 8004526:	dcf8      	bgt.n	800451a <__sccl+0x46>
 8004528:	3102      	adds	r1, #2
 800452a:	3301      	adds	r3, #1
 800452c:	429e      	cmp	r6, r3
 800452e:	54c4      	strb	r4, [r0, r3]
 8004530:	dcfb      	bgt.n	800452a <__sccl+0x56>
 8004532:	e7e8      	b.n	8004506 <__sccl+0x32>

08004534 <_strtol_l.isra.0>:
 8004534:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004538:	4680      	mov	r8, r0
 800453a:	4689      	mov	r9, r1
 800453c:	4692      	mov	sl, r2
 800453e:	461f      	mov	r7, r3
 8004540:	468b      	mov	fp, r1
 8004542:	465d      	mov	r5, fp
 8004544:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004546:	f815 4b01 	ldrb.w	r4, [r5], #1
 800454a:	f000 f950 	bl	80047ee <__locale_ctype_ptr_l>
 800454e:	4420      	add	r0, r4
 8004550:	7846      	ldrb	r6, [r0, #1]
 8004552:	f016 0608 	ands.w	r6, r6, #8
 8004556:	d10b      	bne.n	8004570 <_strtol_l.isra.0+0x3c>
 8004558:	2c2d      	cmp	r4, #45	; 0x2d
 800455a:	d10b      	bne.n	8004574 <_strtol_l.isra.0+0x40>
 800455c:	782c      	ldrb	r4, [r5, #0]
 800455e:	2601      	movs	r6, #1
 8004560:	f10b 0502 	add.w	r5, fp, #2
 8004564:	b167      	cbz	r7, 8004580 <_strtol_l.isra.0+0x4c>
 8004566:	2f10      	cmp	r7, #16
 8004568:	d114      	bne.n	8004594 <_strtol_l.isra.0+0x60>
 800456a:	2c30      	cmp	r4, #48	; 0x30
 800456c:	d00a      	beq.n	8004584 <_strtol_l.isra.0+0x50>
 800456e:	e011      	b.n	8004594 <_strtol_l.isra.0+0x60>
 8004570:	46ab      	mov	fp, r5
 8004572:	e7e6      	b.n	8004542 <_strtol_l.isra.0+0xe>
 8004574:	2c2b      	cmp	r4, #43	; 0x2b
 8004576:	bf04      	itt	eq
 8004578:	782c      	ldrbeq	r4, [r5, #0]
 800457a:	f10b 0502 	addeq.w	r5, fp, #2
 800457e:	e7f1      	b.n	8004564 <_strtol_l.isra.0+0x30>
 8004580:	2c30      	cmp	r4, #48	; 0x30
 8004582:	d127      	bne.n	80045d4 <_strtol_l.isra.0+0xa0>
 8004584:	782b      	ldrb	r3, [r5, #0]
 8004586:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800458a:	2b58      	cmp	r3, #88	; 0x58
 800458c:	d14b      	bne.n	8004626 <_strtol_l.isra.0+0xf2>
 800458e:	786c      	ldrb	r4, [r5, #1]
 8004590:	2710      	movs	r7, #16
 8004592:	3502      	adds	r5, #2
 8004594:	2e00      	cmp	r6, #0
 8004596:	bf0c      	ite	eq
 8004598:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800459c:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80045a0:	2200      	movs	r2, #0
 80045a2:	fbb1 fef7 	udiv	lr, r1, r7
 80045a6:	4610      	mov	r0, r2
 80045a8:	fb07 1c1e 	mls	ip, r7, lr, r1
 80045ac:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80045b0:	2b09      	cmp	r3, #9
 80045b2:	d811      	bhi.n	80045d8 <_strtol_l.isra.0+0xa4>
 80045b4:	461c      	mov	r4, r3
 80045b6:	42a7      	cmp	r7, r4
 80045b8:	dd1d      	ble.n	80045f6 <_strtol_l.isra.0+0xc2>
 80045ba:	1c53      	adds	r3, r2, #1
 80045bc:	d007      	beq.n	80045ce <_strtol_l.isra.0+0x9a>
 80045be:	4586      	cmp	lr, r0
 80045c0:	d316      	bcc.n	80045f0 <_strtol_l.isra.0+0xbc>
 80045c2:	d101      	bne.n	80045c8 <_strtol_l.isra.0+0x94>
 80045c4:	45a4      	cmp	ip, r4
 80045c6:	db13      	blt.n	80045f0 <_strtol_l.isra.0+0xbc>
 80045c8:	fb00 4007 	mla	r0, r0, r7, r4
 80045cc:	2201      	movs	r2, #1
 80045ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80045d2:	e7eb      	b.n	80045ac <_strtol_l.isra.0+0x78>
 80045d4:	270a      	movs	r7, #10
 80045d6:	e7dd      	b.n	8004594 <_strtol_l.isra.0+0x60>
 80045d8:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80045dc:	2b19      	cmp	r3, #25
 80045de:	d801      	bhi.n	80045e4 <_strtol_l.isra.0+0xb0>
 80045e0:	3c37      	subs	r4, #55	; 0x37
 80045e2:	e7e8      	b.n	80045b6 <_strtol_l.isra.0+0x82>
 80045e4:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80045e8:	2b19      	cmp	r3, #25
 80045ea:	d804      	bhi.n	80045f6 <_strtol_l.isra.0+0xc2>
 80045ec:	3c57      	subs	r4, #87	; 0x57
 80045ee:	e7e2      	b.n	80045b6 <_strtol_l.isra.0+0x82>
 80045f0:	f04f 32ff 	mov.w	r2, #4294967295
 80045f4:	e7eb      	b.n	80045ce <_strtol_l.isra.0+0x9a>
 80045f6:	1c53      	adds	r3, r2, #1
 80045f8:	d108      	bne.n	800460c <_strtol_l.isra.0+0xd8>
 80045fa:	2322      	movs	r3, #34	; 0x22
 80045fc:	f8c8 3000 	str.w	r3, [r8]
 8004600:	4608      	mov	r0, r1
 8004602:	f1ba 0f00 	cmp.w	sl, #0
 8004606:	d107      	bne.n	8004618 <_strtol_l.isra.0+0xe4>
 8004608:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800460c:	b106      	cbz	r6, 8004610 <_strtol_l.isra.0+0xdc>
 800460e:	4240      	negs	r0, r0
 8004610:	f1ba 0f00 	cmp.w	sl, #0
 8004614:	d00c      	beq.n	8004630 <_strtol_l.isra.0+0xfc>
 8004616:	b122      	cbz	r2, 8004622 <_strtol_l.isra.0+0xee>
 8004618:	3d01      	subs	r5, #1
 800461a:	f8ca 5000 	str.w	r5, [sl]
 800461e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004622:	464d      	mov	r5, r9
 8004624:	e7f9      	b.n	800461a <_strtol_l.isra.0+0xe6>
 8004626:	2430      	movs	r4, #48	; 0x30
 8004628:	2f00      	cmp	r7, #0
 800462a:	d1b3      	bne.n	8004594 <_strtol_l.isra.0+0x60>
 800462c:	2708      	movs	r7, #8
 800462e:	e7b1      	b.n	8004594 <_strtol_l.isra.0+0x60>
 8004630:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004634 <_strtol_r>:
 8004634:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004636:	4c06      	ldr	r4, [pc, #24]	; (8004650 <_strtol_r+0x1c>)
 8004638:	4d06      	ldr	r5, [pc, #24]	; (8004654 <_strtol_r+0x20>)
 800463a:	6824      	ldr	r4, [r4, #0]
 800463c:	6a24      	ldr	r4, [r4, #32]
 800463e:	2c00      	cmp	r4, #0
 8004640:	bf08      	it	eq
 8004642:	462c      	moveq	r4, r5
 8004644:	9400      	str	r4, [sp, #0]
 8004646:	f7ff ff75 	bl	8004534 <_strtol_l.isra.0>
 800464a:	b003      	add	sp, #12
 800464c:	bd30      	pop	{r4, r5, pc}
 800464e:	bf00      	nop
 8004650:	20000188 	.word	0x20000188
 8004654:	200001ec 	.word	0x200001ec

08004658 <_strtoul_l.isra.0>:
 8004658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800465c:	4680      	mov	r8, r0
 800465e:	4689      	mov	r9, r1
 8004660:	4692      	mov	sl, r2
 8004662:	461e      	mov	r6, r3
 8004664:	460f      	mov	r7, r1
 8004666:	463d      	mov	r5, r7
 8004668:	9808      	ldr	r0, [sp, #32]
 800466a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800466e:	f000 f8be 	bl	80047ee <__locale_ctype_ptr_l>
 8004672:	4420      	add	r0, r4
 8004674:	7843      	ldrb	r3, [r0, #1]
 8004676:	f013 0308 	ands.w	r3, r3, #8
 800467a:	d10a      	bne.n	8004692 <_strtoul_l.isra.0+0x3a>
 800467c:	2c2d      	cmp	r4, #45	; 0x2d
 800467e:	d10a      	bne.n	8004696 <_strtoul_l.isra.0+0x3e>
 8004680:	782c      	ldrb	r4, [r5, #0]
 8004682:	2301      	movs	r3, #1
 8004684:	1cbd      	adds	r5, r7, #2
 8004686:	b15e      	cbz	r6, 80046a0 <_strtoul_l.isra.0+0x48>
 8004688:	2e10      	cmp	r6, #16
 800468a:	d113      	bne.n	80046b4 <_strtoul_l.isra.0+0x5c>
 800468c:	2c30      	cmp	r4, #48	; 0x30
 800468e:	d009      	beq.n	80046a4 <_strtoul_l.isra.0+0x4c>
 8004690:	e010      	b.n	80046b4 <_strtoul_l.isra.0+0x5c>
 8004692:	462f      	mov	r7, r5
 8004694:	e7e7      	b.n	8004666 <_strtoul_l.isra.0+0xe>
 8004696:	2c2b      	cmp	r4, #43	; 0x2b
 8004698:	bf04      	itt	eq
 800469a:	782c      	ldrbeq	r4, [r5, #0]
 800469c:	1cbd      	addeq	r5, r7, #2
 800469e:	e7f2      	b.n	8004686 <_strtoul_l.isra.0+0x2e>
 80046a0:	2c30      	cmp	r4, #48	; 0x30
 80046a2:	d125      	bne.n	80046f0 <_strtoul_l.isra.0+0x98>
 80046a4:	782a      	ldrb	r2, [r5, #0]
 80046a6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80046aa:	2a58      	cmp	r2, #88	; 0x58
 80046ac:	d14a      	bne.n	8004744 <_strtoul_l.isra.0+0xec>
 80046ae:	786c      	ldrb	r4, [r5, #1]
 80046b0:	2610      	movs	r6, #16
 80046b2:	3502      	adds	r5, #2
 80046b4:	f04f 31ff 	mov.w	r1, #4294967295
 80046b8:	2700      	movs	r7, #0
 80046ba:	fbb1 f1f6 	udiv	r1, r1, r6
 80046be:	fb06 fe01 	mul.w	lr, r6, r1
 80046c2:	ea6f 0e0e 	mvn.w	lr, lr
 80046c6:	4638      	mov	r0, r7
 80046c8:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 80046cc:	2a09      	cmp	r2, #9
 80046ce:	d811      	bhi.n	80046f4 <_strtoul_l.isra.0+0x9c>
 80046d0:	4614      	mov	r4, r2
 80046d2:	42a6      	cmp	r6, r4
 80046d4:	dd1d      	ble.n	8004712 <_strtoul_l.isra.0+0xba>
 80046d6:	2f00      	cmp	r7, #0
 80046d8:	db18      	blt.n	800470c <_strtoul_l.isra.0+0xb4>
 80046da:	4281      	cmp	r1, r0
 80046dc:	d316      	bcc.n	800470c <_strtoul_l.isra.0+0xb4>
 80046de:	d101      	bne.n	80046e4 <_strtoul_l.isra.0+0x8c>
 80046e0:	45a6      	cmp	lr, r4
 80046e2:	db13      	blt.n	800470c <_strtoul_l.isra.0+0xb4>
 80046e4:	fb00 4006 	mla	r0, r0, r6, r4
 80046e8:	2701      	movs	r7, #1
 80046ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80046ee:	e7eb      	b.n	80046c8 <_strtoul_l.isra.0+0x70>
 80046f0:	260a      	movs	r6, #10
 80046f2:	e7df      	b.n	80046b4 <_strtoul_l.isra.0+0x5c>
 80046f4:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 80046f8:	2a19      	cmp	r2, #25
 80046fa:	d801      	bhi.n	8004700 <_strtoul_l.isra.0+0xa8>
 80046fc:	3c37      	subs	r4, #55	; 0x37
 80046fe:	e7e8      	b.n	80046d2 <_strtoul_l.isra.0+0x7a>
 8004700:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 8004704:	2a19      	cmp	r2, #25
 8004706:	d804      	bhi.n	8004712 <_strtoul_l.isra.0+0xba>
 8004708:	3c57      	subs	r4, #87	; 0x57
 800470a:	e7e2      	b.n	80046d2 <_strtoul_l.isra.0+0x7a>
 800470c:	f04f 37ff 	mov.w	r7, #4294967295
 8004710:	e7eb      	b.n	80046ea <_strtoul_l.isra.0+0x92>
 8004712:	2f00      	cmp	r7, #0
 8004714:	da09      	bge.n	800472a <_strtoul_l.isra.0+0xd2>
 8004716:	2322      	movs	r3, #34	; 0x22
 8004718:	f8c8 3000 	str.w	r3, [r8]
 800471c:	f04f 30ff 	mov.w	r0, #4294967295
 8004720:	f1ba 0f00 	cmp.w	sl, #0
 8004724:	d107      	bne.n	8004736 <_strtoul_l.isra.0+0xde>
 8004726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800472a:	b103      	cbz	r3, 800472e <_strtoul_l.isra.0+0xd6>
 800472c:	4240      	negs	r0, r0
 800472e:	f1ba 0f00 	cmp.w	sl, #0
 8004732:	d00c      	beq.n	800474e <_strtoul_l.isra.0+0xf6>
 8004734:	b127      	cbz	r7, 8004740 <_strtoul_l.isra.0+0xe8>
 8004736:	3d01      	subs	r5, #1
 8004738:	f8ca 5000 	str.w	r5, [sl]
 800473c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004740:	464d      	mov	r5, r9
 8004742:	e7f9      	b.n	8004738 <_strtoul_l.isra.0+0xe0>
 8004744:	2430      	movs	r4, #48	; 0x30
 8004746:	2e00      	cmp	r6, #0
 8004748:	d1b4      	bne.n	80046b4 <_strtoul_l.isra.0+0x5c>
 800474a:	2608      	movs	r6, #8
 800474c:	e7b2      	b.n	80046b4 <_strtoul_l.isra.0+0x5c>
 800474e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08004754 <_strtoul_r>:
 8004754:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004756:	4c06      	ldr	r4, [pc, #24]	; (8004770 <_strtoul_r+0x1c>)
 8004758:	4d06      	ldr	r5, [pc, #24]	; (8004774 <_strtoul_r+0x20>)
 800475a:	6824      	ldr	r4, [r4, #0]
 800475c:	6a24      	ldr	r4, [r4, #32]
 800475e:	2c00      	cmp	r4, #0
 8004760:	bf08      	it	eq
 8004762:	462c      	moveq	r4, r5
 8004764:	9400      	str	r4, [sp, #0]
 8004766:	f7ff ff77 	bl	8004658 <_strtoul_l.isra.0>
 800476a:	b003      	add	sp, #12
 800476c:	bd30      	pop	{r4, r5, pc}
 800476e:	bf00      	nop
 8004770:	20000188 	.word	0x20000188
 8004774:	200001ec 	.word	0x200001ec

08004778 <__submore>:
 8004778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800477c:	460c      	mov	r4, r1
 800477e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004780:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004784:	4299      	cmp	r1, r3
 8004786:	d11e      	bne.n	80047c6 <__submore+0x4e>
 8004788:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800478c:	f000 f8c6 	bl	800491c <_malloc_r>
 8004790:	b918      	cbnz	r0, 800479a <__submore+0x22>
 8004792:	f04f 30ff 	mov.w	r0, #4294967295
 8004796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800479a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800479e:	63a3      	str	r3, [r4, #56]	; 0x38
 80047a0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80047a4:	6360      	str	r0, [r4, #52]	; 0x34
 80047a6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80047aa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80047ae:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80047b2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80047b6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80047ba:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80047be:	6020      	str	r0, [r4, #0]
 80047c0:	2000      	movs	r0, #0
 80047c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047c6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80047c8:	0077      	lsls	r7, r6, #1
 80047ca:	463a      	mov	r2, r7
 80047cc:	f000 f904 	bl	80049d8 <_realloc_r>
 80047d0:	4605      	mov	r5, r0
 80047d2:	2800      	cmp	r0, #0
 80047d4:	d0dd      	beq.n	8004792 <__submore+0x1a>
 80047d6:	eb00 0806 	add.w	r8, r0, r6
 80047da:	4601      	mov	r1, r0
 80047dc:	4632      	mov	r2, r6
 80047de:	4640      	mov	r0, r8
 80047e0:	f000 f828 	bl	8004834 <memcpy>
 80047e4:	f8c4 8000 	str.w	r8, [r4]
 80047e8:	6365      	str	r5, [r4, #52]	; 0x34
 80047ea:	63a7      	str	r7, [r4, #56]	; 0x38
 80047ec:	e7e8      	b.n	80047c0 <__submore+0x48>

080047ee <__locale_ctype_ptr_l>:
 80047ee:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80047f2:	4770      	bx	lr

080047f4 <__locale_ctype_ptr>:
 80047f4:	4b04      	ldr	r3, [pc, #16]	; (8004808 <__locale_ctype_ptr+0x14>)
 80047f6:	4a05      	ldr	r2, [pc, #20]	; (800480c <__locale_ctype_ptr+0x18>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	bf08      	it	eq
 8004800:	4613      	moveq	r3, r2
 8004802:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8004806:	4770      	bx	lr
 8004808:	20000188 	.word	0x20000188
 800480c:	200001ec 	.word	0x200001ec

08004810 <__ascii_mbtowc>:
 8004810:	b082      	sub	sp, #8
 8004812:	b901      	cbnz	r1, 8004816 <__ascii_mbtowc+0x6>
 8004814:	a901      	add	r1, sp, #4
 8004816:	b142      	cbz	r2, 800482a <__ascii_mbtowc+0x1a>
 8004818:	b14b      	cbz	r3, 800482e <__ascii_mbtowc+0x1e>
 800481a:	7813      	ldrb	r3, [r2, #0]
 800481c:	600b      	str	r3, [r1, #0]
 800481e:	7812      	ldrb	r2, [r2, #0]
 8004820:	1c10      	adds	r0, r2, #0
 8004822:	bf18      	it	ne
 8004824:	2001      	movne	r0, #1
 8004826:	b002      	add	sp, #8
 8004828:	4770      	bx	lr
 800482a:	4610      	mov	r0, r2
 800482c:	e7fb      	b.n	8004826 <__ascii_mbtowc+0x16>
 800482e:	f06f 0001 	mvn.w	r0, #1
 8004832:	e7f8      	b.n	8004826 <__ascii_mbtowc+0x16>

08004834 <memcpy>:
 8004834:	b510      	push	{r4, lr}
 8004836:	1e43      	subs	r3, r0, #1
 8004838:	440a      	add	r2, r1
 800483a:	4291      	cmp	r1, r2
 800483c:	d100      	bne.n	8004840 <memcpy+0xc>
 800483e:	bd10      	pop	{r4, pc}
 8004840:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004844:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004848:	e7f7      	b.n	800483a <memcpy+0x6>

0800484a <memmove>:
 800484a:	4288      	cmp	r0, r1
 800484c:	b510      	push	{r4, lr}
 800484e:	eb01 0302 	add.w	r3, r1, r2
 8004852:	d803      	bhi.n	800485c <memmove+0x12>
 8004854:	1e42      	subs	r2, r0, #1
 8004856:	4299      	cmp	r1, r3
 8004858:	d10c      	bne.n	8004874 <memmove+0x2a>
 800485a:	bd10      	pop	{r4, pc}
 800485c:	4298      	cmp	r0, r3
 800485e:	d2f9      	bcs.n	8004854 <memmove+0xa>
 8004860:	1881      	adds	r1, r0, r2
 8004862:	1ad2      	subs	r2, r2, r3
 8004864:	42d3      	cmn	r3, r2
 8004866:	d100      	bne.n	800486a <memmove+0x20>
 8004868:	bd10      	pop	{r4, pc}
 800486a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800486e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004872:	e7f7      	b.n	8004864 <memmove+0x1a>
 8004874:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004878:	f802 4f01 	strb.w	r4, [r2, #1]!
 800487c:	e7eb      	b.n	8004856 <memmove+0xc>
	...

08004880 <_free_r>:
 8004880:	b538      	push	{r3, r4, r5, lr}
 8004882:	4605      	mov	r5, r0
 8004884:	2900      	cmp	r1, #0
 8004886:	d045      	beq.n	8004914 <_free_r+0x94>
 8004888:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800488c:	1f0c      	subs	r4, r1, #4
 800488e:	2b00      	cmp	r3, #0
 8004890:	bfb8      	it	lt
 8004892:	18e4      	addlt	r4, r4, r3
 8004894:	f000 f8e3 	bl	8004a5e <__malloc_lock>
 8004898:	4a1f      	ldr	r2, [pc, #124]	; (8004918 <_free_r+0x98>)
 800489a:	6813      	ldr	r3, [r2, #0]
 800489c:	4610      	mov	r0, r2
 800489e:	b933      	cbnz	r3, 80048ae <_free_r+0x2e>
 80048a0:	6063      	str	r3, [r4, #4]
 80048a2:	6014      	str	r4, [r2, #0]
 80048a4:	4628      	mov	r0, r5
 80048a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048aa:	f000 b8d9 	b.w	8004a60 <__malloc_unlock>
 80048ae:	42a3      	cmp	r3, r4
 80048b0:	d90c      	bls.n	80048cc <_free_r+0x4c>
 80048b2:	6821      	ldr	r1, [r4, #0]
 80048b4:	1862      	adds	r2, r4, r1
 80048b6:	4293      	cmp	r3, r2
 80048b8:	bf04      	itt	eq
 80048ba:	681a      	ldreq	r2, [r3, #0]
 80048bc:	685b      	ldreq	r3, [r3, #4]
 80048be:	6063      	str	r3, [r4, #4]
 80048c0:	bf04      	itt	eq
 80048c2:	1852      	addeq	r2, r2, r1
 80048c4:	6022      	streq	r2, [r4, #0]
 80048c6:	6004      	str	r4, [r0, #0]
 80048c8:	e7ec      	b.n	80048a4 <_free_r+0x24>
 80048ca:	4613      	mov	r3, r2
 80048cc:	685a      	ldr	r2, [r3, #4]
 80048ce:	b10a      	cbz	r2, 80048d4 <_free_r+0x54>
 80048d0:	42a2      	cmp	r2, r4
 80048d2:	d9fa      	bls.n	80048ca <_free_r+0x4a>
 80048d4:	6819      	ldr	r1, [r3, #0]
 80048d6:	1858      	adds	r0, r3, r1
 80048d8:	42a0      	cmp	r0, r4
 80048da:	d10b      	bne.n	80048f4 <_free_r+0x74>
 80048dc:	6820      	ldr	r0, [r4, #0]
 80048de:	4401      	add	r1, r0
 80048e0:	1858      	adds	r0, r3, r1
 80048e2:	4282      	cmp	r2, r0
 80048e4:	6019      	str	r1, [r3, #0]
 80048e6:	d1dd      	bne.n	80048a4 <_free_r+0x24>
 80048e8:	6810      	ldr	r0, [r2, #0]
 80048ea:	6852      	ldr	r2, [r2, #4]
 80048ec:	605a      	str	r2, [r3, #4]
 80048ee:	4401      	add	r1, r0
 80048f0:	6019      	str	r1, [r3, #0]
 80048f2:	e7d7      	b.n	80048a4 <_free_r+0x24>
 80048f4:	d902      	bls.n	80048fc <_free_r+0x7c>
 80048f6:	230c      	movs	r3, #12
 80048f8:	602b      	str	r3, [r5, #0]
 80048fa:	e7d3      	b.n	80048a4 <_free_r+0x24>
 80048fc:	6820      	ldr	r0, [r4, #0]
 80048fe:	1821      	adds	r1, r4, r0
 8004900:	428a      	cmp	r2, r1
 8004902:	bf04      	itt	eq
 8004904:	6811      	ldreq	r1, [r2, #0]
 8004906:	6852      	ldreq	r2, [r2, #4]
 8004908:	6062      	str	r2, [r4, #4]
 800490a:	bf04      	itt	eq
 800490c:	1809      	addeq	r1, r1, r0
 800490e:	6021      	streq	r1, [r4, #0]
 8004910:	605c      	str	r4, [r3, #4]
 8004912:	e7c7      	b.n	80048a4 <_free_r+0x24>
 8004914:	bd38      	pop	{r3, r4, r5, pc}
 8004916:	bf00      	nop
 8004918:	200004b4 	.word	0x200004b4

0800491c <_malloc_r>:
 800491c:	b570      	push	{r4, r5, r6, lr}
 800491e:	1ccd      	adds	r5, r1, #3
 8004920:	f025 0503 	bic.w	r5, r5, #3
 8004924:	3508      	adds	r5, #8
 8004926:	2d0c      	cmp	r5, #12
 8004928:	bf38      	it	cc
 800492a:	250c      	movcc	r5, #12
 800492c:	2d00      	cmp	r5, #0
 800492e:	4606      	mov	r6, r0
 8004930:	db01      	blt.n	8004936 <_malloc_r+0x1a>
 8004932:	42a9      	cmp	r1, r5
 8004934:	d903      	bls.n	800493e <_malloc_r+0x22>
 8004936:	230c      	movs	r3, #12
 8004938:	6033      	str	r3, [r6, #0]
 800493a:	2000      	movs	r0, #0
 800493c:	bd70      	pop	{r4, r5, r6, pc}
 800493e:	f000 f88e 	bl	8004a5e <__malloc_lock>
 8004942:	4a23      	ldr	r2, [pc, #140]	; (80049d0 <_malloc_r+0xb4>)
 8004944:	6814      	ldr	r4, [r2, #0]
 8004946:	4621      	mov	r1, r4
 8004948:	b991      	cbnz	r1, 8004970 <_malloc_r+0x54>
 800494a:	4c22      	ldr	r4, [pc, #136]	; (80049d4 <_malloc_r+0xb8>)
 800494c:	6823      	ldr	r3, [r4, #0]
 800494e:	b91b      	cbnz	r3, 8004958 <_malloc_r+0x3c>
 8004950:	4630      	mov	r0, r6
 8004952:	f000 f867 	bl	8004a24 <_sbrk_r>
 8004956:	6020      	str	r0, [r4, #0]
 8004958:	4629      	mov	r1, r5
 800495a:	4630      	mov	r0, r6
 800495c:	f000 f862 	bl	8004a24 <_sbrk_r>
 8004960:	1c43      	adds	r3, r0, #1
 8004962:	d126      	bne.n	80049b2 <_malloc_r+0x96>
 8004964:	230c      	movs	r3, #12
 8004966:	6033      	str	r3, [r6, #0]
 8004968:	4630      	mov	r0, r6
 800496a:	f000 f879 	bl	8004a60 <__malloc_unlock>
 800496e:	e7e4      	b.n	800493a <_malloc_r+0x1e>
 8004970:	680b      	ldr	r3, [r1, #0]
 8004972:	1b5b      	subs	r3, r3, r5
 8004974:	d41a      	bmi.n	80049ac <_malloc_r+0x90>
 8004976:	2b0b      	cmp	r3, #11
 8004978:	d90f      	bls.n	800499a <_malloc_r+0x7e>
 800497a:	600b      	str	r3, [r1, #0]
 800497c:	50cd      	str	r5, [r1, r3]
 800497e:	18cc      	adds	r4, r1, r3
 8004980:	4630      	mov	r0, r6
 8004982:	f000 f86d 	bl	8004a60 <__malloc_unlock>
 8004986:	f104 000b 	add.w	r0, r4, #11
 800498a:	1d23      	adds	r3, r4, #4
 800498c:	f020 0007 	bic.w	r0, r0, #7
 8004990:	1ac3      	subs	r3, r0, r3
 8004992:	d01b      	beq.n	80049cc <_malloc_r+0xb0>
 8004994:	425a      	negs	r2, r3
 8004996:	50e2      	str	r2, [r4, r3]
 8004998:	bd70      	pop	{r4, r5, r6, pc}
 800499a:	428c      	cmp	r4, r1
 800499c:	bf0d      	iteet	eq
 800499e:	6863      	ldreq	r3, [r4, #4]
 80049a0:	684b      	ldrne	r3, [r1, #4]
 80049a2:	6063      	strne	r3, [r4, #4]
 80049a4:	6013      	streq	r3, [r2, #0]
 80049a6:	bf18      	it	ne
 80049a8:	460c      	movne	r4, r1
 80049aa:	e7e9      	b.n	8004980 <_malloc_r+0x64>
 80049ac:	460c      	mov	r4, r1
 80049ae:	6849      	ldr	r1, [r1, #4]
 80049b0:	e7ca      	b.n	8004948 <_malloc_r+0x2c>
 80049b2:	1cc4      	adds	r4, r0, #3
 80049b4:	f024 0403 	bic.w	r4, r4, #3
 80049b8:	42a0      	cmp	r0, r4
 80049ba:	d005      	beq.n	80049c8 <_malloc_r+0xac>
 80049bc:	1a21      	subs	r1, r4, r0
 80049be:	4630      	mov	r0, r6
 80049c0:	f000 f830 	bl	8004a24 <_sbrk_r>
 80049c4:	3001      	adds	r0, #1
 80049c6:	d0cd      	beq.n	8004964 <_malloc_r+0x48>
 80049c8:	6025      	str	r5, [r4, #0]
 80049ca:	e7d9      	b.n	8004980 <_malloc_r+0x64>
 80049cc:	bd70      	pop	{r4, r5, r6, pc}
 80049ce:	bf00      	nop
 80049d0:	200004b4 	.word	0x200004b4
 80049d4:	200004b8 	.word	0x200004b8

080049d8 <_realloc_r>:
 80049d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049da:	4607      	mov	r7, r0
 80049dc:	4614      	mov	r4, r2
 80049de:	460e      	mov	r6, r1
 80049e0:	b921      	cbnz	r1, 80049ec <_realloc_r+0x14>
 80049e2:	4611      	mov	r1, r2
 80049e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80049e8:	f7ff bf98 	b.w	800491c <_malloc_r>
 80049ec:	b922      	cbnz	r2, 80049f8 <_realloc_r+0x20>
 80049ee:	f7ff ff47 	bl	8004880 <_free_r>
 80049f2:	4625      	mov	r5, r4
 80049f4:	4628      	mov	r0, r5
 80049f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049f8:	f000 f833 	bl	8004a62 <_malloc_usable_size_r>
 80049fc:	4284      	cmp	r4, r0
 80049fe:	d90f      	bls.n	8004a20 <_realloc_r+0x48>
 8004a00:	4621      	mov	r1, r4
 8004a02:	4638      	mov	r0, r7
 8004a04:	f7ff ff8a 	bl	800491c <_malloc_r>
 8004a08:	4605      	mov	r5, r0
 8004a0a:	2800      	cmp	r0, #0
 8004a0c:	d0f2      	beq.n	80049f4 <_realloc_r+0x1c>
 8004a0e:	4631      	mov	r1, r6
 8004a10:	4622      	mov	r2, r4
 8004a12:	f7ff ff0f 	bl	8004834 <memcpy>
 8004a16:	4631      	mov	r1, r6
 8004a18:	4638      	mov	r0, r7
 8004a1a:	f7ff ff31 	bl	8004880 <_free_r>
 8004a1e:	e7e9      	b.n	80049f4 <_realloc_r+0x1c>
 8004a20:	4635      	mov	r5, r6
 8004a22:	e7e7      	b.n	80049f4 <_realloc_r+0x1c>

08004a24 <_sbrk_r>:
 8004a24:	b538      	push	{r3, r4, r5, lr}
 8004a26:	4c06      	ldr	r4, [pc, #24]	; (8004a40 <_sbrk_r+0x1c>)
 8004a28:	2300      	movs	r3, #0
 8004a2a:	4605      	mov	r5, r0
 8004a2c:	4608      	mov	r0, r1
 8004a2e:	6023      	str	r3, [r4, #0]
 8004a30:	f000 f820 	bl	8004a74 <_sbrk>
 8004a34:	1c43      	adds	r3, r0, #1
 8004a36:	d102      	bne.n	8004a3e <_sbrk_r+0x1a>
 8004a38:	6823      	ldr	r3, [r4, #0]
 8004a3a:	b103      	cbz	r3, 8004a3e <_sbrk_r+0x1a>
 8004a3c:	602b      	str	r3, [r5, #0]
 8004a3e:	bd38      	pop	{r3, r4, r5, pc}
 8004a40:	200005d4 	.word	0x200005d4

08004a44 <__ascii_wctomb>:
 8004a44:	b149      	cbz	r1, 8004a5a <__ascii_wctomb+0x16>
 8004a46:	2aff      	cmp	r2, #255	; 0xff
 8004a48:	bf85      	ittet	hi
 8004a4a:	238a      	movhi	r3, #138	; 0x8a
 8004a4c:	6003      	strhi	r3, [r0, #0]
 8004a4e:	700a      	strbls	r2, [r1, #0]
 8004a50:	f04f 30ff 	movhi.w	r0, #4294967295
 8004a54:	bf98      	it	ls
 8004a56:	2001      	movls	r0, #1
 8004a58:	4770      	bx	lr
 8004a5a:	4608      	mov	r0, r1
 8004a5c:	4770      	bx	lr

08004a5e <__malloc_lock>:
 8004a5e:	4770      	bx	lr

08004a60 <__malloc_unlock>:
 8004a60:	4770      	bx	lr

08004a62 <_malloc_usable_size_r>:
 8004a62:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8004a66:	2800      	cmp	r0, #0
 8004a68:	f1a0 0004 	sub.w	r0, r0, #4
 8004a6c:	bfbc      	itt	lt
 8004a6e:	580b      	ldrlt	r3, [r1, r0]
 8004a70:	18c0      	addlt	r0, r0, r3
 8004a72:	4770      	bx	lr

08004a74 <_sbrk>:
 8004a74:	4b04      	ldr	r3, [pc, #16]	; (8004a88 <_sbrk+0x14>)
 8004a76:	6819      	ldr	r1, [r3, #0]
 8004a78:	4602      	mov	r2, r0
 8004a7a:	b909      	cbnz	r1, 8004a80 <_sbrk+0xc>
 8004a7c:	4903      	ldr	r1, [pc, #12]	; (8004a8c <_sbrk+0x18>)
 8004a7e:	6019      	str	r1, [r3, #0]
 8004a80:	6818      	ldr	r0, [r3, #0]
 8004a82:	4402      	add	r2, r0
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	4770      	bx	lr
 8004a88:	200004bc 	.word	0x200004bc
 8004a8c:	200005d8 	.word	0x200005d8

08004a90 <_init>:
 8004a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a92:	bf00      	nop
 8004a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a96:	bc08      	pop	{r3}
 8004a98:	469e      	mov	lr, r3
 8004a9a:	4770      	bx	lr

08004a9c <_fini>:
 8004a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9e:	bf00      	nop
 8004aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aa2:	bc08      	pop	{r3}
 8004aa4:	469e      	mov	lr, r3
 8004aa6:	4770      	bx	lr
